function varargout = TAgui_AVGwindow(varargin)
% TAGUI_AVGWINDOW Provide user with all necessary controls to perform
% averaging in one dimension on a given dataset.
%
% Normally, this window is called from within the TAgui window.
%
% See also TAGUI

% (c) 2012, Till Biskup
% 2012-10-21

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Make GUI effectively a singleton
singleton = TAguiGetWindowHandle(mfilename)
if (singleton)
    figure(singleton);
    varargout{1} = singleton;
    return;
end

%  Construct the components
hMainFigure = figure('Tag',mfilename,...
    'Visible','off',...
    'Name','TA GUI : AVG Window',...
    'Units','Pixels',...
    'Position',[30,50,800,680],...
    'Resize','off',...
    'NumberTitle','off', ...
    'KeyPressFcn',@keypress_Callback,...
    'Menu','none','Toolbar','none');

defaultBackground = get(hMainFigure,'Color');
mainPanelWidth = 260;
mainPanelHeight = 550;
panel_size = 240;
guiSize = get(hMainFigure,'Position');
guiSize = guiSize([3,4]);

hPlotAxes = axes(...         % the axes for plotting selected plot
    'Tag','axis',...
	'Parent', hMainFigure, ...
    'FontUnit','Pixel','Fontsize',14,...
    'Units', 'Pixels', ...
    'Box','on',...
    'Layer','top',...
    'Position',[70 250 400 400]);
uicontrol('Tag','position_slider',...
    'Style', 'slider',...
	'Parent', hMainFigure, ...
    'Min',1,'Max',100,'Value',50,...
    'Position', [485 250 15 400],...
    'BackgroundColor',[1 1 1],...
    'TooltipString','',...
    'Enable','off',...
    'Callback', {@position_slider_Callback}...
    );

uicontrol('Tag','axis2heading_text',...
    'Style','text',...
    'Parent',hMainFigure,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Center',...
    'FontWeight','bold',...
    'Units','Pixels',...
    'Position',[110 190 320 20],...
    'String','1D Display along the axis the dataset is averaged'...
    );
axes(...         % the axes for plotting selected plot
    'Tag','axis2',...
	'Parent', hMainFigure, ...
    'FontUnit','Pixel','Fontsize',14,...
    'Units', 'Pixels', ...
    'Box','on',...
    'Layer','top',...
    'Position',[70 50 400 140]);


% Create button group, toggle buttons for switching btw. panels
hButtonGroup = uibuttongroup('Tag','mainButtonGroup',...
    'BackgroundColor',defaultBackground,...
    'BorderType','none',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position', [guiSize(1)-mainPanelWidth-20 guiSize(2)-50 mainPanelWidth 30],...
    'Visible','on',...
    'SelectionChangeFcn',{@tbg_Callback});
tb1 = uicontrol('Tag','datasets_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Display',...
    'TooltipString','Select the dataset and review the display settings',...
    'pos',[0 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );
tb2 = uicontrol('Tag','average_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Average',...
    'TooltipString','Set parameters for averaging',...
    'pos',[mainPanelWidth/3 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );
tb3 = uicontrol('Tag','settings_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Settings',...
    'TooltipString','Control settings of the AVG GUI',...
    'pos',[mainPanelWidth/3*2 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );

% Create (switchable and overlaying) main panels
pp1 = uipanel('Tag','display_panel',...
    'parent',hMainFigure,...
    'Title','Display',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp2 = uipanel('Tag','fit_panel',...
    'parent',hMainFigure,...
    'Title','Average',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp3 = uipanel('Tag','settings_panel',...
    'parent',hMainFigure,...
    'Title','Settings',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

% elements for pp1
pp1_p1 = uipanel('Tag','visible_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-120 mainPanelWidth-20 100],...
    'Title','Visible datasets'...
    );
uicontrol('Tag','visible_panel_listbox',...
    'Style','listbox',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-40 70],...
    'TooltipString','List of currently visible spectra',...
    'String','',...
    'Callback',{@visible_panel_listbox_Callback}...
    );

uicontrol('Tag','showonlyactive_checkbox',...
    'Style','checkbox',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'TooltipString','Check to display only the currently active dataset',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-165 130 35],...
    'String','<html>&nbsp;Show only<br />&nbsp;active dataset</html>',...
    'Value',0,...
    'Callback',{@checkbox_Callback,'showonlyactive'}...
    );
uicontrol('Tag','dataset_prev_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[mainPanelWidth-100 mainPanelHeight-165 45 35],...
    'String','<<',...
    'TooltipString','Add currently highlighted spectrum to list of accumulated spectra',...
    'Enable','on',...
    'Callback', {@pushbutton_Callback,'prev'}...
    );
uicontrol('Tag','dataset_next_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[mainPanelWidth-55 mainPanelHeight-165 45 35],...
    'String','>>',...
    'TooltipString','Remove currently highlighted spectrum from list of accumulated spectra',...
    'Enable','on',...
    'Callback', {@pushbutton_Callback,'next'}...
    );

pp1_p2 = uipanel('Tag','sliderposition_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-305 mainPanelWidth-20 135],...
    'Title','Slider position'...
    );
uicontrol('Tag','sliderposition_index_text',...
    'Style','text',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 90 (mainPanelWidth-90)/2 25],...
    'String','index'...
    );
uicontrol('Tag','sliderposition_unit_text',...
    'Style','text',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 90 (mainPanelWidth-90)/2 25],...
    'String','unit'...
    );
uicontrol('Tag','sliderposition_x_text',...
    'Style','text',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 35 20],...
    'String','x'...
    );
uicontrol('Tag','sliderposition_x_index_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 70 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'xindex'}...
    );
uicontrol('Tag','sliderposition_x_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 70 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'xunit'}...
    );
uicontrol('Tag','sliderposition_y_text',...
    'Style','text',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 35 20],...
    'String','y'...
    );
uicontrol('Tag','sliderposition_y_index_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'yindex'}...
    );
uicontrol('Tag','sliderposition_y_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 40 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'yunit'}...
    );
uicontrol('Tag','slider_panel_show_position_checkbox',...
    'Style','checkbox',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'TooltipString','Check to display current position in main display',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[20 10 100 25],...
    'String',' Show',...
    'Value',0,...
    'Callback',{@showposition_checkbox_Callback}...
    );
uicontrol('Tag','slider_panel_maximum_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 10 (mainPanelWidth-90)/2 25],...
    'String','Maximum',...
    'TooltipString','Set position to maximum in both dimensions',...
    'Callback',{@pushbutton_Callback,'showMaximum'}...
    );

pp1_p3 = uipanel('Tag','measure_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-450 mainPanelWidth-20 135],...
    'Title','Measure'...
    );
uicontrol('Tag','measure_index_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 90 (mainPanelWidth-90)/2 25],...
    'String','index'...
    );
uicontrol('Tag','measure_unit_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 90 (mainPanelWidth-90)/2 25],...
    'String','unit'...
    );
uicontrol('Tag','measure_x_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 35 20],...
    'String','x'...
    );
uicontrol('Tag','measure_x_index_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 70 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Enable','Inactive',...
    'Callback',{@position_edit_Callback,'xindex'}...
    );
uicontrol('Tag','measure_x_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 70 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Enable','Inactive',...
    'Callback',{@position_edit_Callback,'xunit'}...
    );
uicontrol('Tag','measure_y_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 35 20],...
    'String','y'...
    );
uicontrol('Tag','measure_y_index_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Enable','Inactive',...
    'Callback',{@position_edit_Callback,'yindex'}...
    );
uicontrol('Tag','measure_y_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 40 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Enable','Inactive',...
    'Callback',{@position_edit_Callback,'yunit'}...
    );
uicontrol('Tag','measure_pick_togglebutton',...
    'Style','togglebutton',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 (mainPanelWidth-90)/2 25],...
    'String','Pick',...
    'TooltipString','Pick point to measure',...
    'Callback',{@togglebutton_Callback,'measurePick'}...
    );
uicontrol('Tag','measure_clear_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 10 (mainPanelWidth-90)/2 25],...
    'String','Clear',...
    'TooltipString','Clear current measurement',...
    'Callback',{@pushbutton_Callback,'measureClear'}...
    );

pp1_p4 = uipanel('Tag','displaytype_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-540 mainPanelWidth-20 80],...
    'Title','Display type'...
    );
uicontrol('Tag','displaytype_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp1_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 mainPanelWidth-40 20],...
    'String','2D plot|1D along x|1D along y',...
    'Callback', {@popupmenu_Callback,'displaytype'}...
    );
uicontrol('Tag','mfe_displaytype_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp1_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-40 20],...
    'String','MFoff|MFoff+MFon|MFoff+MFon+DeltaMF|MFon|DeltaMF|sum(MFoff,MFon)',...
    'Callback', {@popupmenu_Callback,'mfedisplaytype'}...
    );

% elements for pp2

pp2_p1 = uipanel('Tag','dimension_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-70 mainPanelWidth-20 50],...
    'Title','Average dimension'...
    );
uicontrol('Tag','dimension_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-40 20],...
    'String','x  ---  spectrum|y  ---  time trace',...
    'Callback', {@popupmenu_Callback,'dimension'}...
    );

pp2_p2 = uipanel('Tag','label_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-140 mainPanelWidth-20 60],...
    'Title','Label for new dataset'...
    );
uicontrol('Tag','label_edit',...
    'Style','edit',...
    'Parent',pp2_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 10 (mainPanelWidth-40) 25],...
    'String','label',...
    'Enable','on',...
    'Callback',{@edit_Callback,'label'}...
    );

pp2_p3 = uipanel('Tag','averagearea_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-320 mainPanelWidth-20 170],...
    'Title','Average area'...
    );
uicontrol('Tag','averagearea_index_text',...
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 120 (mainPanelWidth-90)/2 25],...
    'String','index'...
    );
uicontrol('Tag','averagearea_unit_text',...
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 120 (mainPanelWidth-90)/2 25],...
    'String','unit'...
    );
uicontrol('Tag','average_start_text',...
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','right',...
    'Units','Pixels',...
    'Position',[10 100 45 20],...
    'String','Start '...
    );
uicontrol('Tag','average_start_index_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 100 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@area_edit_Callback,'startindex'}...
    );
uicontrol('Tag','average_start_unit_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 100 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@area_edit_Callback,'startunit'}...
    );
uicontrol('Tag','average_stop_text',...
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','right',...
    'Units','Pixels',...
    'Position',[10 70 45 20],...
    'String','Stop '...
    );
uicontrol('Tag','average_stop_index_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 70 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@area_edit_Callback,'stopindex'}...
    );
uicontrol('Tag','average_stop_unit_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 70 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@area_edit_Callback,'stopunit'}...
    );
uicontrol('Tag','average_delta_text',...
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','right',...
    'Units','Pixels',...
    'Position',[10 40 45 20],...
    'String','Delta '...
    );
uicontrol('Tag','average_delta_index_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@area_edit_Callback,'deltaindex'}...
    );
uicontrol('Tag','average_delta_unit_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 40 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@area_edit_Callback,'deltaunit'}...
    );
uicontrol('Tag','average_draw_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 (mainPanelWidth-90)/2 25],...
    'String','Draw',...
    'TooltipString','Draw area to average over',...
    'Callback',{@pushbutton_Callback,'averageDraw'}...
    );
uicontrol('Tag','average_clear_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 10 (mainPanelWidth-90)/2 25],...
    'String','Clear',...
    'TooltipString','Clear average area',...
    'Callback',{@pushbutton_Callback,'averageClear'}...
    );

pp2_p4 = uipanel('Tag','avg_displayoptions_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-390 mainPanelWidth-20 60],...
    'Title','AVG display options'...
    );
uicontrol('Tag','avg_display_original_checkbox',...
    'Style','checkbox',...
    'Parent',pp2_p4,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'TooltipString',sprintf('%s\n%s',...
    'Check to display mean value(s) of the average(s)',...
    'as horizontal line(s) in main display'),...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[20 10 100 25],...
    'String','Original',...
    'Value',1,...
    'Callback',{@checkbox_Callback,'original'}...
    );
uicontrol('Tag','avg_display_stdev_checkbox',...
    'Style','checkbox',...
    'Parent',pp2_p4,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'TooltipString','Check to display display std deviation as error bars',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[120 10 100 25],...
    'String','Std deviation',...
    'Value',0,...
    'Callback',{@checkbox_Callback,'stdev'}...
    );

uicontrol('Tag','average_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp2, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Average',...
    'TooltipString','Perform average with parameters set above',...
    'pos',[10+(mainPanelWidth-20)/3*2 mainPanelHeight-440 (mainPanelWidth-20)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Average'}...
    );

% controls for pp3
% ...

pp3_p1 = uipanel('Tag','grid_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-80 mainPanelWidth-20 60],...
    'Title','Grid'...
    );
uicontrol('Tag','grid_x_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','X',...
    'TooltipString','Show grid in x',...
    'pos',[10 10 (mainPanelWidth-40)/4 30],...
    'parent',pp3_p1,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'gridx'}...
    );
uicontrol('Tag','grid_y_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Y',...
    'TooltipString','Show grid in y',...
    'pos',[10+(mainPanelWidth-40)/4 10 (mainPanelWidth-40)/4 30],...
    'parent',pp3_p1,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'gridy'}...
    );
uicontrol('Tag','grid_minor_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','minor',...
    'TooltipString',sprintf('%s\n%s','Show minor grid',...
    '(Works only in combination with X or Y grid)'),...
    'pos',[10+(mainPanelWidth-40)/4*2 10 (mainPanelWidth-40)/4 30],...
    'parent',pp3_p1,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'gridminor'}...
    );
uicontrol('Tag','grid_zero_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','zero',...
    'TooltipString','Show dashed line at zero',...
    'pos',[10+(mainPanelWidth-40)/4*3 10 (mainPanelWidth-40)/4 30],...
    'parent',pp3_p1,...
    'HandleVisibility','off',...
    'Value',1,...
    'Callback',{@togglebutton_Callback,'gridzero'}...
    );

pp3_p2 = uipanel('Tag','averageareasettings_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-180 mainPanelWidth-20 90],...
    'Title','Average area'...
    );
uicontrol('Tag','averageareasettings_colour_text',...
    'Style','text',...
    'Parent',pp3_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 40 (mainPanelWidth-40)/4-10 20],...
    'String','Colour '...
    );
uicontrol('Tag','averageareasettings_coloursample_text',...
    'Style','text',...
    'Parent',pp3_p2,...
    'BackgroundColor',[0.5 0.5 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4 42 (mainPanelWidth-40)/4-10 25],...
    'String',''...
    );
uicontrol('Tag','averageareasettings_colour_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp3_p2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4*2 40 (mainPanelWidth-40)/4*2 30],...
    'String','Palette...',...
    'Callback',{@pushbutton_Callback,'averageareaColourPalette'}...
    );
uicontrol('Tag','averageareasettings_alpha_text',...
    'Style','text',...
    'Parent',pp3_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 10 (mainPanelWidth-40)/4-10 20],...
    'String','Alpha '...
    );
uicontrol('Tag','averageareasettings_alpha_edit',...
    'Style','edit',...
    'Parent',pp3_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4 10 (mainPanelWidth-40)/4-10 25],...
    'String','0.4',...
    'Enable','on',...
    'Callback',{@edit_Callback,'averageareaAlpha'}...
    );
uicontrol('Tag','averageareasettings_alpha_slider',...
    'Style', 'slider',...
	'Parent', pp3_p2, ...
    'Min',0,'Max',1,'Value',0.4,...
    'Position', [10+(mainPanelWidth-40)/4*2 10 (mainPanelWidth-40)/4*2 20],...
    'TooltipString','',...
    'Enable','on',...
    'Callback',{@slider_Callback,'averageareaAlpha'}...
    );

pp3_p3 = uipanel('Tag','avg_panel_line_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-375 mainPanelWidth-20 185],...
    'Title','Line settings'...
    );
uicontrol('Tag','avg_panel_line_text',...
    'Style','text',...
    'Parent',pp3_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 138 60 20],...
    'String','Line'...
    );
uicontrol('Tag','avg_panel_line_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 140 mainPanelWidth-110 20],...
    'String','MFoff|MFon|DeltaMF',...
    'Callback',{@popupmenu_Callback,'line'}...
    );
uicontrol('Tag','avg_panel_colour_text',...
    'Style','text',...
    'Parent',pp3_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 103 60 20],...
    'String','Colour'...
    );
uicontrol('Tag','avg_panel_coloursample_text',...
    'Style','text',...
    'Parent',pp3_p3,...
    'BackgroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 102 40 25],...
    'String',''...
    );
uicontrol('Tag','avg_panel_colour_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp3_p3,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[130 100 100 30],...
    'String','Palette...',...
    'Callback',{@pushbutton_Callback,'lineColourPalette'}...
    );
uicontrol('Tag','avg_panel_linewidth_text',...
    'Style','text',...
    'Parent',pp3_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 68 60 20],...
    'String','Width'...
    );
uicontrol('Tag','avg_panel_linewidth_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 70 mainPanelWidth-110 20],...
    'String','1 px|2 px|3 px|4 px|5 px',...
    'Callback',{@popupmenu_Callback,'linewidth'}...
    );
uicontrol('Tag','avg_panel_linestyle_text',...
    'Style','text',...
    'Parent',pp3_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 38 60 20],...
    'String','Style'...
    );
uicontrol('Tag','avg_panel_linestyle_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 40 mainPanelWidth-110 20],...
    'String','solid|dashed|dotted|dash-dotted|none',...
    'Callback',{@popupmenu_Callback,'linestyle'}...
    );
uicontrol('Tag','avg_panel_linemarker_text',...
    'Style','text',...
    'Parent',pp3_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 8 60 20],...
    'String','Marker'...
    );
uicontrol('Tag','avg_panel_linemarker_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 mainPanelWidth-110 20],...
    'String',['none|plus|circle|asterisk|point|cross|square|diamond|'...
    'triangle up|triangle down|triangle right|triangle left|'...
    'pentagram|hexagram'],...
    'Callback',{@popupmenu_Callback,'linemarker'}...
    );

pp3_p4 = uipanel('Tag','avglinesettings_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-310 mainPanelWidth-20 120],...
    'Visible','Off',...
    'Title','Averaged data line settings'...
    );
uicontrol('Tag','avglinesettings_colour_text',...
    'Style','text',...
    'Parent',pp3_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 70 (mainPanelWidth-40)/4-10 20],...
    'String','Colour '...
    );
uicontrol('Tag','avglinesettings_coloursample_text',...
    'Style','text',...
    'Parent',pp3_p4,...
    'BackgroundColor',[1 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4 72 (mainPanelWidth-40)/4-10 25],...
    'String',''...
    );
uicontrol('Tag','avglinesettings_colour_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp3_p4,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4*2 70 (mainPanelWidth-40)/4*2 30],...
    'String','Palette...',...
    'Callback',{@pushbutton_Callback,'avglineColourPalette'}...
    );
uicontrol('Tag','avglinesettings_width_text',...
    'Style','text',...
    'Parent',pp3_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 40 (mainPanelWidth-40)/4-10 20],...
    'String','Width '...
    );
uicontrol('Tag','avglinesettings_width_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4 42 (mainPanelWidth-40)/4*3 20],...
    'String','1 px|2 px|3 px|4 px|5 px',...
    'Callback', {@popupmenu_Callback,'avglineWidth'}...
    );
uicontrol('Tag','avglinesettings_style_text',...
    'Style','text',...
    'Parent',pp3_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 10 (mainPanelWidth-40)/4-10 20],...
    'String','Style '...
    );
uicontrol('Tag','avglinesettings_style_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4 12 (mainPanelWidth-40)/4*3 20],...
    'String','solid|dashed|dotted|dash-dotted',...
    'Callback', {@popupmenu_Callback,'avglineStyle'}...
    );

uicontrol('Tag','settings_save_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp3, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Save',...
    'TooltipString','Save current settings to configuration file',...
    'pos',[10 10 (mainPanelWidth-20)/2 40],...
    'Enable','off',...
    'Callback',{@pushbutton_Callback,'SettingsSave'}...
    );
uicontrol('Tag','settings_default_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp3, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Defaults',...
    'TooltipString','Reset settings to default settings',...
    'pos',[10+(mainPanelWidth-20)/2 10 (mainPanelWidth-20)/2 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'SettingsDefault'}...
    );


uicontrol('Tag','zoom_togglebutton',...
    'Style','togglebutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'ForegroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'String','+',...
    'TooltipString','Zoom',...
    'pos',[panel_size*2+5 220 25 25],...
    'Enable','on',...
    'Callback',{@togglebutton_Callback,'Zoom'}...
    );

uicontrol('Tag','help_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'ForegroundColor',[0 0 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'String','?',...
    'TooltipString','Display help for how to operate the AVG GUI',...
    'pos',[panel_size*2+5 190 25 25],...
    'Enable','on',...
    'Callback',@TAgui_AVG_helpwindow...
    );


uicontrol('Tag','apply_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Apply',...
    'TooltipString','Apply averaging(s) and append dataset(s) to main GUI',...
    'pos',[guiSize(1)-((mainPanelWidth))-20 20 (mainPanelWidth)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Apply'}...
    );
uicontrol('Tag','discard_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Discard',...
    'TooltipString','Discard current or all averagings',...
    'pos',[guiSize(1)-((mainPanelWidth)/3*2)-20 20 (mainPanelWidth)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Discard'}...
    );
uicontrol('Tag','close_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Close',...
    'TooltipString','Close AVG GUI',...
    'pos',[guiSize(1)-((mainPanelWidth)/3)-20 20 (mainPanelWidth)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Close'}...
    );

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Initialization tasks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Store handles in guidata
guidata(hMainFigure,guihandles);

% Create appdata structure
ad = TAguiDataStructure('guiappdatastructure');

% Apply configuration
guiConfigApply(mfilename);
ad.configuration = getappdata(hMainFigure,'configuration');

% AVG - struct
ad.avg = struct();
ad.avg = ad.configuration.avg;

% avgdata - cell array
ad.avgdata = cell(0);

setappdata(hMainFigure,'data',ad.data);
setappdata(hMainFigure,'origdata',ad.origdata);
setappdata(hMainFigure,'configuration',ad.configuration);
setappdata(hMainFigure,'control',ad.control);
setappdata(hMainFigure,'avg',ad.avg);
setappdata(hMainFigure,'avgdata',ad.avgdata);

% Make the GUI visible.
set(hMainFigure,'Visible','on');
TAmsg('AVG GUI window opened','info');


% Load data from Main GUI
mainGuiWindow = TAguiGetWindowHandle();
if (mainGuiWindow)
    admain = getappdata(mainGuiWindow);
    % Check for availability of necessary fields in appdata
    if (isfield(admain,'data') ~= 0)
        ad.data = admain.data;
        % Add AVG struct to each dataset
        for l=1:length(ad.data)
            ad.data{l}.avg.area.start = 1;
            ad.data{l}.avg.area.stop = 1;
            ad.data{l}.avg.area.delta = 0;
            ad.data{l}.avg.label = '';
            ad.data{l}.avg.dimension = ad.configuration.avg.dimension;
        end
        setappdata(hMainFigure,'data',ad.data);
        ad.origdata = admain.data;
        setappdata(hMainFigure,'origdata',ad.origdata);
    end
    if (isfield(admain,'control') ~= 0)
        ad.control = admain.control;
        ad.control.axis.position = ad.configuration.axis.position;
        ad.control.axis.grid.zero = ad.configuration.axis.grid.zero;
        ad.control.axis.grid.x = ad.configuration.axis.grid.x;
        ad.control.axis.grid.y = ad.configuration.axis.grid.y;
        ad.control.axis.grid.minor = ad.configuration.axis.grid.minor;
        ad.control.axis.onlyActive = ad.configuration.axis.onlyActive;
        setappdata(hMainFigure,'control',ad.control);
    end
    
    updateSpectra();
    ad = getappdata(hMainFigure);
end

updateAxes();
update_position_display();

if (nargout == 1)
    varargout{1} = hMainFigure;
end


% Create function-global cell arrays with line styles and markers
% The first column contains the "names", the second column the values
lineStyles = {...
    'solid','-'; ...
    'dashed','--'; ...
    'dotted',':'; ...
    'dash-dotted','-.'; ...
    'none','none' ...
    };
lineMarker = {...
    'none','none'; ...
    'plus','+'; ...
    'circle','o'; ...
    'asterisk','*'; ...
    'point','.'; ...
    'cross','x'; ...
    'square','s'; ...
    'diamond','d'; ...
    'triangle up','^'; ...
    'triangle down','v'; ...
    'triangle right','<'; ...
    'triangle left','>'; ...
    'pentagram','p'; ...
    'hexagram','h' ...
    };

% Add keypress function to every element that can have one...
handles = findall(...
    allchild(hMainFigure),'style','pushbutton',...
    '-or','style','togglebutton',...
    '-or','style','edit',...
    '-or','style','listbox',...
    '-or','style','popupmenu');
for m=1:length(handles)
    set(handles(m),'KeyPressFcn',@keypress_Callback);
end

% Disable average draw button
gh = guihandles(mainWindow);
set(gh.average_draw_pushbutton,'Enable','Inactive');


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function tbg_Callback(source,~)
    try 
        switchPanel(get(get(source,'SelectedObject'),'String'));
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function checkbox_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of MFE GUI
        mainWindow = TAguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        switch action
            case 'showonlyactive'
                ad.control.axis.onlyActive = get(source,'Value');
            case 'original'
                ad.avg.display.original = get(source,'Value');
            case 'stdev'
                ad.avg.display.stdev = get(source,'Value');
            otherwise
                disp(['TAgui_AVGwindow() : pushbutton_Callback() : '...
                    'Unknown action "' action '"']);
                return;
        end
        setappdata(mainWindow,'avg',ad.avg);
        setappdata(mainWindow,'control',ad.control);
        updateAxes();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function position_slider_Callback(source,~)
    try
        mainWindow = TAguiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);
        
        % Depending on display type settings
        switch ad.control.axis.displayType
            case '1D along x'
                ad.data{ad.control.spectra.active}.display.position.y = ...
                    int16(get(source,'value'));
            case '1D along y'
                ad.data{ad.control.spectra.active}.display.position.x = ...
                    int16(get(source,'value'));
            otherwise
                msg = sprintf('Display type %s currently unsupported',...
                    ad.control.axis.displayType);
                TAmsg(msg,'warning');
        end
        
        % Set appdata from AVG GUI
        setappdata(mainWindow,'data',ad.data);
        
        updateAxes();
        update_position_display();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function position_edit_Callback(source,~,position)
    try
        if isempty(position)
            return;
        end
        
        % If value is empty or NaN after conversion to numeric, restore
        % previous entry and return
        value = strrep(get(source,'String'),',','.');
        if isempty(value) || ...
                ((isnan(str2double(value))) && ~strcmpi(value,'end'))
            % Update slider panel
            updateSliderPanel();
            return;
        end
        
        % Get appdata of AVG GUI
        mainWindow = TAguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        active = ad.control.spectra.active;
        
        % Be as robust as possible: if there is no axes, default is indices
        [y,x] = size(ad.data{active}.data);
        x = linspace(1,x,x);
        y = linspace(1,y,y);
        if (isfield(ad.data{active},'axes') ...
                && isfield(ad.data{active}.axes,'x') ...
                && isfield(ad.data{active}.axes.x,'values') ...
                && not (isempty(ad.data{active}.axes.x.values)))
            x = ad.data{active}.axes.x.values;
        end
        if (isfield(ad.data{active},'axes') ...
                && isfield(ad.data{active}.axes,'y') ...
                && isfield(ad.data{active}.axes.y,'values') ...
                && not (isempty(ad.data{active}.axes.y.values)))
            y = ad.data{active}.axes.y.values;
        end
        
        switch position
            case 'xindex'
                if strcmpi(value,'end')
                    value = length(x);
                else
                    value = round(str2double(value));
                    if (value > length(x)) value = length(x); end %#ok<*SEPEX>
                    if (value < 1) value = 1; end
                end
                ad.data{active}.display.position.x = ...
                    value;
            case 'xunit'
                if strcmpi(value,'end')
                    value = x(end);
                else
                    value = str2double(value);
                    if (value < x(1)) value = x(1); end
                    if (value > x(end)) value = x(end); end
                end
                ad.data{active}.display.position.x = ...
                    interp1(x,1:length(x),value,'nearest');
            case 'yindex'
                if strcmpi(value,'end')
                    value = length(y);
                else
                    value = round(str2double(value));
                    if (value > length(y)) value = length(y); end
                    if (value < 1) value = 1; end
                end
                ad.data{active}.display.position.y = ...
                    value;
            case 'yunit'
                if strcmpi(value,'end')
                    value = y(end);
                else
                    value = str2double(value);
                    if (value < y(1)) value = y(1); end
                    if (value > y(end)) value = y(end); end
                end
                ad.data{active}.display.position.y = ...
                    interp1(y,1:length(y),value,'nearest');
            otherwise
                return;
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'data',ad.data);
        
        % Update slider values display
        updateSliderPanel()

        %Update main axis
        updateAxes();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function showposition_checkbox_Callback(source,~)
    try
        mainWindow = TAguiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);
        
        ad.control.axis.position = get(source,'Value');
        
        % Set appdata from AVG GUI
        setappdata(mainWindow,'control',ad.control);
        
        % Update display
        updateAxes();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function area_edit_Callback(source,~,position)
    try
        if isempty(position)
            return;
        end
        
        % If value is empty or NaN after conversion to numeric, restore
        % previous entry and return
        value = strrep(get(source,'String'),',','.');
        if isempty(value) || ...
                ((isnan(str2double(value))) && ~strcmpi(value,'end'))
            % Update slider panel
            updateAveragePanel();
            return;
        end
        
        % Get appdata of AVG GUI
        mainWindow = TAguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        % Make code lines shorter and code easier to read
        active = ad.control.spectra.active;

        if ~active
            return;
        end
        
        % Be as robust as possible: if there is no axes, default is indices
        [y,x] = size(ad.data{active}.data);
        x = linspace(1,x,x);
        y = linspace(1,y,y);
        if (isfield(ad.data{active},'axes') ...
                && isfield(ad.data{active}.axes,'x') ...
                && isfield(ad.data{active}.axes.x,'values') ...
                && not (isempty(ad.data{active}.axes.x.values)))
            x = ad.data{active}.axes.x.values;
        end
        if (isfield(ad.data{active},'axes') ...
                && isfield(ad.data{active}.axes,'y') ...
                && isfield(ad.data{active}.axes.y,'values') ...
                && not (isempty(ad.data{active}.axes.y.values)))
            y = ad.data{active}.axes.y.values;
        end
        
        if strcmpi(ad.avg.dimension,'x')
            dim = x;
        else
            dim = y;
        end
        
        switch position
            case 'startindex'
                if strcmpi(value,'end')
                    value = length(dim);
                else
                    value = round(str2double(value));
                    if (value > length(dim)) value = length(dim); end
                    if (value < 1) value = 1; end
                end
                ad.data{active}.avg.area.start = value;
                % Set stop value not overlapping
                if ad.data{active}.avg.area.start > ad.data{active}.avg.area.stop
                    % Check whether start + delta > length(dim)
                    if (ad.data{active}.avg.area.start + ad.data{active}.avg.area.delta > length(dim))
                        ad.data{active}.avg.area.stop = length(dim);
                        ad.data{active}.avg.area.delta = ...
                            ad.data{active}.avg.area.stop-ad.data{active}.avg.area.start;
                    else
                        ad.data{active}.avg.area.stop = ...
                            ad.data{active}.avg.area.start+ad.data{active}.avg.area.delta;
                    end
                end
                % Set delta value
                ad.data{active}.avg.area.delta = ...
                    ad.data{active}.avg.area.stop-ad.data{active}.avg.area.start;
            case 'startunit'
                if strcmpi(value,'end')
                    value = dim(end);
                else
                    value = str2double(value);
                    if (value < dim(1)) value = dim(1); end
                    if (value > dim(end)) value = dim(end); end
                end
                ad.data{active}.avg.area.start = ...
                    interp1(...
                    dim,1:length(dim),...
                    value,...
                    'nearest'...
                    );
                % Set stop value not overlapping
                if ad.data{active}.avg.area.start > ad.data{active}.avg.area.stop
                    % Check whether start + delta > length(dim)
                    if (ad.data{active}.avg.area.start + ad.data{active}.avg.area.delta > length(dim))
                        ad.data{active}.avg.area.stop = length(dim);
                        ad.data{active}.avg.area.delta = ...
                            ad.data{active}.avg.area.stop-ad.data{active}.avg.area.start;
                    else
                        ad.data{active}.avg.area.stop = ...
                            ad.data{active}.avg.area.start+ad.data{active}.avg.area.delta;
                    end
                end
                % Set delta value
                ad.data{active}.avg.area.delta = ...
                    ad.data{active}.avg.area.stop-ad.data{active}.avg.area.start;
            case 'stopindex'
                if strcmpi(value,'end')
                    value = length(dim);
                else
                    value = round(str2double(value));
                    if (value > length(dim)) value = length(dim); end
                    if (value < 1) value = 1; end
                end
                ad.data{active}.avg.area.stop = value;
                % Set start value not overlapping
                if ad.data{active}.avg.area.start > ad.data{active}.avg.area.stop
                    % Check whether stop - delta < length(dim)
                    if (ad.data{active}.avg.area.stop - ad.data{active}.avg.area.delta < 1)
                        ad.data{active}.avg.area.start = 1;
                        ad.data{active}.avg.area.delta = ...
                            ad.data{active}.avg.area.stop-ad.data{active}.avg.area.start;
                    else
                        ad.data{active}.avg.area.start = ...
                            ad.data{active}.avg.area.stop-ad.data{active}.avg.area.delta;
                    end
                end
                % Set delta value
                ad.data{active}.avg.area.delta = ...
                    ad.data{active}.avg.area.stop-ad.data{active}.avg.area.start;
            case 'stopunit'
                if strcmpi(value,'end')
                    value = dim(end);
                else
                    value = str2double(value);
                    if (value < dim(1)) value = dim(1); end
                    if (value > dim(end)) value = dim(end); end
                end
                ad.data{active}.avg.area.stop = ...
                    interp1(...
                    dim,1:length(dim),...
                    value,...
                    'nearest'...
                    );
                % Set start value not overlapping
                if ad.data{active}.avg.area.start > ad.data{active}.avg.area.stop
                    % Check whether stop - delta < length(dim)
                    if (ad.data{active}.avg.area.stop - ad.data{active}.avg.area.delta < 1)
                        ad.data{active}.avg.area.start = 1;
                        ad.data{active}.avg.area.delta = ...
                            ad.data{active}.avg.area.stop-ad.data{active}.avg.area.start;
                    else
                        ad.data{active}.avg.area.start = ...
                            ad.data{active}.avg.area.stop-ad.data{active}.avg.area.delta;
                    end
                end
                % Set delta value
                ad.data{active}.avg.area.delta = ...
                    ad.data{active}.avg.area.stop-ad.data{active}.avg.area.start;
            case 'deltaindex'
                value = round(str2double(value));
                if (value > length(dim)) value = length(dim); end
                if (value < 0) value = 0; end
                ad.data{active}.avg.area.delta = value;
                % Check whether start + delta > length(dim)
                if (ad.data{active}.avg.area.start + ad.data{active}.avg.area.delta > length(dim))
                    ad.data{active}.avg.area.stop = length(dim);
                    ad.data{active}.avg.area.delta = ...
                        ad.data{active}.avg.area.stop-ad.data{active}.avg.area.start;
                else
                    ad.data{active}.avg.area.stop = ...
                        ad.data{active}.avg.area.start+ad.data{active}.avg.area.delta;
                end
            case 'deltaunit'
                value = str2double(value);
                if (value < 0) value = 0; end
                if (value > dim(end)-dim(1)) value = dim(end)-dim(1); end
                ad.data{active}.avg.area.delta = ...
                    interp1(...
                    0+abs(dim(2)-dim(1)):abs(dim(2)-dim(1)):(abs(dim(2)-dim(1))*(length(dim))),...
                    1:length(dim),...
                    value,...
                    'nearest'...
                    );
                if isnan(ad.data{active}.avg.area.delta)
                    ad.data{active}.avg.area.delta = 0;
                end
                % Check whether start + delta > length(dim)
                if (ad.data{active}.avg.area.start + ad.data{active}.avg.area.delta > length(dim))
                    ad.data{active}.avg.area.stop = length(dim);
                    ad.data{active}.avg.area.delta = ...
                        ad.data{active}.avg.area.stop-ad.data{active}.avg.area.start;
                else
                    ad.data{active}.avg.area.stop = ...
                        ad.data{active}.avg.area.start+ad.data{active}.avg.area.delta;
                end
            otherwise
                disp('TAgui_AVGwindow() : area_edit_Callback() : Unknown action');
                disp(action);
                return;
        end
        
        % Set dimension and label for current averaging
        ad.data{active}.avg.dimension = ad.avg.dimension;
        ad.data{active}.avg.label = get(gh.label_edit,'String');
        
        % Update appdata of main window
        setappdata(mainWindow,'data',ad.data);
        
        % Update average panel display
        updateAveragePanel();

        %Update main axis
        updateAxes();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function visible_panel_listbox_Callback(source,~)
    try
        mainWindow = TAguiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);
        
        ad.control.spectra.active = ad.control.spectra.visible(...
            get(source,'Value')...
            );
        
        % Set appdata from AVG GUI
        setappdata(mainWindow,'control',ad.control);
        
        updateAxes();
        update_position_display();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function edit_Callback(source,~,field)
    try
        if isempty(field)
            return;
        end
        
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        value = get(source,'String');
        
        switch field
            case 'label'
                if ~isempty(value) && ad.data{ad.control.spectra.active}.avg.area.delta
                    ad.data{ad.control.spectra.active}.avg.label = value;
                    setappdata(mainWindow,'data',ad.data);
                end
                updateAveragePanel();
            otherwise
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function popupmenu_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);

        values = cellstr(get(source,'String'));
        value = values{get(source,'Value')};

        % Get line type currently selected (MFoff/MFon/DeltaMF)
        MFElines = cellstr(get(gh.avg_panel_line_popupmenu,'String'));
        MFEline = MFElines{get(gh.avg_panel_line_popupmenu,'Value')};
        
        switch action
            case 'displaytype'
                displayTypes = cellstr(get(source,'String'));
                ad.control.axis.displayType = ...
                    displayTypes{get(source,'Value')};
                
                % Set appdata of main window
                setappdata(hMainFigure,'control',ad.control);
                
                % If no datasets are loaded, return
                % NOTE: As we return only here, the display type gets set
                % for later 
                if isempty(ad.data)
                    return;
                end
                
                switch ad.control.axis.displayType
                    case '2D plot'
                        set(gh.position_slider,'Enable','Off');
                        updateAxes();
                    case '1D along x'
                        set(gh.position_slider,'Enable','On');
                        updateAxes();
                    case '1D along y'
                        set(gh.position_slider,'Enable','On');
                        updateAxes();
                    otherwise
                        % unknown
                        return;
                end
            case 'mfedisplaytype'
                ad.control.axis.MFEdisplay = value;
                setappdata(mainWindow,'control',ad.control);
                updateAxes();
            case 'dimension'
                ad.avg.dimension = value(1);
                setappdata(mainWindow,'avg',ad.avg);
                % Reset average values (safest way to prevent trouble)
                pushbutton_Callback('','','averageClear');
                updateAxes();
            case 'line'
                % Update settings panel
                updateSettingsPanel();
            case 'linewidth'
                % convert source string into number
                value = str2double(value(1:end-3));
                switch MFEline
                    case 'MFoff'
                        ad.avg.MFoff.line.width = value;
                    case 'MFon'
                        ad.avg.MFon.line.width = value;
                    case 'DeltaMF'
                        ad.avg.DeltaMF.line.width = value;
                    otherwise
                        disp(['TAgui : guiMFEPanel() : '...
                            'popupmenu_Callback(): Unknown MFElineType '...
                            '"' MFEline '"']);
                end
                setappdata(mainWindow,'avg',ad.avg);
                updateAxes();
            case 'linestyle'
                value = lineStyles{...
                    strcmpi(value,lineStyles(:,1)),2};
                switch MFEline
                    case 'MFoff'
                        ad.avg.MFoff.line.style = value;
                    case 'MFon'
                        ad.avg.MFon.line.style = value;
                    case 'DeltaMF'
                        ad.avg.DeltaMF.line.style = value;
                    otherwise
                        disp(['TAgui : guiMFEPanel() : '...
                            'popupmenu_Callback(): Unknown MFElineType '...
                            '"' MFEline '"']);
                end
                setappdata(mainWindow,'avg',ad.avg);
                updateAxes();
            case 'linemarker'
                value = lineMarker{...
                    strcmpi(value,lineMarker(:,1)),2};
                switch MFEline
                    case 'MFoff'
                        ad.avg.MFoff.line.marker.type = value;
                    case 'MFon'
                        ad.avg.MFon.line.marker.type = value;
                    case 'DeltaMF'
                        ad.avg.DeltaMF.line.marker.type = value;
                    otherwise
                        disp(['TAgui : guiMFEPanel() : '...
                            'popupmenu_Callback(): Unknown MFElineType '...
                            '"' MFEline '"']);
                end
                setappdata(mainWindow,'avg',ad.avg);
                updateAxes();
            otherwise
                disp('Unknown popupmenu')
                disp(action);
        end

    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end  
end

function togglebutton_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);

        % Get state of toggle button
        value = get(source,'Value');
        
        % For those togglebuttons who do more complicated stuff
        % Toggle button
        if value % If toggle switched ON
            switch lower(action)
                case 'measurepick'
                    if ~ad.control.spectra.active
                        return;
                    end
                    % Switch off zoom
                    zoom(mainWindow,'off');
                    % Set pointer callback functions
                    set(mainWindow,...
                        'WindowButtonMotionFcn',@trackPointer);
                    set(mainWindow,...
                        'WindowButtonDownFcn',@switchMeasurePointer);
                    return;
                case 'zoom'
                    % Reset pointer callback functions
                    set(mainWindow,'WindowButtonMotionFcn','');
                    set(mainWindow,'WindowButtonDownFcn','');
                    % Reset other zoom toggle button
                    zoom(mainWindow,'on');
                    return;
                case 'gridx'
                    ad.control.axis.grid.x = 'on';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridy'
                    ad.control.axis.grid.y = 'on';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridminor'
                    ad.control.axis.grid.minor = 'on';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridzero'
                    ad.control.axis.grid.zero = value;
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                otherwise
                    disp('TAgui_fitwindow: togglebutton_Callback(): Unknown action');
                    disp(action);
                    return;
            end
        else % If toggle button switched OFF
            switch lower(action)
                case 'measurepick'
                    % Reset pointer callback functions
                    set(mainWindow,'WindowButtonMotionFcn','');
                    set(mainWindow,'WindowButtonDownFcn','');
                    return;
                case 'zoom'
                    zoom(mainWindow,'off');
                    return;
                case 'gridx'
                    ad.control.axis.grid.x = 'off';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridy'
                    ad.control.axis.grid.y = 'off';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridminor'
                    ad.control.axis.grid.minor = 'off';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridzero'
                    ad.control.axis.grid.zero = value;
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                otherwise
                    disp('TAgui_fitwindow: togglebutton_Callback(): Unknown action');
                    disp(action);
                    return;
            end
        end
        
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end
        
function pushbutton_Callback(~,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);

        switch action
            case 'next'
                if isempty(ad.control.spectra.visible)
                    return;
                end
                selected = get(gh.visible_panel_listbox,'Value');
                if selected == length(ad.control.spectra.visible)
                    selected = 1;
                else
                    selected = selected + 1;
                end
                set(gh.visible_panel_listbox,'Value',selected);
                ad.control.spectra.active = selected;
                setappdata(mainWindow,'control',ad.control);
                updateAxes();
                updateSliderPanel();
            case 'prev'
                if isempty(ad.control.spectra.visible)
                    return;
                end
                selected = get(gh.visible_panel_listbox,'Value');
                if selected == 1
                    selected = length(ad.control.spectra.visible);
                else
                    selected = selected - 1;
                end
                set(gh.visible_panel_listbox,'Value',selected);
                ad.control.spectra.active = selected;
                setappdata(mainWindow,'control',ad.control);
                updateAxes();
                updateSliderPanel();
            case 'showMaximum'
                % If no datasets are loaded, return
                if isempty(ad.data) || ~ad.control.spectra.active
                    return;
                end
                [~,ximax] = max(max(ad.data{ad.control.spectra.active}.data));
                [~,yimax] = max(ad.data{ad.control.spectra.active}.data(:,ximax));
                ad.data{ad.control.spectra.active}.display.position.x = ximax;
                ad.data{ad.control.spectra.active}.display.position.y = yimax;
                
                % Set appdata from AVG GUI
                setappdata(mainWindow,'data',ad.data);
                
                updateAxes();
                update_position_display();
                return;
            case 'zoomReset'
                zoom(mainWindow,'off');
                set(gh.zoom_x_togglebutton,'Value',0);
                set(gh.zoom_xy_togglebutton,'Value',0);
                updateAxes();
                return;
            case'measureClear'
                set(gh.measure_pick_togglebutton,'Value',0);
                set(gh.measure_x_index_edit,'String','0');
                set(gh.measure_x_unit_edit,'String','0');
                set(gh.measure_y_index_edit,'String','0');
                set(gh.measure_y_unit_edit,'String','0');
                return;
            case 'averageClear'
                if ~ad.control.spectra.active
                    return;
                end
                ad.data{ad.control.spectra.active}.avg.area.start = 1;
                ad.data{ad.control.spectra.active}.avg.area.stop = 1;
                ad.data{ad.control.spectra.active}.avg.area.delta = 0;
                setappdata(mainWindow,'data',ad.data);
                updateAveragePanel();
                updateAxes();
                return;
            case 'Average'
                if strcmp('x',ad.avg.dimension)
                    ad.control.axis.displayType = '1D along y';
                else
                    ad.control.axis.displayType = '1D along x';
                end
                setappdata(mainWindow,'control',ad.control);
                updateAxes();
                return;
            case 'averageareaColourPalette'
                ad.avg.area.patch.color = uisetcolor(...
                    ad.avg.area.patch.color,'Set average area colour');
                setappdata(mainWindow,'avg',ad.avg);
                updateSettingsPanel();
                updateAxes();
                return;
            case 'avglineColourPalette'
                ad.avg.line.color = uisetcolor(...
                    ad.avg.line.color,'Set averaged data line colour');
                setappdata(mainWindow,'avg',ad.avg);
                updateSettingsPanel();
                updateAxes();
                return;
            case 'SettingsDefault'
                updateSettingsPanel('defaults');
                updateAxes();
                return;
            case 'Apply'
                % Check for every dataset whether an average has been
                % performed (avg.delta ~= 0) and if so, do proper AVG
                ad.avgdata = cell(0);
                for k=1:length(ad.data)
                    if ad.data{k}.avg.area.delta
                        avgparams = struct(...
                            'dimension',ad.data{k}.avg.dimension,...
                            'start',ad.data{k}.avg.area.start,...
                            'stop',ad.data{k}.avg.area.stop,...
                            'label',ad.data{k}.avg.label...
                            );
                        ad.avgdata{end+1} = TAAVG(ad.data{k},avgparams);
                    end
                end
                setappdata(mainWindow,'avgdata',ad.avgdata);
                return;
            case 'Discard'
                if isempty(ad.avgdata)
                    return;
                end
                answer = questdlg(...
                    {'Discard averaging for all datasets or'...
                    'only for the dataset currently selected? '},...
                    'Question: Discard all or only current...',...
                    'All','Current','Cancel',...
                    'Cancel');
                switch answer
                    case 'All'
                        for k=1:length(ad.data)
                            ad.data{k}.avg.area.start = 1;
                            ad.data{k}.avg.area.stop = 1;
                            ad.data{k}.avg.area.delta = 0;
                        end
                        setappdata(mainWindow,'data',ad.data);
                        % Remove all datasets from ad.avgdata
                        ad.avgdata = cell(0);
                        setappdata(mainWindow,'avgdata',ad.avgdata);
                        updateAveragePanel();
                        updateAxes();
                    case 'Current'
                        ad.data{ad.control.spectra.active}.avg.area.start = 1;
                        ad.data{ad.control.spectra.active}.avg.area.stop = 1;
                        ad.data{ad.control.spectra.active}.avg.area.delta = 0;
                        setappdata(mainWindow,'data',ad.data);
                        updateAveragePanel();
                        updateAxes();
                        for k=length(ad.avgdata):-1:1
                            if strcmp(ad.avgdata{k}.label,...
                                    get(gh.label_edit,'String'))
                                ad.avgdata(k) = [];
                            end
                        setappdata(mainWindow,'avgdata',ad.avgdata);
                        end
                    case 'Cancel'
                        return;
                    otherwise
                        return;
                end
                return;
            case 'Close'
                if ~isempty(ad.avgdata)
                    msgStr = {...
                        ['Trying to append averaged data as new '...
                        'datasets to main GUI.']...
                        };
                    TAmsg(msgStr,'info');
                    % Return BLC data to main GUI
                    for k=1:length(ad.avgdata)
                        % Remove field avg.label in data structure
                        if isfield(ad.avgdata{k},'avg')
                            ad.avgdata{k}.avg = rmfield(ad.avgdata{k}.avg,'label');
                        end
                        % Remove display field in data structure
                        if isfield(ad.avgdata{k},'display')
                            ad.avgdata{k} = rmfield(ad.avgdata{k},'display');
                        end
                        status = appendDatasetToMainGUI(...
                            ad.avgdata{k},...
                            'modified',true);
                        if status
                            disp('Hmm... some problems with appending averaged dataset to main GUI.');
                        end
                    end
                end
                TAmsg('AVG GUI window closed.','info');

                % Look for AVG GUI Help window and if its there, close as
                
                hHelpWindow = TAguiGetWindowHandle('TAgui_AVG_helpwindow');
                if ishandle(hHelpWindow)
                    delete(hHelpWindow);
                end
                delete(TAguiGetWindowHandle(mfilename));
            otherwise
                msgStr = ['TAgui_fitwindow: pushbutton_Callback(): '...
                    'Unknown action ' action];
                TAmsg(msgStr,'warning');
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function slider_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);

        % Get state of toggle button
        value = get(source,'Value');
        
        switch lower(action)
            case 'averageareaalpha'
                set(gh.averageareasettings_alpha_edit,'String',num2str(value));
                ad.avg.area.patch.alpha = value;
                setappdata(mainWindow,'avg',ad.avg);
                updateAxes();
            otherwise
                disp('TAgui_fitwindow: slider_Callback(): Unknown action');
                disp(action);
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function keypress_Callback(src,evt)
    try
        if isempty(evt.Character) && isempty(evt.Key)
            % In case "Character" is the empty string, i.e. only modifier key
            % was pressed...
            return;
        end
        mainWindow = TAguiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);

        if ~isempty(evt.Modifier)
            if (strcmpi(evt.Modifier{1},'command')) || ...
                    (strcmpi(evt.Modifier{1},'control'))
                switch evt.Key
                    case 'w'
                        pushbutton_Callback(src,evt,'Close')
                        return;
                    case '1'
                        switchPanel('Display');
                        return;
                    case '2'
                        switchPanel('Average');
                        return;
                    case '3'
                        switchPanel('Settings');
                        return;
                    case 'x'
                        ad.control.axis.displayType = '1D along x';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                    case 'y'
                        ad.control.axis.displayType = '1D along y';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                    case 'z'
                        ad.control.axis.displayType = '2D plot';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                end
            end
        end
        switch evt.Key
            case 'f1'
                TAgui_AVG_helpwindow();
                return;
            otherwise
%                 disp(evt);
%                 fprintf('       Caller: %i\n\n',src);
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function switchPanel(panelName)
    try
        panels = [pp1 pp2 pp3];
        buttons = [tb1 tb2 tb3];
        switch panelName
            case 'Display'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp1,'Visible','on');
                set(tb1,'Value',1);
            case 'Average'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp2,'Visible','on');
                set(tb2,'Value',1);
                updateAveragePanel();
            case 'Settings'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp3,'Visible','on');
                set(tb3,'Value',1);
                updateSettingsPanel();
            otherwise
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

function updateSliderPanel()
    try
        mainWindow = TAguiGetWindowHandle(mfilename);
        % Get appdata of AVG GUI
        ad = getappdata(mainWindow);
        
        % Get handles of AVG GUI
        gh = guihandles(mainWindow);
        
        if ~isfield(ad,'data') || isempty(ad.data)
            set(findall(...
                allchild(gh.sliderposition_panel),...
                'Style','Edit'),'String','1');
            return;
        end

        % Get dimensions and axes of current dataset
        [y,x] = size(ad.data{ad.control.spectra.active}.data);
        x = linspace(1,x,x);
        y = linspace(1,y,y);
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'x') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.x,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.x.values)))
            x = ad.data{ad.control.spectra.active}.axes.x.values;
        end
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'y') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.y,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.y.values)))
            y = ad.data{ad.control.spectra.active}.axes.y.values;
        end
        % In case that we loaded 1D data...
        if isscalar(x)
            x = [x x+1];
        end
        if isscalar(y)
            y = [y y+1];
        end
        
        % update position panel
        set(...
            gh.sliderposition_x_index_edit,...
            'string',...
            ad.data{ad.control.spectra.active}.display.position.x...
            );
        set(...
            gh.sliderposition_x_unit_edit,...
            'string',...
            x(ad.data{ad.control.spectra.active}.display.position.x)...
            );
        set(...
            gh.sliderposition_y_index_edit,...
            'string',...
            ad.data{ad.control.spectra.active}.display.position.y...
            );
        set(...
            gh.sliderposition_y_unit_edit,...
            'string',...
            y(ad.data{ad.control.spectra.active}.display.position.y)...
            );
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addcause(exception2, exception);
            disp(msgstr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % if even displaying the bug report window fails...
            exception = addcause(exception3, exception);
            throw(exception);
        end
    end
end

function updateAveragePanel()
    try
        mainWindow = TAguiGetWindowHandle(mfilename);
        % Get appdata of AVG GUI
        ad = getappdata(mainWindow);
        
        % Get handles of AVG GUI
        gh = guihandles(mainWindow);
        
        if ~isfield(ad,'data') || isempty(ad.data)
            set(findall(...
                allchild(gh.sliderposition_panel),...
                'Style','Edit'),'String','1');
            return;
        end

        % Make codelines shorter and easier to read
        active = ad.control.spectra.active;
        
        if ~active
            return;
        end
        
        % Set label field
        if isempty(ad.data{active}.avg.label)
            ad.data{active}.avg.label = sprintf('%s (AVG, %s)',...
                ad.data{active}.label,ad.avg.dimension);
        end
        set(gh.label_edit,'String',ad.data{active}.avg.label);
        
        % Get dimensions and axes of current dataset
        [y,x] = size(ad.data{active}.data);
        x = linspace(1,x,x);
        y = linspace(1,y,y);
        if (isfield(ad.data{active},'axes') ...
                && isfield(ad.data{active}.axes,'x') ...
                && isfield(ad.data{active}.axes.x,'values') ...
                && not (isempty(ad.data{active}.axes.x.values)))
            x = ad.data{active}.axes.x.values;
        end
        if (isfield(ad.data{active},'axes') ...
                && isfield(ad.data{active}.axes,'y') ...
                && isfield(ad.data{active}.axes.y,'values') ...
                && not (isempty(ad.data{active}.axes.y.values)))
            y = ad.data{active}.axes.y.values;
        end
        % In case that we loaded 1D data...
        if isscalar(x)
            x = [x x+1];
        end
        if isscalar(y)
            y = [y y+1];
        end
        
        % update position panel
        set(...
            gh.average_start_index_edit,...
            'string',...
            ad.data{active}.avg.area.start...
            );
        set(...
            gh.average_stop_index_edit,...
            'string',...
            ad.data{active}.avg.area.stop...
            );
        set(...
            gh.average_delta_index_edit,...
            'string',...
            ad.data{active}.avg.area.delta...
            );

        if strcmpi(ad.avg.dimension,'x')
            set(gh.average_start_unit_edit,...
                'string',num2str(x(ad.data{active}.avg.area.start))...
                );
            set(gh.average_stop_unit_edit,...
                'string',num2str(x(ad.data{active}.avg.area.stop))...
                );
            set(gh.average_delta_unit_edit,...
                'string',num2str(abs(x(2)-x(1))*ad.data{active}.avg.area.delta)...
                );
        else
            set(gh.average_start_unit_edit,...
                'string',num2str(y(ad.data{active}.avg.area.start))...
                );
            set(gh.average_stop_unit_edit,...
                'string',num2str(y(ad.data{active}.avg.area.stop))...
                );
            set(gh.average_delta_unit_edit,...
                'string',num2str(abs(y(2)-y(1))*ad.data{active}.avg.area.delta)...
                );
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addcause(exception2, exception);
            disp(msgstr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % if even displaying the bug report window fails...
            exception = addcause(exception3, exception);
            throw(exception);
        end
    end
end

function updateSettingsPanel(varargin)
    try
        mainWindow = TAguiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);

        % Get handles from main window
        gh = guidata(mainWindow);
               
        if nargin && strcmpi('defaults',varargin{1})
            % Reset display settings
            ad.control.axis.grid.x = ad.configuration.axis.grid.x;
            ad.control.axis.grid.y = ad.configuration.axis.grid.y;
            ad.control.axis.grid.minor = ad.configuration.axis.grid.minor;
            ad.control.axis.grid.zero = ad.configuration.axis.grid.zero;
            % Reset avg settings
            ad.avg.area.patch.color = ad.configuration.avg.area.patch.color;
            ad.avg.area.patch.alpha = ad.configuration.avg.area.patch.alpha;
            ad.avg.line.color = ad.configuration.avg.line.color;
            ad.avg.line.width = ad.configuration.avg.line.width;
            ad.avg.line.style = ad.configuration.avg.line.style;
            setappdata(mainWindow,'avg',ad.avg);
            setappdata(mainWindow,'control',ad.control);
        end
        
        if strcmpi('on',ad.control.axis.grid.x)
            set(gh.grid_x_togglebutton,'Value',1);
        else
            set(gh.grid_x_togglebutton,'Value',0);
        end
        if strcmpi('on',ad.control.axis.grid.y)
            set(gh.grid_y_togglebutton,'Value',1);
        else
            set(gh.grid_y_togglebutton,'Value',0);
        end
        if strcmpi('on',ad.control.axis.grid.minor)
            set(gh.grid_minor_togglebutton,'Value',1);
        else
            set(gh.grid_minor_togglebutton,'Value',0);
        end
        set(gh.grid_zero_togglebutton,'Value',ad.control.axis.grid.zero);
        
        set(gh.averageareasettings_coloursample_text,'Background',...
            ad.avg.area.patch.color);
        set(gh.averageareasettings_alpha_edit,'String',...
            num2str(ad.avg.area.patch.alpha));
        set(gh.averageareasettings_alpha_slider,'Value',...
            ad.avg.area.patch.alpha);
        
        % Get line type currently selected (MFoff/MFon/DeltaMF)
        MFElines = cellstr(get(gh.avg_panel_line_popupmenu,'String'));
        MFEline = MFElines{get(gh.avg_panel_line_popupmenu,'Value')};
        
        % Get values of line style popupmenu
        lineStyleValues = ...
            cellstr(get(gh.avg_panel_linestyle_popupmenu,'String'));
        
        % Get values of line marker popupmenu
        lineMarkerValues = ...
            cellstr(get(gh.avg_panel_linemarker_popupmenu,'String'));

        switch MFEline
            case 'MFoff'
                % Set colour sample
                set(gh.avg_panel_coloursample_text,'BackgroundColor',...
                    ad.avg.MFoff.line.color);
                % Set line width
                set(gh.avg_panel_linewidth_popupmenu,'Value',...
                    ad.avg.MFoff.line.width);
                % Set line style
                set(gh.avg_panel_linestyle_popupmenu,'Value',...
                    find(strcmpi(...
                    lineStyles{strcmpi(ad.avg.MFoff.line.style,...
                    lineStyles(:,2)),1},lineStyleValues)));
                % Set line marker
                set(gh.avg_panel_linemarker_popupmenu,'Value',...
                    find(strcmpi(...
                    lineMarker{strcmpi(ad.avg.MFoff.line.marker.type,...
                    lineMarker(:,2)),1},lineMarkerValues)));
            case 'MFon'
                % Set colour sample
                set(gh.avg_panel_coloursample_text,'BackgroundColor',...
                    ad.avg.MFon.line.color)
                % Set line width
                set(gh.avg_panel_linewidth_popupmenu,'Value',...
                    ad.avg.MFon.line.width);
                % Set line style
                set(gh.avg_panel_linestyle_popupmenu,'Value',...
                    find(strcmpi(lineStyles{...
                    strcmpi(ad.avg.MFon.line.style,...
                    lineStyles(:,2)),1},lineStyleValues)));
                % Set line marker
                set(gh.avg_panel_linemarker_popupmenu,'Value',...
                    find(strcmpi(lineMarker{...
                    strcmpi(ad.avg.MFon.line.marker.type,...
                    lineMarker(:,2)),1},lineMarkerValues)));
            case 'DeltaMF'
                % Set colour sample
                set(gh.avg_panel_coloursample_text,'BackgroundColor',...
                    ad.avg.DeltaMF.line.color)
                % Set line width
                set(gh.avg_panel_linewidth_popupmenu,'Value',...
                    ad.avg.DeltaMF.line.width);
                % Set line style
                set(gh.avg_panel_linestyle_popupmenu,'Value',...
                    find(strcmpi(lineStyles{strcmpi(...
                    ad.avg.DeltaMF.line.style,...
                    lineStyles(:,2)),1},lineStyleValues)));
                % Set line marker
                set(gh.avg_panel_linemarker_popupmenu,'Value',...
                    find(strcmpi(lineMarker{...
                    strcmpi(ad.avg.DeltaMF.line.marker.type,...
                    lineMarker(:,2)),1},lineMarkerValues)));
            case 'smoothing'
                % Set colour sample
                set(gh.avg_panel_coloursample_text,'BackgroundColor',...
                    ad.avg.smoothing.line.color)
                % Set line width
                set(gh.avg_panel_linewidth_popupmenu,'Value',...
                    ad.avg.smoothing.line.width);
                % Set line style
                set(gh.avg_panel_linestyle_popupmenu,'Value',...
                    find(strcmpi(lineStyles{strcmpi(...
                    ad.avg.smoothing.line.style,...
                    lineStyles(:,2)),1},lineStyleValues)));
                % Set line marker
                set(gh.avg_panel_linemarker_popupmenu,'Value',...
                    find(strcmpi(lineMarker{...
                    strcmpi(ad.avg.smoothing.line.marker.type,...
                    lineMarker(:,2)),1},lineMarkerValues)));
            otherwise
                disp(['TAgui_MFEwindow : updateSettingsPanel() : ',...
                    'Unknown MFElineType "' MFEline '"']);
        end

    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end
        
function updateSpectra()
    try
        mainWindow = TAguiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);
        
        if isempty(ad.data) || isempty(ad.control.spectra.visible)
            return;
        end
        
        % Get handle for visible spectra listbox
        gh = guidata(mainWindow);
        visLbox = gh.visible_panel_listbox;
        
        % Get indices of invisible spectra
        vis = ad.control.spectra.visible;
        
        % Get names for display in listbox
        labels = cell(0);
        for k=1:length(vis)
            labels{k} = ad.data{vis(k)}.label;
        end
        
        % Update status display
        set(visLbox,'String',labels);
        if (get(visLbox,'Value')>length(vis))
            set(visLbox,'Value',length(vis));
        end
        if ((get(visLbox,'Value')==0) && ~isempty(vis))
            set(visLbox,'Value',1);
        end
        
        % Highlight currently active
        if ad.control.spectra.active
            set(visLbox,'Value',find(vis==ad.control.spectra.active));
        end
        
        % Change enable status of pushbuttons and other elements
        set(gh.slider_panel_maximum_pushbutton,'Enable','on');

    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
    
end

function update_position_display()
    try
        mainWindow = TAguiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);
        
        if isempty(ad.data) || isempty(ad.control.spectra.visible)
            return;
        end
        
        % Get handle for visible spectra listbox
        gh = guidata(mainWindow);
        
        % Set MFE display type
        MFEdisplayTypes = ...
            cellstr(get(gh.mfe_displaytype_popupmenu,'String'));
        set(gh.mfe_displaytype_popupmenu,'Value',...
            find(strcmp(ad.control.axis.MFEdisplay,MFEdisplayTypes)));

        % Set position in time edit boxes
        set(gh.sliderposition_y_index_edit,...
            'String',...
            num2str(ad.data{ad.control.spectra.active}.display.position.y));
        % Set unit
        [y,~] = size(ad.data{ad.control.spectra.active}.data);
        y = linspace(1,y,y);
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'y') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.y,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.y.values)))
            y = ad.data{ad.control.spectra.active}.axes.y.values;
        end
        set(gh.sliderposition_y_unit_edit,...
            'String',...
            num2str(y(ad.data{ad.control.spectra.active}.display.position.y)));
        
        % Set position in time edit boxes
        set(gh.sliderposition_x_index_edit,...
            'String',...
            num2str(ad.data{ad.control.spectra.active}.display.position.x));
        % Set unit
        [~,x] = size(ad.data{ad.control.spectra.active}.data);
        x = linspace(1,x,x);
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'x') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.x,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.x.values)))
            x = ad.data{ad.control.spectra.active}.axes.x.values;
        end
        set(gh.sliderposition_x_unit_edit,...
            'String',...
            num2str(x(ad.data{ad.control.spectra.active}.display.position.x)));
        
        % Set slider
        switch ad.control.axis.displayType
            case '1D along x'
                set(gh.position_slider,'Value',...
                    ad.data{ad.control.spectra.active}.display.position.y);
            case '1D along y'
                set(gh.position_slider,'Value',...
                    ad.data{ad.control.spectra.active}.display.position.x);
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end


function updateAxes()
    try
        mainWindow = TAguiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);
        
        % Get handles from main window
        gh = guidata(mainWindow);
        
        % Set displayType popupmenu
        displayTypes = cellstr(...
            get(gh.displaytype_popupmenu,'String'));
        [~,index] = max(strcmp(ad.control.axis.displayType,displayTypes));
        set(gh.displaytype_popupmenu,'Value',index);

        % Set display only active checkbox
        set(gh.showonlyactive_checkbox,'Value',...
            ad.control.axis.onlyActive);
        
        if isempty(ad.data) || isempty(ad.control.spectra.visible)
            return;
        end
        
        active = ad.control.spectra.active;
        
        data = ad.data{active}.data;
        if isfield(ad.data{active},'dataMFon')
            dataMFon = ad.data{active}.dataMFon;
        else
            dataMFon = ad.data{active}.data;
        end

        % Apply thresholds
        if ad.data{active}.display.threshold.min.enable
            data(data<ad.data{active}.display.threshold.min.value) = ...
                ad.data{active}.display.threshold.min.value;
        end
        if ad.data{active}.display.threshold.max.enable
            data(data>ad.data{active}.display.threshold.max.value) = ...
                ad.data{active}.display.threshold.max.value;
        end
        
        xvalues = ad.data{active}.axes.x.values;
        xmeasure = ad.data{active}.axes.x.measure;
        xunit = ad.data{active}.axes.x.unit;
        yvalues = ad.data{active}.axes.y.values;
        ymeasure = ad.data{active}.axes.y.measure;
        yunit = ad.data{active}.axes.y.unit;
        zmeasure = ad.data{active}.axes.z.measure;
        zunit = ad.data{active}.axes.z.unit;

        [y,x] = size(data);
        
        cla(gh.axis,'reset');
        set(gh.axis,'Box','on');
        set(gh.axis,'Layer','top');
        axes(gh.axis); %#ok<MAXES>
        switch ad.control.axis.displayType
            case '2D plot'
                % Disable position slider
                set(gh.position_slider,'Enable','off');

                z = [ min(min(data)) max(max(data)) ];
                hold on;
                % Plot 2D data
                switch ad.control.axis.MFEdisplay
                    case 'MFon'
                        imagesc(...
                            xvalues,...
                            yvalues,...
                            dataMFon...
                            );
                    case 'DeltaMF'
                        imagesc(...
                            xvalues,...
                            yvalues,...
                            dataMFon-data...
                            );
                    case 'sum(MFoff,MFon)'
                        imagesc(...
                            xvalues,...
                            yvalues,...
                            (dataMFon+data)./2 ...
                            );
                    otherwise
                        imagesc(...
                            xvalues,...
                            yvalues,...
                            data...
                            );
                end
                if ad.control.axis.position
                    % Plot red line with position in time
                    plot(gh.axis,...
                        [xvalues(ad.data{active}.display.position.x) ...
                        xvalues(ad.data{active}.display.position.x)],...
                        [yvalues(1) yvalues(end)],...
                        'r-');
                    % Plot red line with position in field
                    plot(gh.axis,...
                        [xvalues(1) xvalues(end)],...
                        [yvalues(ad.data{active}.display.position.y) ...
                        yvalues(ad.data{active}.display.position.y)],...
                        'r-');
                end
                hold off;
                if isscalar(xvalues)
                    set(gh.axis,'XLim',[xvalues(1)-.5 xvalues(1)+.4]);
                else
                    set(gh.axis,'XLim',[xvalues(1) xvalues(end)]);
                end
                if isscalar(yvalues)
                    set(gh.axis,'YLim',[yvalues(1)-.5 yvalues(1)+.5]);
                else
                    set(gh.axis,'YLim',[yvalues(1) yvalues(end)]);
                end
                set(gh.axis,'YDir','normal');
                set(gh.axis,'CLim',z);
                xlabel(gh.axis,sprintf('{\\it %s} / %s',xmeasure,xunit));
                ylabel(gh.axis,sprintf('{\\it %s} / %s',ymeasure,yunit));

            case '1D along x'
                % Enable position slider only if second axis has more than one value
                if (y>1)
                    set(gh.position_slider,...
                        'Min',1,'Max',y,...
                        'Value',...
                        ad.data{active}.display.position.y,...
                        'SliderStep',[1/(y-1) 10/(y-1)],...
                        'Enable','on');
                else
                    set(gh.position_slider,...
                        'Enable','off'...
                        );
                end
                % Plot time trace at given position in spectrum
                yvalues = data(ad.data{active}.display.position.y,:);
                if isfield(ad.data{active},'dataMFon')
                    yMF = dataMFon(ad.data{active}.display.position.y,:);
                else
                    yMF = data(ad.data{active}.display.position.y,:);
                end
                hold on;
                if ad.avg.display.original || ~ad.data{active}.avg.area.delta
                    switch ad.control.axis.MFEdisplay
                        case 'MFoff'
                            plot(...
                                xvalues,...
                                yvalues,...
                                'Color',ad.data{active}.line.color,...
                                'LineStyle',ad.data{active}.line.style,...
                                'Marker',ad.data{active}.line.marker.type,...
                                'LineWidth',ad.data{active}.line.width...
                                );
                        case 'MFoff+MFon'
                            plot(...
                                xvalues,...
                                yvalues,...
                                'Color',ad.data{active}.line.color,...
                                'LineStyle',ad.data{active}.line.style,...
                                'Marker',ad.data{active}.line.marker.type,...
                                'LineWidth',ad.data{active}.line.width...
                                );
                            plot(...
                                xvalues,...
                                yMF,...
                                'Color',ad.data{active}.display.MFon.line.color,...
                                'LineStyle',ad.data{active}.display.MFon.line.style,...
                                'Marker',ad.data{active}.display.MFon.line.marker.type,...
                                'LineWidth',ad.data{active}.display.MFon.line.width...
                                );
                        case 'MFoff+MFon+DeltaMF'
                            plot(...
                                xvalues,...
                                yvalues,...
                                'Color',ad.data{active}.line.color,...
                                'LineStyle',ad.data{active}.line.style,...
                                'Marker',ad.data{active}.line.marker.type,...
                                'LineWidth',ad.data{active}.line.width...
                                );
                            plot(...
                                xvalues,...
                                yMF,...
                                'Color',ad.data{active}.display.MFon.line.color,...
                                'LineStyle',ad.data{active}.display.MFon.line.style,...
                                'Marker',ad.data{active}.display.MFon.line.marker.type,...
                                'LineWidth',ad.data{active}.display.MFon.line.width...
                                );
                            plot(...
                                xvalues,...
                                yMF-yvalues,...
                                'Color',ad.data{active}.display.DeltaMF.line.color,...
                                'LineStyle',ad.data{active}.display.DeltaMF.line.style,...
                                'Marker',ad.data{active}.display.DeltaMF.line.marker.type,...
                                'LineWidth',ad.data{active}.display.DeltaMF.line.width...
                                );
                        case 'MFon'
                            plot(...
                                xvalues,...
                                yMF,...
                                'Color',ad.data{active}.display.MFon.line.color,...
                                'LineStyle',ad.data{active}.display.MFon.line.style,...
                                'Marker',ad.data{active}.display.MFon.line.marker.type,...
                                'LineWidth',ad.data{active}.display.MFon.line.width...
                                );
                        case 'DeltaMF'
                            plot(...
                                xvalues,...
                                yMF-yvalues,...
                                'Color',ad.data{active}.display.DeltaMF.line.color,...
                                'LineStyle',ad.data{active}.display.DeltaMF.line.style,...
                                'Marker',ad.data{active}.display.DeltaMF.line.marker.type,...
                                'LineWidth',ad.data{active}.display.DeltaMF.line.width...
                                );
                        case 'sum(MFoff,MFon)'
                            plot(...
                                xvalues,...
                                (yMF+yvalues)./2,...
                                'Color',ad.data{active}.line.color,...
                                'LineStyle',ad.data{active}.line.style,...
                                'Marker',ad.data{active}.line.marker.type,...
                                'LineWidth',ad.data{active}.line.width...
                                );
                    end
                end
                if ad.data{active}.avg.area.delta && strcmpi(ad.avg.dimension,'y')
                    % Plot average spectrum
                    ymean = mean(data(ad.data{active}.avg.area.start:...
                        ad.data{active}.avg.area.stop,:),1);
                    ystd = std(data(ad.data{active}.avg.area.start:...
                        ad.data{active}.avg.area.stop,:),0,1);
                    if isfield(ad.data{active},'dataMFon')
                        yMF = mean(dataMFon(ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop,:),1);
                        yMFstd = std(dataMFon(ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop,:),0,1);
                        yDeltaMF = mean(...
                            (dataMFon(ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop,:)-...
                            data(ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop,:)),1);
                        yDeltaMFstd = std(...
                            (dataMFon(ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop,:)-...
                            data(ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop,:)),0,1);
                        ySumMF = mean(...
                            (dataMFon(ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop,:)+...
                            data(ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop,:))./2,1);
                        ySumMFstd = std(...
                            (dataMFon(ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop,:)+...
                            data(ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop,:))./2,0,1);
                    else
                        yMF = yvalues;
                        yMFstd = ystd;
                        yDeltaMF = zeros(1,length(y));
                        yDeltaMFstd = zeros(1,length(y));
                        ySumMF = yvalues;
                        ySumMFstd = ystd;
                    end
                    switch ad.control.axis.MFEdisplay
                        case 'MFoff'
                            plot(gh.axis,...
                                xvalues,...
                                ymean,...
                                'Color',ad.avg.MFoff.line.color,...
                                'LineStyle',ad.avg.MFoff.line.style,...
                                'Marker',ad.avg.MFoff.line.marker.type,...
                                'LineWidth',ad.avg.MFoff.line.width);
                        case 'MFoff+MFon'
                            plot(gh.axis,...
                                xvalues,...
                                ymean,...
                                'Color',ad.avg.MFoff.line.color,...
                                'LineStyle',ad.avg.MFoff.line.style,...
                                'Marker',ad.avg.MFoff.line.marker.type,...
                                'LineWidth',ad.avg.MFoff.line.width);
                            plot(gh.axis,...
                                xvalues,...
                                yMF,...
                                'Color',ad.avg.MFon.line.color,...
                                'LineStyle',ad.avg.MFon.line.style,...
                                'Marker',ad.avg.MFon.line.marker.type,...
                                'LineWidth',ad.avg.MFon.line.width);
                        case 'MFoff+MFon+DeltaMF'
                            plot(gh.axis,...
                                xvalues,...
                                ymean,...
                                'Color',ad.avg.MFoff.line.color,...
                                'LineStyle',ad.avg.MFoff.line.style,...
                                'Marker',ad.avg.MFoff.line.marker.type,...
                                'LineWidth',ad.avg.MFoff.line.width);
                            plot(gh.axis,...
                                xvalues,...
                                yMF,...
                                'Color',ad.avg.MFon.line.color,...
                                'LineStyle',ad.avg.MFon.line.style,...
                                'Marker',ad.avg.MFon.line.marker.type,...
                                'LineWidth',ad.avg.MFon.line.width);
                            plot(gh.axis,...
                                xvalues,...
                                yDeltaMF,...
                                'Color',ad.avg.DeltaMF.line.color,...
                                'LineStyle',ad.avg.DeltaMF.line.style,...
                                'Marker',ad.avg.DeltaMF.line.marker.type,...
                                'LineWidth',ad.avg.DeltaMF.line.width);
                        case 'MFon'
                            plot(gh.axis,...
                                xvalues,...
                                yMF,...
                                'Color',ad.avg.MFon.line.color,...
                                'LineStyle',ad.avg.MFon.line.style,...
                                'Marker',ad.avg.MFon.line.marker.type,...
                                'LineWidth',ad.avg.MFon.line.width);
                        case 'DeltaMF'
                            plot(gh.axis,...
                                xvalues,...
                                yDeltaMF,...
                                'Color',ad.avg.DeltaMF.line.color,...
                                'LineStyle',ad.avg.DeltaMF.line.style,...
                                'Marker',ad.avg.DeltaMF.line.marker.type,...
                                'LineWidth',ad.avg.DeltaMF.line.width);
                        case 'sum(MFoff,MFon)'
                            plot(gh.axis,...
                                xvalues,...
                                ySumMF,...
                                'Color',ad.avg.MFoff.line.color,...
                                'LineStyle',ad.avg.MFoff.line.style,...
                                'Marker',ad.avg.MFoff.line.marker.type,...
                                'LineWidth',ad.avg.MFoff.line.width);
                    end
                    if ad.avg.display.stdev
                        switch ad.control.axis.MFEdisplay
                            case 'MFoff'
                                errorbar(gh.axis,...
                                    xvalues,...
                                    ymean,...
                                    ystd,...
                                    'LineStyle',ad.avg.MFoff.line.style,...
                                    'Color',ad.avg.MFoff.line.color,...
                                    'Marker',ad.avg.MFoff.line.marker.type,...
                                    'LineWidth',ad.avg.MFoff.line.width);
                            case 'MFoff+MFon'
                                errorbar(gh.axis,...
                                    xvalues,...
                                    ymean,...
                                    ystd,...
                                    'LineStyle',ad.avg.MFoff.line.style,...
                                    'Color',ad.avg.MFoff.line.color,...
                                    'Marker',ad.avg.MFoff.line.marker.type,...
                                    'LineWidth',ad.avg.MFoff.line.width);
                                errorbar(gh.axis,...
                                    xvalues,...
                                    yMF,...
                                    yMFstd,...
                                    'LineStyle',ad.avg.MFon.line.style,...
                                    'Color',ad.avg.MFon.line.color,...
                                    'Marker',ad.avg.MFon.line.marker.type,...
                                    'LineWidth',ad.avg.MFon.line.width);
                            case 'MFoff+MFon+DeltaMF'
                                errorbar(gh.axis,...
                                    xvalues,...
                                    ymean,...
                                    ystd,...
                                    'LineStyle',ad.avg.MFoff.line.style,...
                                    'Color',ad.avg.MFoff.line.color,...
                                    'Marker',ad.avg.MFoff.line.marker.type,...
                                    'LineWidth',ad.avg.MFoff.line.width);
                                errorbar(gh.axis,...
                                    xvalues,...
                                    yMF,...
                                    yMFstd,...
                                    'LineStyle',ad.avg.MFon.line.style,...
                                    'Color',ad.avg.MFon.line.color,...
                                    'Marker',ad.avg.MFon.line.marker.type,...
                                    'LineWidth',ad.avg.MFon.line.width);
                                errorbar(gh.axis,...
                                    xvalues,...
                                    yDeltaMF,...
                                    yDeltaMFstd,...
                                    'LineStyle',ad.avg.DeltaMF.line.style,...
                                    'Color',ad.avg.DeltaMF.line.color,...
                                    'Marker',ad.avg.DeltaMF.line.marker.type,...
                                    'LineWidth',ad.avg.DeltaMF.line.width);
                            case 'MFon'
                                errorbar(gh.axis,...
                                    xvalues,...
                                    yMF,...
                                    yMFstd,...
                                    'LineStyle',ad.avg.MFon.line.style,...
                                    'Color',ad.avg.MFon.line.color,...
                                    'Marker',ad.avg.MFon.line.marker.type,...
                                    'LineWidth',ad.avg.MFon.line.width);
                            case 'DeltaMF'
                                errorbar(gh.axis,...
                                    xvalues,...
                                    yDeltaMF,...
                                    yDeltaMFstd,...
                                    'LineStyle',ad.avg.DeltaMF.line.style,...
                                    'Color',ad.avg.DeltaMF.line.color,...
                                    'Marker',ad.avg.DeltaMF.line.marker.type,...
                                    'LineWidth',ad.avg.DeltaMF.line.width);
                            case 'sum(MFoff,MFon)'
                                errorbar(gh.axis,...
                                    xvalues,...
                                    ySumMF,...
                                    ySumMFstd,...
                                    'Color',ad.avg.MFoff.line.color,...
                                    'LineStyle',ad.avg.MFoff.line.style,...
                                    'Marker',ad.avg.MFoff.line.marker.type,...
                                    'LineWidth',ad.avg.MFoff.line.width);
                        end
                    end
                end
                if isscalar(xvalues)
                    set(gh.axis,'XLim',[xvalues(1)-1 xvalues(1)+1]);
                else
                    set(gh.axis,'XLim',[xvalues(1) xvalues(end)]);
                end
                z = [ min(min(data)) max(max(data)) ];
                ZLim = [z(1)-((z(2)-z(1))/20) z(2)+((z(2)-z(1))/20)];
                set(gh.axis,'YLim',ZLim);
                if ad.control.axis.position
                    % Plot red line with position in time
                    plot(gh.axis,...
                        [xvalues(ad.data{active}.display.position.x) ...
                        xvalues(ad.data{active}.display.position.x)],...
                        ZLim,...
                        'r-');
                end
                hold off;
                if (ad.control.axis.grid.zero)
                    line(...
                        [xvalues(1) xvalues(end)],...
                        [0 0],...
                        'Color',[0.5 0.5 0.5],'LineStyle','--',...
                        'Parent',gh.axis);
                end
                xlabel(gh.axis,sprintf('{\\it %s} / %s',xmeasure,xunit));
                ylabel(gh.axis,sprintf('{\\it %s} / %s',zmeasure,zunit));
                if ad.data{active}.avg.area.delta && strcmpi(ad.avg.dimension,'x')
                    ylim = get(gh.axis,'YLim');
                    patch(...
                        'XData',[...
                        xvalues(ad.data{active}.avg.area.start) ...
                        xvalues(ad.data{active}.avg.area.start)...
                        xvalues(ad.data{active}.avg.area.stop) ...
                        xvalues(ad.data{active}.avg.area.stop)],...
                        'YData',[ylim(1) ylim(end) ylim(end) ylim(1)],...
                        'ZData',[0 0 0 0],...
                        'EdgeColor',ad.avg.area.patch.edge,...
                        'FaceColor',ad.avg.area.patch.color,...
                        'FaceAlpha',ad.avg.area.patch.alpha,...
                        'Parent',gh.axis);
                end
            case '1D along y'
                % Enable position slider only if second axis has more than one value
                if (x>1)
                    set(gh.position_slider,...
                        'Min',1,'Max',x,...
                        'Value',...
                        ad.data{active}.display.position.x,...
                        'SliderStep',[1/(x-1) 10/(x-1)],...
                        'Enable','on');
                else
                    set(gh.position_slider,...
                        'Enable','off'...
                        );
                end
                % Plot B0 spectrum at given position in time
                xvalues = data(:,ad.data{active}.display.position.x);
                if isfield(ad.data{active},'dataMFon')
                    xMF = dataMFon(:,ad.data{active}.display.position.x);
                else
                    xMF = data(:,ad.data{active}.display.position.x);
                end
                hold on;
                if ad.avg.display.original || ~ad.data{active}.avg.area.delta
                    switch ad.control.axis.MFEdisplay
                        case 'MFoff'
                            plot(...
                                yvalues,...
                                xvalues,...
                                'Color',ad.data{active}.line.color,...
                                'LineStyle',ad.data{active}.line.style,...
                                'Marker',ad.data{active}.line.marker.type,...
                                'LineWidth',ad.data{active}.line.width...
                                );
                        case 'MFoff+MFon'
                            plot(...
                                yvalues,...
                                xvalues,...
                                'Color',ad.data{active}.line.color,...
                                'LineStyle',ad.data{active}.line.style,...
                                'Marker',ad.data{active}.line.marker.type,...
                                'LineWidth',ad.data{active}.line.width...
                                );
                            plot(...
                                yvalues,...
                                xMF,...
                                'Color',ad.data{active}.display.MFon.line.color,...
                                'LineStyle',ad.data{active}.display.MFon.line.style,...
                                'Marker',ad.data{active}.display.MFon.line.marker.type,...
                                'LineWidth',ad.data{active}.display.MFon.line.width...
                                );
                        case 'MFoff+MFon+DeltaMF'
                            plot(...
                                yvalues,...
                                xvalues,...
                                'Color',ad.data{active}.line.color,...
                                'LineStyle',ad.data{active}.line.style,...
                                'Marker',ad.data{active}.line.marker.type,...
                                'LineWidth',ad.data{active}.line.width...
                                );
                            plot(...
                                yvalues,...
                                xMF,...
                                'Color',ad.data{active}.display.MFon.line.color,...
                                'LineStyle',ad.data{active}.display.MFon.line.style,...
                                'Marker',ad.data{active}.display.MFon.line.marker.type,...
                                'LineWidth',ad.data{active}.display.MFon.line.width...
                                );
                            plot(...
                                yvalues,...
                                xMF-xvalues,...
                                'Color',ad.data{active}.display.DeltaMF.line.color,...
                                'LineStyle',ad.data{active}.display.DeltaMF.line.style,...
                                'Marker',ad.data{active}.display.DeltaMF.line.marker.type,...
                                'LineWidth',ad.data{active}.display.DeltaMF.line.width...
                                );
                        case 'MFon'
                            plot(...
                                yvalues,...
                                xMF,...
                                'Color',ad.data{active}.display.MFon.line.color,...
                                'LineStyle',ad.data{active}.display.MFon.line.style,...
                                'Marker',ad.data{active}.display.MFon.line.marker.type,...
                                'LineWidth',ad.data{active}.display.MFon.line.width...
                                );
                        case 'DeltaMF'
                            plot(...
                                yvalues,...
                                xMF-xvalues,...
                                'Color',ad.data{active}.display.DeltaMF.line.color,...
                                'LineStyle',ad.data{active}.display.DeltaMF.line.style,...
                                'Marker',ad.data{active}.display.DeltaMF.line.marker.type,...
                                'LineWidth',ad.data{active}.display.DeltaMF.line.width...
                                );
                        case 'sum(MFoff,MFon)'
                            plot(...
                                yvalues,...
                                (xMF+xvalues)./2,...
                                'Color',ad.data{active}.line.color,...
                                'LineStyle',ad.data{active}.line.style,...
                                'Marker',ad.data{active}.line.marker.type,...
                                'LineWidth',ad.data{active}.line.width...
                                );
                    end
                end
                if ad.data{active}.avg.area.delta && strcmpi(ad.avg.dimension,'x')
                    % Plot average spectrum
                    xmean = mean(data(:,ad.data{active}.avg.area.start:...
                        ad.data{active}.avg.area.stop),2);
                    xstd = std(data(:,ad.data{active}.avg.area.start:...
                        ad.data{active}.avg.area.stop),0,2);
                    if isfield(ad.data{active},'dataMFon')
                        xMF = mean(dataMFon(:,ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop),2);
                        xMFstd = std(dataMFon(:,ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop),0,2);
                        xDeltaMF = mean(...
                            (dataMFon(:,ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop)-...
                            data(:,ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop)),2);
                        xDeltaMFstd = std(...
                            (dataMFon(:,ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop)-...
                            data(:,ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop)),0,2);
                        xSumMF = mean(...
                            (dataMFon(:,ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop)+...
                            data(:,ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop))./2,2);
                        xSumMFstd = std(...
                            (dataMFon(:,ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop)+...
                            data(:,ad.data{active}.avg.area.start:...
                            ad.data{active}.avg.area.stop))./2,0,2);
                    else
                        xMF = xvalues;
                        xMFstd = xstd;
                        xDeltaMF = zeros(1,length(y));
                        xDeltaMFstd = zeros(1,length(y));
                        xSumMF = xvalues;
                        xSumMFstd = xstd;
                    end
                    switch ad.control.axis.MFEdisplay
                        case 'MFoff'
                            plot(gh.axis,...
                                yvalues,...
                                xmean,...
                                'Color',ad.avg.MFoff.line.color,...
                                'LineStyle',ad.avg.MFoff.line.style,...
                                'Marker',ad.avg.MFoff.line.marker.type,...
                                'LineWidth',ad.avg.MFoff.line.width);
                        case 'MFoff+MFon'
                            plot(gh.axis,...
                                yvalues,...
                                xmean,...
                                'Color',ad.avg.MFoff.line.color,...
                                'LineStyle',ad.avg.MFoff.line.style,...
                                'Marker',ad.avg.MFoff.line.marker.type,...
                                'LineWidth',ad.avg.MFoff.line.width);
                            plot(gh.axis,...
                                yvalues,...
                                xMF,...
                                'Color',ad.avg.MFon.line.color,...
                                'LineStyle',ad.avg.MFon.line.style,...
                                'Marker',ad.avg.MFon.line.marker.type,...
                                'LineWidth',ad.avg.MFon.line.width);
                        case 'MFoff+MFon+DeltaMF'
                            plot(gh.axis,...
                                yvalues,...
                                xmean,...
                                'Color',ad.avg.MFoff.line.color,...
                                'LineStyle',ad.avg.MFoff.line.style,...
                                'Marker',ad.avg.MFoff.line.marker.type,...
                                'LineWidth',ad.avg.MFoff.line.width);
                            plot(gh.axis,...
                                yvalues,...
                                xMF,...
                                'Color',ad.avg.MFon.line.color,...
                                'LineStyle',ad.avg.MFon.line.style,...
                                'Marker',ad.avg.MFon.line.marker.type,...
                                'LineWidth',ad.avg.MFon.line.width);
                            plot(gh.axis,...
                                yvalues,...
                                xDeltaMF,...
                                'Color',ad.avg.DeltaMF.line.color,...
                                'LineStyle',ad.avg.DeltaMF.line.style,...
                                'Marker',ad.avg.DeltaMF.line.marker.type,...
                                'LineWidth',ad.avg.DeltaMF.line.width);
                        case 'MFon'
                            plot(gh.axis,...
                                yvalues,...
                                xMF,...
                                'Color',ad.avg.MFon.line.color,...
                                'LineStyle',ad.avg.MFon.line.style,...
                                'Marker',ad.avg.MFon.line.marker.type,...
                                'LineWidth',ad.avg.MFon.line.width);
                        case 'DeltaMF'
                            plot(gh.axis,...
                                yvalues,...
                                xDeltaMF,...
                                'Color',ad.avg.DeltaMF.line.color,...
                                'LineStyle',ad.avg.DeltaMF.line.style,...
                                'Marker',ad.avg.DeltaMF.line.marker.type,...
                                'LineWidth',ad.avg.DeltaMF.line.width);
                        case 'sum(MFoff,MFon)'
                            plot(gh.axis,...
                                yvalues,...
                                xSumMF,...
                                'Color',ad.avg.MFoff.line.color,...
                                'LineStyle',ad.avg.MFoff.line.style,...
                                'Marker',ad.avg.MFoff.line.marker.type,...
                                'LineWidth',ad.avg.MFoff.line.width);
                    end
                    if ad.avg.display.stdev
                        switch ad.control.axis.MFEdisplay
                            case 'MFoff'
                                errorbar(gh.axis,...
                                    yvalues,...
                                    xmean,...
                                    xstd,...
                                    'LineStyle',ad.avg.MFoff.line.style,...
                                    'Color',ad.avg.MFoff.line.color,...
                                    'Marker',ad.avg.MFoff.line.marker.type,...
                                    'LineWidth',ad.avg.MFoff.line.width);
                            case 'MFoff+MFon'
                                errorbar(gh.axis,...
                                    yvalues,...
                                    xmean,...
                                    xstd,...
                                    'LineStyle',ad.avg.MFoff.line.style,...
                                    'Color',ad.avg.MFoff.line.color,...
                                    'Marker',ad.avg.MFoff.line.marker.type,...
                                    'LineWidth',ad.avg.MFoff.line.width);
                                errorbar(gh.axis,...
                                    yvalues,...
                                    xMF,...
                                    xMFstd,...
                                    'LineStyle',ad.avg.MFon.line.style,...
                                    'Color',ad.avg.MFon.line.color,...
                                    'Marker',ad.avg.MFon.line.marker.type,...
                                    'LineWidth',ad.avg.MFon.line.width);
                            case 'MFoff+MFon+DeltaMF'
                                errorbar(gh.axis,...
                                    yvalues,...
                                    xmean,...
                                    xstd,...
                                    'LineStyle',ad.avg.MFoff.line.style,...
                                    'Color',ad.avg.MFoff.line.color,...
                                    'Marker',ad.avg.MFoff.line.marker.type,...
                                    'LineWidth',ad.avg.MFoff.line.width);
                                errorbar(gh.axis,...
                                    yvalues,...
                                    xMF,...
                                    xMFstd,...
                                    'LineStyle',ad.avg.MFon.line.style,...
                                    'Color',ad.avg.MFon.line.color,...
                                    'Marker',ad.avg.MFon.line.marker.type,...
                                    'LineWidth',ad.avg.MFon.line.width);
                                errorbar(gh.axis,...
                                    yvalues,...
                                    xDeltaMF,...
                                    xDeltaMFstd,...
                                    'LineStyle',ad.avg.DeltaMF.line.style,...
                                    'Color',ad.avg.DeltaMF.line.color,...
                                    'Marker',ad.avg.DeltaMF.line.marker.type,...
                                    'LineWidth',ad.avg.DeltaMF.line.width);
                            case 'MFon'
                                errorbar(gh.axis,...
                                    yvalues,...
                                    xMF,...
                                    xMFstd,...
                                    'LineStyle',ad.avg.MFon.line.style,...
                                    'Color',ad.avg.MFon.line.color,...
                                    'Marker',ad.avg.MFon.line.marker.type,...
                                    'LineWidth',ad.avg.MFon.line.width);
                            case 'DeltaMF'
                                errorbar(gh.axis,...
                                    yvalues,...
                                    xDeltaMF,...
                                    xDeltaMFstd,...
                                    'LineStyle',ad.avg.DeltaMF.line.style,...
                                    'Color',ad.avg.DeltaMF.line.color,...
                                    'Marker',ad.avg.DeltaMF.line.marker.type,...
                                    'LineWidth',ad.avg.DeltaMF.line.width);
                            case 'sum(MFoff,MFon)'
                                errorbar(gh.axis,...
                                    yvalues,...
                                    xSumMF,...
                                    xSumMFstd,...
                                    'Color',ad.avg.MFoff.line.color,...
                                    'LineStyle',ad.avg.MFoff.line.style,...
                                    'Marker',ad.avg.MFoff.line.marker.type,...
                                    'LineWidth',ad.avg.MFoff.line.width);
                        end
                    end
                end
                
                if isscalar(yvalues)
                    set(gh.axis,'XLim',[yvalues(1)-1 yvalues(1)+1]);
                else
                    set(gh.axis,'XLim',[yvalues(1) yvalues(end)]);
                end
                z = [ min(min(data)) max(max(data)) ];
                ZLim = [z(1)-((z(2)-z(1))/20) z(2)+((z(2)-z(1))/20)];
                set(gh.axis,'YLim',ZLim);
                if ad.control.axis.position
                    % Plot red line with position in time
                    plot(gh.axis,...
                        [yvalues(ad.data{active}.display.position.y) ...
                        yvalues(ad.data{active}.display.position.y)],...
                        ZLim,...
                        'r-');
                end
                hold off;
                if (ad.control.axis.grid.zero)
                    line(...
                        [yvalues(1) yvalues(end)],...
                        [0 0],...
                        'Color',[0.5 0.5 0.5],'LineStyle','--',...
                        'Parent',gh.axis);
                end
                xlabel(gh.axis,sprintf('{\\it %s} / %s',ymeasure,yunit));
                ylabel(gh.axis,sprintf('{\\it %s} / %s',zmeasure,zunit));
                if ad.data{active}.avg.area.delta && strcmpi(ad.avg.dimension,'y')
                    ylim = get(gh.axis,'YLim');
                    patch(...
                        'XData',[...
                        yvalues(ad.data{active}.avg.area.start)...
                        yvalues(ad.data{active}.avg.area.start)...
                        yvalues(ad.data{active}.avg.area.stop)...
                        yvalues(ad.data{active}.avg.area.stop)],...
                        'YData',[ylim(1) ylim(end) ylim(end) ylim(1)],...
                        'ZData',[0 0 0 0],...
                        'EdgeColor',ad.avg.area.patch.edge,...
                        'FaceColor',ad.avg.area.patch.color,...
                        'FaceAlpha',ad.avg.area.patch.alpha,...
                        'Parent',gh.axis);
                end
        end
        
        xvalues = ad.data{active}.axes.x.values;
        yvalues = ad.data{active}.axes.y.values;
        switch ad.avg.dimension
            case 'x'
                cla(gh.axis2,'reset');
                hold on;
                plot(gh.axis2,...
                    xvalues,...
                    data(...
                    ad.data{active}.display.position.y,:),...
                    'k-');
                if (ad.control.axis.grid.zero)
                    line(...
                        [xvalues(1) xvalues(end)],...
                        [0 0],...
                        'Color',[0.5 0.5 0.5],'LineStyle','--',...
                        'Parent',gh.axis2);
                end
                hold off;
                z = [ min(min(data)) max(max(data)) ];
                ZLim = [z(1)-((z(2)-z(1))/20) z(2)+((z(2)-z(1))/20)];
                set(gh.axis2,'YLim',ZLim);
                if isscalar(xvalues)
                    set(gh.axis2,'XLim',[xvalues(1)-1 xvalues(1)+1]);
                else
                    set(gh.axis2,'XLim',[xvalues(1) xvalues(end)]);
                end
                xlabel(gh.axis2,sprintf('{\\it %s} / %s',xmeasure,xunit));
                ylabel(gh.axis2,sprintf('{\\it %s} / %s',zmeasure,zunit));
                if ad.data{active}.avg.area.delta
                    ylim = get(gh.axis2,'YLim');
                    patch(...
                        'XData',[...
                        xvalues(ad.data{active}.avg.area.start)...
                        xvalues(ad.data{active}.avg.area.start)...
                        xvalues(ad.data{active}.avg.area.stop)...
                        xvalues(ad.data{active}.avg.area.stop)],...
                        'YData',[ylim(1) ylim(end) ylim(end) ylim(1)],...
                        'ZData',[0 0 0 0],...
                        'EdgeColor',ad.avg.area.patch.edge,...
                        'FaceColor',ad.avg.area.patch.color,...
                        'FaceAlpha',ad.avg.area.patch.alpha,...
                        'Parent',gh.axis2);
                end
            case 'y'
                cla(gh.axis2,'reset');
                hold on;
                plot(gh.axis2,...
                    yvalues,...
                    data(...
                    :,ad.data{active}.display.position.x),...
                    'k-');
                if (ad.control.axis.grid.zero)
                    line(...
                        [yvalues(1) yvalues(end)],...
                        [0 0],...
                        'Color',[0.5 0.5 0.5],'LineStyle','--',...
                        'Parent',gh.axis2);
                end
                hold off;
                z = [ min(min(data)) max(max(data)) ];
                ZLim = [z(1)-((z(2)-z(1))/20) z(2)+((z(2)-z(1))/20)];
                set(gh.axis2,'YLim',ZLim);
                if isscalar(yvalues)
                    set(gh.axis2,'XLim',[yvalues(1)-1 yvalues(1)+1]);
                else
                    set(gh.axis2,'XLim',[yvalues(1) yvalues(end)]);
                end
                xlabel(gh.axis2,sprintf('{\\it %s} / %s',ymeasure,yunit));
                ylabel(gh.axis2,sprintf('{\\it %s} / %s',zmeasure,zunit));
                if ad.data{active}.avg.area.delta
                    ylim = get(gh.axis2,'YLim');
                    patch(...
                        'XData',[...
                        yvalues(ad.data{active}.avg.area.start)...
                        yvalues(ad.data{active}.avg.area.start)...
                        yvalues(ad.data{active}.avg.area.stop)...
                        yvalues(ad.data{active}.avg.area.stop)],...
                        'YData',[ylim(1) ylim(end) ylim(end) ylim(1)],...
                        'ZData',[0 0 0 0],...
                        'EdgeColor',ad.avg.area.patch.edge,...
                        'FaceColor',ad.avg.area.patch.color,...
                        'FaceAlpha',ad.avg.area.patch.alpha,...
                        'Parent',gh.axis2);
                end
            otherwise
                disp('TAgui_AVGwindow : updateAxis(): Unknown AVG dimension');
                disp(ad.avg.dimension);
        end
        
        % Set grid for main axis
        set(gh.axis,'XGrid',ad.control.axis.grid.x);
        set(gh.axis,'YGrid',ad.control.axis.grid.y);
        if (isequal(ad.control.axis.grid.x,'on'))
            set(gh.axis,'XMinorGrid',ad.control.axis.grid.minor);
        end
        if (isequal(ad.control.axis.grid.y,'on'))
            set(gh.axis,'YMinorGrid',ad.control.axis.grid.minor);
        end
        % Set grid for auxilliary axis
        set(gh.axis2,'XGrid',ad.control.axis.grid.x);
        set(gh.axis2,'YGrid',ad.control.axis.grid.y);
        if (isequal(ad.control.axis.grid.x,'on'))
            set(gh.axis2,'XMinorGrid',ad.control.axis.grid.minor);
        end
        if (isequal(ad.control.axis.grid.y,'on'))
            set(gh.axis2,'YMinorGrid',ad.control.axis.grid.minor);
        end        

    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

function switchMeasurePointer(~,~)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);

        % Get handles from main window
        gh = guidata(mainWindow);
        
        % Reset pointer callback functions
        set(mainWindow,'WindowButtonMotionFcn','');
        set(mainWindow,'WindowButtonDownFcn','');
        
        % Reset pointer
        set(mainWindow,'Pointer','arrow');
        
        % Switch off togglebuttons
        set(gh.measure_pick_togglebutton,'Value',0);
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function trackPointer(varargin)
    try
        mainWindow = TAguiGetWindowHandle(mfilename);
        
        % Get handles of mainwindow
        gh = guihandles(mainWindow);
        
        % Get appdata of main window
        ad = getappdata(mainWindow);
        
        % Get position of mainAxis (axis coordinates)
        axisPosition = get(hPlotAxes,'Position');
        % Coordinates are "real" x,y pairs relative to the mainWindow
        axisCoordinates = [ ...
            axisPosition(1)-1 ...
            axisPosition(2)-1 ...
            axisPosition(1)+axisPosition(3) ...
            axisPosition(2)+axisPosition(4) ...
            ];
        
        % Get current position of pointer
        pointerPosition = get(mainWindow,'CurrentPoint');
        
        % Create CData for custom pointer
        pointerShapeCData = ones(16)*nan;
        pointerShapeCData([1 8 15],[1:6 10:15]) = 1;
        pointerShapeCData([1:6 10:15],[1 8 15]) = 1;
        
        % As long as we are inside the mainAxis
        if pointerPosition(1) > axisCoordinates(1) && ...
                pointerPosition(1) < axisCoordinates(3) && ...
                pointerPosition(2) > axisCoordinates(2) && ...
                pointerPosition(2) < axisCoordinates(4)
            
            % Get pointer position coordinates relative to axis
            pointerPositionInAxis = ...
                pointerPosition - [axisCoordinates(1) axisCoordinates(2)];
            
            % Set pointer shape
            %set(mainWindow,'Pointer','crosshair');
            set(mainWindow,'Pointer','custom',...
                'PointerShapeCData',pointerShapeCData,...
                'PointerShapeHotSpot',[9 9]);
            
            % Get xdata and ydata of currently active dataset
            if (strcmp(ad.control.axis.displayType,'2D plot'))
                xdata = get(...
                    findobj('Parent',hPlotAxes,'-and','Type','image'),...
                    'xdata');
                ydata = get(...
                    findobj('Parent',hPlotAxes,'-and','Type','image'),...
                    'ydata');
            else
                xdata = get(...
                    findobj('Parent',hPlotAxes,'-and','Type','line'),...
                    'xdata');
                ydata = get(...
                    findobj('Parent',hPlotAxes,'-and','Type','line'),...
                    'ydata');
            end
            
            % If we are in 1D display mode and there are more than one
            % spectrum and/or a zero line displayed
            if ( (strcmp(ad.control.axis.displayType,'1D along x') || ...
                    strcmp(ad.control.axis.displayType,'1D along y')) ) && ...
                    (iscell(xdata) && iscell(ydata))
                if ad.control.axis.grid.zero 
                    xdata = xdata{2};
                    ydata = ydata{2};
                else
                    xdata = xdata{1};
                    ydata = ydata{1};
                end
            end
            
            % Create vectors with indices for xdata and ydata
            % Those are used in case of axis limits <> dataset limits
            xindex = 1 : length(xdata);
            yindex = 1 : length(ydata);
            
            % Handle situation that axis limits and dataset limits don't coincide.
            % Therefore, in case of the dataset being smaller than axis limits, pad
            % it with the first/last value to fill xdata/ydata, respectively.
            % Alternatively, the dataset being larger than axis limits, cut out
            % part from the dataset that's currently displayed.
            % To find out how many points to pad, use interp1 to get ending points
            % of dataset in current axis.
            
            % IMPORTANT: DON'T MESS UP THE CODE BELOW, IF YOU'RE NOT ABSOLUTELY
            % SURE WHAT YOU'RE DOING. I SPEND A WHOLE DAY FIGHTING WITH IT UNTIL IT
            % WORKED SOMEWHAT FINE.
            
            % Get x and y limits of axes
            axisXLim = get(hPlotAxes,'XLim');
            axisYLim = get(hPlotAxes,'YLim');
            % Get x and y limits of currently active dataset
            datasetXLim = [ xdata(1) xdata(end) ];
            datasetYLim = [ ydata(1) ydata(end) ];
            
            % Get dataset limits in axis coordinates
            if (axisXLim(1) > datasetXLim(1))
                % In case dataset is larger than current axis limits
                
                % Need to come up with a good variable name for that, but it looks
                % like we get here the position of the axis limit in the data
                % vector, what would be very useful
                newDatasetXmin=interp1(...
                    linspace(datasetXLim(1),datasetXLim(2),length(xdata)),...
                    linspace(1,length(xdata),length(xdata)),...
                    axisXLim(1),'nearest');
                newXdata = xdata(newDatasetXmin:end);
                newXindex = xindex(newDatasetXmin:end);
            else
                newDatasetXmin=interp1(...
                    linspace(axisXLim(1),axisXLim(2),length(xdata)),...
                    linspace(1,length(xdata),length(xdata)),...
                    xdata(1),'nearest');
                newXdata = [ones(1,newDatasetXmin)*xdata(1) xdata];
                newXindex = [ones(1,newDatasetXmin)*xindex(1) xindex];
            end
            if (axisXLim(2) < datasetXLim(2))
                % In case dataset is larger than current axis limits
                
                % Need to come up with a good variable name for that, but it looks
                % like we get here the position of the axis limit in the data
                % vector, what would be very useful
                newDatasetXmax=interp1(...
                    linspace(datasetXLim(1),datasetXLim(end),length(xdata)),...
                    linspace(1,length(xdata),length(xdata)),...
                    axisXLim(2),'nearest');
                newXdata = newXdata(1:end-(length(xdata)-newDatasetXmax));
                newXindex = newXindex(1:end-(length(xindex)-newDatasetXmax));
            else
                newDatasetXmax=interp1(...
                    linspace(axisXLim(1),axisXLim(2),length(xdata)),...
                    linspace(1,length(xdata),length(xdata)),...
                    xdata(end),'nearest');
                newXdata = [newXdata ones(1,length(xdata)-newDatasetXmax)*xdata(end)];
                newXindex = [newXindex ones(1,length(xindex)-newDatasetXmax)*xindex(end)];
            end
            
            if (strcmp(ad.control.axis.displayType,'2D plot'))
                if (axisYLim(1) > datasetYLim(1))
                    % In case dataset is larger than current axis limits
                    
                    % Need to come up with a good variable name for that, but it looks
                    % like we get here the position of the axis limit in the data
                    % vector, what would be very useful
                    newDatasetYmin=interp1(...
                        linspace(datasetYLim(1),datasetYLim(2),length(ydata)),...
                        linspace(1,length(ydata),length(ydata)),...
                        axisYLim(1),'nearest');
                    newYdata = ydata(newDatasetYmin:end);
                    newYindex = yindex(newDatasetYmin:end);
                else
                    newDatasetYmin=interp1(...
                        linspace(axisYLim(1),axisYLim(2),length(ydata)),...
                        linspace(1,length(ydata),length(ydata)),...
                        ydata(1),'nearest');
                    newYdata = [ones(1,newDatasetYmin)*ydata(1) ydata];
                    newYindex = [ones(1,newDatasetYmin)*yindex(1) yindex];
                end
                if (axisYLim(2) < datasetYLim(2))
                    % In case dataset is larger than current axis limits
                    
                    % Need to come up with a good variable name for that, but it looks
                    % like we get here the position of the axis limit in the data
                    % vector, what would be very useful
                    newDatasetYmax=interp1(...
                        linspace(datasetYLim(1),datasetYLim(end),length(ydata)),...
                        linspace(1,length(ydata),length(ydata)),...
                        axisYLim(2),'nearest');
                    newYdata = newYdata(1:end-(length(ydata)-newDatasetYmax));
                    newYindex = newYindex(1:end-(length(yindex)-newDatasetYmax));
                else
                    newDatasetYmax=interp1(...
                        linspace(axisYLim(1),axisYLim(2),length(ydata)),...
                        linspace(1,length(ydata),length(ydata)),...
                        ydata(end),'nearest');
                    newYdata = [newYdata ones(1,length(ydata)-newDatasetYmax)*ydata(end)];
                    newYindex = [newYindex ones(1,length(yindex)-newDatasetYmax)*yindex(end)];
                end
            end
            
            switch ad.control.axis.displayType
                case '2D plot'
                    % Get index of current point in dataset
                    indx=interp1(...
                        linspace(1,axisPosition(3),length(newXdata)),...
                        newXindex,...
                        pointerPositionInAxis(1),'nearest');
                    indy=interp1(...
                        linspace(1,axisPosition(4),length(newYdata)),...
                        newYindex,...
                        pointerPositionInAxis(2),'nearest');
                case '1D along x'
                    % Get index of current point in dataset
                    indx=interp1(...
                        linspace(1,axisPosition(3),length(newXdata)),...
                        newXindex,...
                        pointerPositionInAxis(1),'nearest');
                    indy=indx;
                case '1D along y'
                    % Get index of current point in dataset
                    indx=interp1(...
                        linspace(1,axisPosition(3),length(newXdata)),...
                        newXindex,...
                        pointerPositionInAxis(1),'nearest');
                    indy=indx;
                otherwise
                    % That shall never happen!
                    disp('trackPointer(): Unrecognised displayType');
                    disp(ad.control.axis.displayType);
                    set(mainWindow,'Pointer','arrow');
                    return;
            end
            
            % Get value (in units) of current point in dataset
            valx = xdata(indx);
            valy = ydata(indy);
            
            % Set display
            % Update display of first point
            set(gh.measure_x_index_edit,'String',num2str(indx));
            set(gh.measure_x_unit_edit,'String',num2str(valx));
            set(gh.measure_y_index_edit,'String',num2str(indy));
            set(gh.measure_y_unit_edit,'String',num2str(valy));
        else
            set(mainWindow,'Pointer','arrow');
        end
        
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

end