function varargout = TAgui_combinewindow(varargin)
% TAGUI_COMBINEWINDOW Combine multiple datasets to a single dataset,
% give user maximum control over that process and prevent too stupid things
% from happening.
%
% Normally, this window is called from within the TAgui window.
%
% IMPORTANT: The actual work is NOT performed by this GUI function, but by
%            TAcombine (and TAscale). This is according to the toolbox
%            philosophy to not mix GUI and routines processing data.
%
% See also TAGUI, TAGUI_COMBINE_SETTINGSWINDOW, TACOMBINE, TASCALE

% (c) 2012, Till Biskup
% 2012-10-21

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Make GUI effectively a singleton
singleton = findobj('Tag','TAgui_combinewindow');
if (singleton)
    figure(singleton);
    varargout{1} = singleton;
    return;
end

% Get list of file formats that are combinable from TAload.ini
% In this INI file, all formats that allow to combine datasets have the
% field 'combineMultiple' set to 'true'
combinableFormats = cell(0);
fileFormats = TAiniFileRead(fullfile(TAinfo('dir'),'IO','TAload.ini'));
formatNames = fieldnames(fileFormats);
for k=1:length(formatNames)
    if isfield(fileFormats.(formatNames{k}),'combineMultiple') && ...
            strcmpi(fileFormats.(formatNames{k}).combineMultiple,'true')
        combinableFormats{end+1} = fileFormats.(formatNames{k}).name; %#ok<AGROW>
    end
end

%  Construct the components
hMainFigure = figure('Tag','TAgui_combinewindow',...
    'Visible','off',...
    'Name','TA GUI : Combine Window',...
    'Units','Pixels',...
    'Position',[30,110,650,600],...
    'Resize','off',...
    'NumberTitle','off', ...
    'KeyPressFcn',@keypress_Callback,...
    'Menu','none','Toolbar','none');

defaultBackground = get(hMainFigure,'Color');
noneditableBackground = [0.92 0.92 0.92];
editableBackground = [1 1 1];
mainPanelWidth = 260;
guiSize = get(hMainFigure,'Position');
guiSize = guiSize([3,4]);


pp1 = uipanel('Tag','combinable_formats_panel',...
    'Parent',hMainFigure,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[20 guiSize(2)-140 guiSize(1)-40 120],...
    'Title','Combinable file formats and file basenames'...
    );

pp2 = uipanel('Tag','combinable_datasets_panel',...
    'Parent',hMainFigure,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[20 215 guiSize(1)-40 guiSize(2)-365],...
    'Title','Combinable datasets'...
    );

pp3 = uipanel('Tag','info_panel',...
    'Parent',hMainFigure,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[20 85 guiSize(1)/2-30 120],...
    'Title','Information about (first) selected dataset'...
    );

pp4 = uipanel('Tag','scaling_panel',...
    'Parent',hMainFigure,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[guiSize(1)/2+10 85 guiSize(1)/2-30 120],...
    'Title','Scaling two datasets'...
    );

pp5 = uipanel('Tag','label_panel',...
    'Parent',hMainFigure,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[20 20 2*mainPanelWidth-130 55],...
    'Title','Label for combined dataset'...
    );

pp1_p1 = uipanel('Tag','filetypes_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-20 90],...
    'Title','Detected file formats'...
    );
uicontrol('Tag','filetypes_listbox',...
    'Style','listbox',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-40 60],...
    'TooltipString','List of combinable file formats',...
    'String','',...
    'Callback',{@listbox_Callback,'filetypes'}...
    );

pp1_p2 = uipanel('Tag','filebasename_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[mainPanelWidth 10 mainPanelWidth-20 90],...
    'Title','File basenames'...
    );
uicontrol('Tag','filebasename_listbox',...
    'Style','listbox',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-40 60],...
    'TooltipString',sprintf('%s\n%s',...
    'List of file basenames of combinable datasets',...
    'for the file format selected in the left listbox'),...
    'String','',...
    'Callback',{@listbox_Callback,'filebasename'}...
    );

uicontrol('Tag','addbasename_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp1, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Add',...
    'TooltipString',sprintf('%s\n%s',...
    'Add all datasets with this file basename',...
    'to the list of datasets to combine'),...
    'pos',[(mainPanelWidth*2)-10 45 guiSize(1)-(mainPanelWidth*2)-40 30],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Add basename'}...
    );
uicontrol('Tag','removebasename_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp1, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Remove',...
    'TooltipString',sprintf('%s\n%s',...
    'Remove all datasets with this file basename',...
    'from the list of datasets to combine'),...
    'pos',[(mainPanelWidth*2)-10 10 guiSize(1)-(mainPanelWidth*2)-40 30],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Remove basename'}...
    );

% ------------------------------------------------------------------------
% UI controls for pp2
pp2_p1 = uipanel('Tag','notcombine_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-20 205],...
    'Title','Datasets not to combine'...
    );
uicontrol('Tag','notcombine_listbox',...
    'Style','listbox',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-40 175],...
    'TooltipString','List of datasets that will not be combined',...
    'String','',...
    'Min',0,'Max',2,...
    'Callback',{@listbox_Callback,'notcombine'}...
    );

uicontrol('Tag','add_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp2, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Add',...
    'TooltipString','Add selected datasets to list of datasets to combine',...
    'pos',[mainPanelWidth 180 guiSize(1)-(mainPanelWidth*2)-40 30],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Add'}...
    );
uicontrol('Tag','remove_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp2, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Remove',...
    'TooltipString','Remove selected datasets from list of datasets to combine',...
    'pos',[mainPanelWidth 150 guiSize(1)-(mainPanelWidth*2)-40 30],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Remove'}...
    );
uicontrol('Tag','addall_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp2, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Add all',...
    'TooltipString','Add all datasets to list of datasets to combine',...
    'pos',[mainPanelWidth 95 guiSize(1)-(mainPanelWidth*2)-40 30],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Add all'}...
    );
uicontrol('Tag','removeall_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp2, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Remove all',...
    'TooltipString','Remove all datasets from list of datasets to combine',...
    'pos',[mainPanelWidth 65 guiSize(1)-(mainPanelWidth*2)-40 30],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Remove all'}...
    );
uicontrol('Tag','sort_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp2, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Sort',...
    'TooltipString',sprintf('%s\n%s',...
    'Sort both lists of datasets according to',...
    'the index of the datasets displayed'),...
    'pos',[mainPanelWidth 10 guiSize(1)-(mainPanelWidth*2)-40 30],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Sort'}...
    );

pp2_p2 = uipanel('Tag','combine_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[guiSize(1)-mainPanelWidth-30 10 mainPanelWidth-20 205],...
    'Title','Datasets to combine'...
    );
uicontrol('Tag','combine_listbox',...
    'Style','listbox',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-40 175],...
    'TooltipString','List of datasets that will be combined',...
    'String','',...
    'Min',0,'Max',2,...
    'Callback',{@listbox_Callback,'combine'}...
    );

% ------------------------------------------------------------------------
% UI controls for pp3
uicontrol('Tag','info_panel_wavelength_text',...
    'Style','text',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 80 20],...
    'String','Wavelength'...
    );
uicontrol('Tag','info_panel_wavelength_startvalue_edit',...
    'Style','edit',...
    'Parent',pp3,...
    'BackgroundColor',editableBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[100 70 60 25],...
    'String','000',...
    'TooltipString','Wavelength start value',...
    'Enable','on',...
    'Callback',{@edit_Callback,'wavelengthStart'}...
    );
uicontrol('Tag','info_panel_wavelength_dash_text',...
    'Style','text',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[160 70 15 20],...
    'String','-'...
    );
uicontrol('Tag','info_panel_wavelength_endvalue_edit',...
    'Style','edit',...
    'Parent',pp3,...
    'BackgroundColor',editableBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[175 70 60 25],...
    'String','000',...
    'TooltipString','Wavelength end value',...
    'Enable','on',...
    'Callback',{@edit_Callback,'wavelengthStart'}...
    );
uicontrol('Tag','info_panel_wavelength_unit_edit',...
    'Style','edit',...
    'Parent',pp3,...
    'BackgroundColor',noneditableBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[240 70 40 25],...
    'String','nm',...
    'TooltipString','Wavelength unit',...
    'Enable','inactive'...
    );
uicontrol('Tag','info_panel_dimension_text',...
    'Style','text',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 80 20],...
    'String','Dimension'...
    );
uicontrol('Tag','info_panel_dimension_x_edit',...
    'Style','edit',...
    'Parent',pp3,...
    'BackgroundColor',noneditableBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[100 40 75 25],...
    'String','25000',...
    'TooltipString','Dimension in x direction',...
    'Enable','inactive'...
    );
uicontrol('Tag','info_panel_dimension_times_text',...
    'Style','text',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[175 40 15 20],...
    'String','x'...
    );
uicontrol('Tag','info_panel_dimension_y_edit',...
    'Style','edit',...
    'Parent',pp3,...
    'BackgroundColor',noneditableBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[190 40 45 25],...
    'String','1',...
    'TooltipString','Dimension in y direction',...
    'Enable','inactive'...
    );
uicontrol('Tag','info_panel_dimension_unit_edit',...
    'Style','edit',...
    'Parent',pp3,...
    'BackgroundColor',noneditableBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[240 40 40 25],...
    'String','pt',...
    'TooltipString','Dimension in y direction',...
    'Enable','inactive'...
    );
uicontrol('Tag','info_panel_length_text',...
    'Style','text',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 80 20],...
    'String','Length'...
    );
uicontrol('Tag','info_panel_length_value_edit',...
    'Style','edit',...
    'Parent',pp3,...
    'BackgroundColor',noneditableBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[100 10 135 25],...
    'String','000',...
    'TooltipString','Length value',...
    'Enable','inactive'...
    );
uicontrol('Tag','info_panel_length_unit_edit',...
    'Style','edit',...
    'Parent',pp3,...
    'BackgroundColor',noneditableBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[240 10 40 25],...
    'String','us',...
    'TooltipString','Length unit',...
    'Enable','inactive'...
    );

% ------------------------------------------------------------------------
% UI controls for pp4
uicontrol('Tag','scale_panel_method_text',...
    'Style','text',...
    'Parent',pp4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 70 20],...
    'String','Method'...
    );
uicontrol('Tag','scale_panel_method_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[90 73 100 20],...
    'String','time avg|min(diff)',...
    'Value',1, ...
    'Callback',{@popupmenu_Callback,'scalingmethod'} ...
    );
uicontrol('Tag','scale_panel_method_settings_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp4, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Settings',...
    'TooltipString',sprintf('%s\n%s',...
    'Set the parameters for the given method',...
    'for determining the scaling factor.'),...
    'pos',[200 70 80 25],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'methodSettings'}...
    );
uicontrol('Tag','scale_panel_master_text',...
    'Style','text',...
    'Parent',pp4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 70 20],...
    'String','Master'...
    );
uicontrol('Tag','scale_panel_master_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[90 43 185 20],...
    'String','dataset 1|dataset 2',...
    'Value',1, ...
    'Callback',{@popupmenu_Callback,'scalingmaster'} ...
    );
uicontrol('Tag','scale_panel_factor_text',...
    'Style','text',...
    'Parent',pp4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 70 20],...
    'String','Factor'...
    );
uicontrol('Tag','scale_panel_factor_edit',...
    'Style','edit',...
    'Parent',pp4,...
    'BackgroundColor',editableBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[90 10 100 25],...
    'String','1.000000',...
    'TooltipString','Scaling factor',...
    'Enable','on'...
    );
uicontrol('Tag','scale_panel_method_calculate_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp4, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Calculate',...
    'TooltipString',sprintf('%s\n%s',...
    'Calculate the scaling factor with the',...
    'selected method and parameters.'),...
    'pos',[200 10 80 25],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Calculate'}...
    );

% ------------------------------------------------------------------------
% UI controls for pp5
uicontrol('Tag','label_edit',...
    'Style','edit',...
    'Parent',pp5,...
    'BackgroundColor',editableBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 10 2*mainPanelWidth-150 25],...
    'String','label',...
    'TooltipString','Label for dataset created by combining the selected datasets',...
    'Enable','on',...
    'Callback',{@edit_Callback,'label'}...
    );


% ------------------------------------------------------------------------
% UI controls for main window
uicontrol('Tag','help_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'ForegroundColor',[0 0 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'String','?',...
    'TooltipString','Display help for how to operate the Combine GUI',...
    'pos',[2*mainPanelWidth-100 32 25 25],...
    'Enable','on',...
    'Callback',@TAgui_combine_helpwindow...
    );

uicontrol('Tag','combine_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Combine',...
    'TooltipString','Combine selected datasets to new dataset',...
    'pos',[guiSize(1)-((mainPanelWidth)/3*2)-25 20 guiSize(1)-(mainPanelWidth*2)-40 50],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Combine'}...
    );
uicontrol('Tag','close_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Close',...
    'TooltipString','Close Combine GUI',...
    'pos',[guiSize(1)-((mainPanelWidth)/3)-20 20 (mainPanelWidth)/3+5 50],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Close'}...
    );

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Initialization tasks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Store handles in guidata
guidata(hMainFigure,guihandles);

% Create appdata structure
ad = TAguiDataStructure('guiappdatastructure');

% Combine - struct
ad.combine = struct();
ad.combine.spectra.notcombine = [];
ad.combine.spectra.combine = [];
ad.combine.label = '';

% TODO: This has to go to the correct config file.
%       Therefore, config files should be able to cope with field names
%       containing dots...
ad.configuration.scaling = struct(...
    'avg',struct(...
        'index',[0.15 1],...
        'patch',struct(...
            'edge','none',...
            'color',[0.5 0.5 1],...
            'alpha',0.4 ...
            )...
        ),...
    'smoothing',struct(...
        'method','boxcar',...
        'index',1 ...
        )...
    );

% Scale - struct
ad.scale = struct(...
    'method','time avg',...
    'master',1,...
    'factor',1 ...
    );

setappdata(hMainFigure,'data',ad.data);
setappdata(hMainFigure,'origdata',ad.origdata);
setappdata(hMainFigure,'configuration',ad.configuration);
setappdata(hMainFigure,'control',ad.control);
setappdata(hMainFigure,'combine',ad.combine);
setappdata(hMainFigure,'scale',ad.scale);

% Load data from Main GUI
mainGuiWindow = guiGetWindowHandle();
if (mainGuiWindow)
    admain = getappdata(mainGuiWindow);
    % Check for availability of necessary fields in appdata
    if (isfield(admain,'data') ~= 0)
        ad.data = admain.data;
        setappdata(hMainFigure,'data',ad.data);
        ad.origdata = admain.data;
        setappdata(hMainFigure,'origdata',ad.origdata);
    end
    ad = getappdata(hMainFigure);
end

% If there are no combinable datasets, close GUI and return
if ~checkForCombinableDatasets
    TAmsg('Combine GUI window not opened: missing combinable datasets',...
        'warning');
    delete(hMainFigure);
    return;
end

% Make the GUI visible.
set(hMainFigure,'Visible','on');
TAmsg('Combine GUI window opened','info');

if (nargout == 1)
    varargout{1} = hMainFigure;
end

updateFileformats()
updateBasenames();
updateSpectra();
updateInfo();
updateScale();
updateLabel();

% Add keypress function to every element that can have one...
handles = findall(...
    allchild(hMainFigure),'style','pushbutton',...
    '-or','style','togglebutton',...
    '-or','style','edit',...
    '-or','style','listbox',...
    '-or','style','popupmenu');
for m=1:length(handles)
    set(handles(m),'KeyPressFcn',@keypress_Callback);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function listbox_Callback(~,~,field)
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from combine GUI
        ad = getappdata(mainWindow);

        switch field
            case 'filetypes'
                updateFileformats();
                updateBasenames();
                updateSpectra();
                updateInfo();
            case 'filebasename'
                updateInfo();
            case 'notcombine'
                updateInfo();
            case 'combine'
            otherwise
                disp('TAgui_combinewindow: listbox_Callback(): Unknown field');
                disp(field);
                return;
        end
        updateSpectra();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function edit_Callback(source,~,field)
    try
        if isempty(field)
            return;
        end
        
        % Get appdata of main window
        mainWindow = guiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        value = get(source,'String');
        
        switch field
            case 'wavelengthStart'
                if isnan(str2double(get(source,'String'))) || ....
                        isempty(get(gh.notcombine_listbox,'String'))
                    updateInfo();
                    return;
                end
                % Get number of first selected dataset
                selectedSpectra = ad.combine.spectra.notcombine(...
                    get(gh.notcombine_listbox,'Value'));
                % Set first value of y axis
                ad.data{selectedSpectra(1)}.axes.y.values(1) = ...
                    str2double(get(source,'String'));
                % Set appdata and update info panel
                setappdata(mainWindow,'data',ad.data);
                updateInfo();
            case 'wavelengthEnd'
                if isnan(str2double(get(source,'String'))) || ....
                        isempty(get(gh.notcombine_listbox,'String'))
                    updateInfo();
                    return;
                end
                % Get number of first selected dataset
                selectedSpectra = ad.combine.spectra.notcombine(...
                    get(gh.notcombine_listbox,'Value'));
                % Set first value of y axis
                ad.data{selectedSpectra(1)}.axes.y.values(end) = ...
                    str2double(get(source,'String'));
                % Set appdata and update info panel
                setappdata(hMainFigure,'data',ad.data);
                updateInfo();
            case 'label'
                ad.combine.label = value;
                setappdata(mainWindow,'combine',ad.combine);
                updateLabel();
            otherwise
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function pushbutton_Callback(~,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = guiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);

        switch action
            case 'Add basename'
                baseNames = get(gh.filebasename_listbox,'String');
                baseName = baseNames{get(gh.filebasename_listbox,'Value')};
                [~,fileBaseNames,~] = cellfun(@(x) fileparts(x.file.name),...
                    ad.data,'UniformOutput',false);
                toadd = find(strcmp(baseName,fileBaseNames));
                for l=1:length(toadd)
                    if any(ad.combine.spectra.notcombine==toadd(l))
                        ad.combine.spectra.notcombine(...
                            ad.combine.spectra.notcombine==toadd(l)) = [];
                    end
                    if ~any(ad.combine.spectra.combine==toadd(l))
                        ad.combine.spectra.combine(end+1) = toadd(l);
                    end
                end
                setappdata(mainWindow,'combine',ad.combine);
                updateSpectra();
                updateInfo();
                updateScale();
                updateLabel();
            case 'Remove basename'
                baseNames = get(gh.filebasename_listbox,'String');
                baseName = baseNames{get(gh.filebasename_listbox,'Value')};
                [~,fileBaseNames,~] = cellfun(@(x) fileparts(x.file.name),...
                    ad.data,'UniformOutput',false);
                toremove = find(strcmp(baseName,fileBaseNames));
                for l=1:length(toremove)
                    if any(ad.combine.spectra.combine==toremove(l))
                        ad.combine.spectra.combine(...
                            ad.combine.spectra.combine==toremove(l)) = [];
                    end
                    if ~any(ad.combine.spectra.notcombine==toremove(l))
                        ad.combine.spectra.notcombine(end+1) = toremove(l);
                    end
                end
                setappdata(mainWindow,'combine',ad.combine);
                updateSpectra();
                updateInfo();
                updateScale();
                updateLabel();
            case 'Add'
                if isempty(get(gh.notcombine_listbox,'String'))
                    return;
                end
                toadd = ad.combine.spectra.notcombine(...
                    get(gh.notcombine_listbox,'Value'));
                for l=1:length(toadd)
                    if any(ad.combine.spectra.notcombine==toadd(l))
                        ad.combine.spectra.notcombine(...
                            ad.combine.spectra.notcombine==toadd(l)) = [];
                    end
                    if ~any(ad.combine.spectra.combine==toadd(l))
                        ad.combine.spectra.combine(end+1) = toadd(l);
                    end
                end
                setappdata(mainWindow,'combine',ad.combine);
                updateSpectra();
                updateInfo();
                updateScale();
                updateLabel();
            case 'Remove'
                if isempty(get(gh.combine_listbox,'String'))
                    return;
                end
                toremove = ad.combine.spectra.combine(...
                    get(gh.combine_listbox,'Value'));
                for l=1:length(toremove)
                    if any(ad.combine.spectra.combine==toremove(l))
                        ad.combine.spectra.combine(...
                            ad.combine.spectra.combine==toremove(l)) = [];
                    end
                    if ~any(ad.combine.spectra.notcombine==toremove(l))
                        ad.combine.spectra.notcombine(end+1) = toremove(l);
                    end
                end
                setappdata(mainWindow,'combine',ad.combine);
                updateSpectra();
                updateInfo();
                updateScale();
                updateLabel();
            case 'Add all'
                ad.combine.spectra.combine = [...
                    ad.combine.spectra.combine ...
                    ad.combine.spectra.notcombine];
                ad.combine.spectra.notcombine = [];
                setappdata(mainWindow,'combine',ad.combine);
                updateSpectra();
                updateInfo();
                updateScale();
                updateLabel();
            case 'Remove all'
                ad.combine.spectra.notcombine = [...
                    ad.combine.spectra.notcombine ...
                    ad.combine.spectra.combine];
                ad.combine.spectra.combine = [];
                setappdata(mainWindow,'combine',ad.combine);
                updateSpectra();
                updateInfo();
                updateScale();
                updateLabel();
            case 'Sort'
                ad.combine.spectra.notcombine = ...
                    sort(ad.combine.spectra.notcombine);
                ad.combine.spectra.combine = ...
                    sort(ad.combine.spectra.combine);
                setappdata(mainWindow,'combine',ad.combine);
                updateSpectra();
                updateInfo();
            case 'methodSettings'
                [combinable,overlappingWavelength] = TAscale('check',...
                    ad.data(ad.combine.spectra.combine(1:2)));
                if combinable
                    parameters = struct(...
                        'method',ad.scale.method,...
                        'master',ad.scale.master, ...
                        'overlappingWavelength',overlappingWavelength ...
                        );
                    ad.scale = TAgui_combine_settingswindow(...
                        ad.data(ad.combine.spectra.combine(1:2)),...
                        parameters,ad.configuration.scaling);
                    setappdata(mainWindow,'scale',ad.scale);
                    
                    % Update scale panel
                    updateScale();
                end
            case 'Calculate'
                [combinable,overlappingWavelength] = TAscale('check',...
                    ad.data(ad.combine.spectra.combine(1:2)));
                if combinable
                    parameters = struct(...
                        'method',ad.scale.method,...
                        'master',ad.scale.master, ...
                        'overlappingWavelength',overlappingWavelength,...
                        'parameters',struct(...
                            'avg',struct(...
                                'index',ad.configuration.scaling.avg.index...
                                ),...
                            'smoothing',ad.configuration.scaling.smoothing ...
                            )...
                        );
                    ad.scale = TAscale('factor',...
                        ad.data(ad.combine.spectra.combine(1:2)),...
                        parameters);
                    setappdata(mainWindow,'scale',ad.scale);
                    
                    % Update scale panel
                    updateScale();
                end                
            case 'Combine'
                if isempty(ad.combine.spectra.combine)
                    return;
                end
                % And here has to go the real stuff
                % Scale if scaling factor unequal 1
                [combinable] = TAscale('check',...
                    ad.data(ad.combine.spectra.combine(1:2)));
                if ad.scale.factor ~= 1 && combinable
                    [datasets,~,scaleHistory] = TAscale('scale',...
                        ad.data(ad.combine.spectra.combine(1:2)),...
                        ad.scale);
                    ad.data(ad.combine.spectra.combine(1:2)) = datasets;
                end
                
                [combinedDataset,status] = TAcombine(...
                    ad.data(ad.combine.spectra.combine),...
                    'Label',ad.combine.label);
                if isempty(combinedDataset)
                    msgbox(status,'An error occurred','Error','modal');
                    return;
                end
                
                % Add scale history if available
                if exist('scaleHistory','var')
                    % Use trick to get scale history entry before combine
                    % history entry, but be careful only to do that if the
                    % last entry is actuall a combine entry (as it should)
                    if isfield(combinedDataset,'history') || ...
                            ~isempty(combinedDataset.history) || ...
                            strmpi(combinedDataset.history{end}.method,...
                            'TAcombine')
                        combinedDataset.history{end+1} = ...
                            combinedDataset.history{end};
                        combinedDataset.history{end-1} = scaleHistory;
                    else
                        combinedDataset.history{end+1} = scaleHistory;
                    end
                end

                % Append dataset to main GUI
                status = appendDatasetToMainGUI(...
                    combinedDataset,'modified',true);
                if status
                    disp('Hmm... some problems with appending combined dataset to main GUI.');
                end
                status = removeDatasetFromMainGUI(...
                    ad.combine.spectra.combine,'Force',true);
                if status
                    disp('Hmm... some problems with removing dataset(s) from main GUI.');
                end
                % After successful update of main GUI, refresh GUI data
                mainGuiWindow = guiGetWindowHandle();
                adMain = getappdata(mainGuiWindow);
                ad.data = adMain.data;
                setappdata(hMainFigure,'data',ad.data);
                ad.origdata = adMain.data;
                setappdata(hMainFigure,'origdata',ad.origdata);
                updateFileformats()
                updateBasenames();
                updateSpectra();
                updateInfo();
                updateLabel();
                % Bring combine GUI to fromt
                TAgui_combinewindow();
            case 'Close'
                TAmsg('Combine GUI window closed.','info');

                % Look for all subwindows and delete them if necessary
                delete(findobj('-regexp','Tag','TAgui_combine_*'));
                delete(guiGetWindowHandle(mfilename));
            otherwise
                disp(['TAgui_combinewindow: pushbutton_Callback(): '...
                    'Unknown action "' action '"']);
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end


function popupmenu_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = guiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        value = get(source,'String');
        
        switch lower(action)
            case 'scalingmethod'
                ad.scale.method = value;
                setappdata(mainWindow,'scale',ad.scale);
            case 'scalingmaster'
                ad.scale.master = get(source,'Value');
                setappdata(mainWindow,'scale',ad.scale);
            otherwise
                disp(['TAgui_combinewindow() : popupmenu_Callback() : '...
                    'Unknown action "' action '"']);
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function keypress_Callback(src,evt)
    try
        if isempty(evt.Character) && isempty(evt.Key)
            % In case "Character" is the empty string, i.e. only modifier key
            % was pressed...
            return;
        end
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from combine GUI
        ad = getappdata(mainWindow);

        if ~isempty(evt.Modifier)
            if (strcmpi(evt.Modifier{1},'command')) || ...
                    (strcmpi(evt.Modifier{1},'control'))
                switch evt.Key
                    case 'w'
                        pushbutton_Callback(src,evt,'Close')
                        return;
                end
            end
        end
        switch evt.Key
            case 'f1'
                TAgui_combine_helpwindow();
                return;
            otherwise
%                 disp(evt);
%                 fprintf('       Caller: %i\n\n',src);
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function status = checkForCombinableDatasets()
    try
        status = false;
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata of combine GUI
        ad = getappdata(mainWindow);
        
        % Get file formats
        formats = cellfun(@(x) x.file.format,ad.data,'UniformOutput',false);
        % Get unique formats
        uniqueFormats = unique(formats);

        % If one of the formats is combinable, set output to true
        for l=1:length(uniqueFormats)
            if max(strcmpi(uniqueFormats{l},combinableFormats)) ...
                    && length(find(strcmpi(uniqueFormats{l},formats)))>1
                status = true;
            end
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addcause(exception2, exception);
            disp(msgstr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % if even displaying the bug report window fails...
            exception = addcause(exception3, exception);
            throw(exception);
        end
    end
end

function updateFileformats()
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata of combine GUI
        ad = getappdata(mainWindow);
        
        % Get handles of combine GUI
        gh = guihandles(mainWindow);
        
        % Get file formats
        formats = cellfun(@(x) x.file.format,ad.data,'UniformOutput',false);
        % Get unique formats
        uniqueFormats = unique(formats);
        
        % Compile list of combinable file formats from datasets loaded in
        % the main GUI
        displayFormats = cell(0);
        for l=1:length(uniqueFormats)
            if max(strcmp(uniqueFormats{l},combinableFormats)) ...
                    && length(find(strcmpi(uniqueFormats{l},formats)))>1
                displayFormats{end+1} = uniqueFormats{l}; %#ok<AGROW>
            end
        end
        % Display combinable file formats in listbox
        set(gh.filetypes_listbox,'String',displayFormats);
        
        ad.combine.spectra.notcombine = [];
        ad.combine.spectra.combine = [];
        setappdata(mainWindow,'combine',ad.combine);
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addcause(exception2, exception);
            disp(msgstr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % if even displaying the bug report window fails...
            exception = addcause(exception3, exception);
            throw(exception);
        end
    end
end

function updateBasenames()
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata of combine GUI
        ad = getappdata(mainWindow);
        
        % Get handles of combine GUI
        gh = guihandles(mainWindow);
        
        % Get selected format from filetypes listbox
        selectedFormats = get(gh.filetypes_listbox,'String');
        if isempty(selectedFormats)
            set(gh.filebasename_listbox,'String','');
            set(gh.filebasename_listbox,'Value',1);
            return;
        end
        selectedFormat = selectedFormats{get(gh.filetypes_listbox,'Value')};
        
        % Get file formats
        formats = cellfun(@(x) x.file.format,ad.data,'UniformOutput',false);
        % Get unique formats
        %uniqueFormats = unique(formats);
        
        ad.combine.spectra.notcombine = find(strcmp(selectedFormat,formats));
        
        % Get datasets in selected format
        [~,filebasenames,~] = cellfun(@(x) fileparts(x.file.name),...
            ad.data(ad.combine.spectra.notcombine),...
            'UniformOutput',false);
        uniqueFilebasenames = unique(filebasenames);

        % Display unique file basenames for selected file format
        set(gh.filebasename_listbox,'String',uniqueFilebasenames);
        if (get(gh.filebasename_listbox,'Value')>length(uniqueFilebasenames))
            if isempty(uniqueFilebasenames)
                set(gh.filebasename_listbox,'Value',1);
            else
                set(gh.filebasename_listbox,'Value',length(uniqueFilebasenames));
            end
        end

        setappdata(mainWindow,'combine',ad.combine);
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addcause(exception2, exception);
            disp(msgstr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % if even displaying the bug report window fails...
            exception = addcause(exception3, exception);
            throw(exception);
        end
    end
end

function updateSpectra()
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata of combine GUI
        ad = getappdata(mainWindow);
        
        % Get handles of combine GUI
        gh = guihandles(mainWindow);
        
        % Get not to combine datasets and display in respective listbox
        [~,filebasenames,fileexts] = cellfun(@(x) fileparts(x.file.name),...
            ad.data(ad.combine.spectra.notcombine),...
            'UniformOutput',false);
        fileNames = cell(0);
        for l=1:length(filebasenames)
            fileNames{l} = [filebasenames{l} fileexts{l}];
        end
        set(gh.notcombine_listbox,'String',fileNames);
        % Cope with multiple selects
        selected = get(gh.notcombine_listbox,'Value');
        selected(selected>max(ad.combine.spectra.notcombine)) = [];
        set(gh.notcombine_listbox,'Value',selected);        
        if length(selected)>length(fileNames)
            set(gh.notcombine_listbox,'Value',selected(1:length(fileNames)));
        end
        if (get(gh.notcombine_listbox,'Value')>length(fileNames))
            if isempty(fileNames)
                set(gh.notcombine_listbox,'Value',1);
            else
                set(gh.notcombine_listbox,'Value',length(fileNames));
            end
        end
        if isempty(get(gh.notcombine_listbox,'Value'))
            set(gh.notcombine_listbox,'Value',1);
        end
        
        % Get to combine datasets and display in respective listbox
        [~,filebasenames,fileexts] = cellfun(@(x) fileparts(x.file.name),...
            ad.data(ad.combine.spectra.combine),...
            'UniformOutput',false);
        fileNames = cell(0);
        for l=1:length(filebasenames)
            fileNames{l} = [filebasenames{l} fileexts{l}];
        end
        set(gh.combine_listbox,'String',fileNames);        
        % Cope with multiple selects
        selected = get(gh.combine_listbox,'Value');
        if isempty(selected)
            set(gh.combine_listbox,'Value',1);
        end
        if length(selected)>length(fileNames)
            set(gh.combine_listbox,'Value',selected(1:length(fileNames)));
        end
        if (get(gh.combine_listbox,'Value')>length(fileNames))
            if isempty(fileNames)
                set(gh.combine_listbox,'Value',1);
                updateLabel();
            else
                set(gh.combine_listbox,'Value',length(fileNames));
            end
        end
        if isempty(get(gh.combine_listbox,'Value'))
            set(gh.combine_listbox,'Value',1);
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addcause(exception2, exception);
            disp(msgstr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % if even displaying the bug report window fails...
            exception = addcause(exception3, exception);
            throw(exception);
        end
    end
end

function updateInfo()
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata of combine GUI
        ad = getappdata(mainWindow);
        
        % Get handles of combine GUI
        gh = guihandles(mainWindow);
        
        if isempty(get(gh.notcombine_listbox,'String'))
            set(gh.info_panel_wavelength_startvalue_edit,'String','');
            set(gh.info_panel_wavelength_endvalue_edit,'String','');
            set(gh.info_panel_wavelength_unit_edit,'String','nm');
            set(gh.info_panel_dimension_x_edit,'String','0');
            set(gh.info_panel_dimension_y_edit,'String','0');
            set(gh.info_panel_length_value_edit,'String','0');
            set(gh.info_panel_length_unit_edit,'String','s');
            return;
        end
        
        % Get first selected entry
        selectedSpectra = ad.combine.spectra.notcombine(...
            get(gh.notcombine_listbox,'Value'));
        set(gh.info_panel_wavelength_startvalue_edit,'String',...
            num2str(ad.data{selectedSpectra(1)}.axes.y.values(1)));
        set(gh.info_panel_wavelength_endvalue_edit,'String',...
            num2str(ad.data{selectedSpectra(1)}.axes.y.values(end)));
        set(gh.info_panel_wavelength_unit_edit,'String',...
            ad.data{selectedSpectra(1)}.axes.y.unit);
        [y,x] = size(ad.data{selectedSpectra(1)}.data);
        set(gh.info_panel_dimension_x_edit,'String',num2str(x));
        set(gh.info_panel_dimension_y_edit,'String',num2str(y));
        set(gh.info_panel_length_value_edit,'String',...
            num2str(...
            ad.data{selectedSpectra(1)}.parameters.transient.length...
            ));
        set(gh.info_panel_length_unit_edit,'String',...
            ad.data{selectedSpectra(1)}.axes.x.unit);
        
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addcause(exception2, exception);
            disp(msgstr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % if even displaying the bug report window fails...
            exception = addcause(exception3, exception);
            throw(exception);
        end
    end
end

function updateScale()
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata of combine GUI
        ad = getappdata(mainWindow);
        
        % Get handles of combine GUI
        gh = guihandles(mainWindow);
        
        % Get handles of all children of scaling panel
        panelChildren = allchild(gh.scaling_panel);
        
        % Check number of spectra to combine
        % IDEA: Activate panel only if there are exactly two spectra
        if length(ad.combine.spectra.combine) ~= 2
            set(panelChildren,'Enable','off');
            return;
        end
        
        % Check whether there is an identical wavelength in both spectra
        if ~TAscale('check',ad.data(ad.combine.spectra.combine(1:2)))
            return;
        end
        
        % Set values according to ad.scale
        methods = cellstr(get(gh.scale_panel_method_popupmenu,'String'));
        set(gh.scale_panel_method_popupmenu,'Value',...
            find(strcmpi(ad.scale.method,methods)));
        set(gh.scale_panel_master_popupmenu,'Value',ad.scale.master);
        set(gh.scale_panel_factor_edit,'String',num2str(ad.scale.factor));
        
        set(panelChildren,'Enable','on');
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addcause(exception2, exception);
            disp(msgstr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % if even displaying the bug report window fails...
            exception = addcause(exception3, exception);
            throw(exception);
        end
    end
end

function updateLabel()
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata of combine GUI
        ad = getappdata(mainWindow);
        
        % Get handles of combine GUI
        gh = guihandles(mainWindow);
        
        if isempty(get(gh.combine_listbox,'String'))
            ad.combine.label = '';
        elseif isempty(ad.combine.label)
            ad.combine.label = ad.data{ad.combine.spectra.combine(...
                get(gh.combine_listbox,'Value'))}.label;
        end

        set(gh.label_edit,'String',ad.combine.label);
        setappdata(mainWindow,'combine',ad.combine);

    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addcause(exception2, exception);
            disp(msgstr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % if even displaying the bug report window fails...
            exception = addcause(exception3, exception);
            throw(exception);
        end
    end
end

end