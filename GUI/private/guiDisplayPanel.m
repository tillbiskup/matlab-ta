function handle = guiDisplayPanel(parentHandle,position)
% GUIDISPLAYPANEL Add a panel for display settings to a gui
%       Should only be called from within a GUI defining function.
%
%       Arguments: parent Handle and position vector.
%
%       Returns the handle of the added panel.

% Copyright (c) 2011-13, Till Biskup
% 2013-11-17

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defaultBackground = get(parentHandle,'Color');

handle = uipanel('Tag','display_panel',...
    'parent',parentHandle,...
    'Title','Display settings',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels','Position',position);

% Create the "Display settings" panel
handle_size = get(handle,'Position');

% Create buttongroup to switch between subpanels (pages)
hpbg = uibuttongroup('Tag','display_panel_pages_buttongroup',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'BorderType','none',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 handle_size(4)-60 handle_size(3)-20 30],...
    'SelectionChangeFcn',{@pages_buttongroup_Callback}...
    );
uicontrol('Tag','display_panel_page1_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','1',...
    'TooltipString','Page 1: Axis labels and limits',...
    'pos',[handle_size(3)-20-(((handle_size(3)-20)/7)*7) 0 (handle_size(3)-20)/7 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',1);
uicontrol('Tag','display_panel_page2_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','2',...
    'TooltipString','Page 2: Grid, legend, normalise, highlight current dataset',...
    'pos',[handle_size(3)-20-(((handle_size(3)-20)/7)*6) 0 (handle_size(3)-20)/7 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',0);
uicontrol('Tag','display_panel_page3_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','3',...
    'TooltipString','Page 3: Line settings of currently active dataset',...
    'pos',[handle_size(3)-20-(((handle_size(3)-20)/7)*5) 0 (handle_size(3)-20)/7 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',0);
uicontrol('Tag','display_panel_page4_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','4',...
    'TooltipString','Page 4: Export figure and 1D data',...
    'pos',[handle_size(3)-20-(((handle_size(3)-20)/7)*4) 0 (handle_size(3)-20)/7 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',0);
uicontrol('Tag','display_panel_page5_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','5',...
    'TooltipString','Page 5: 3D display',...
    'pos',[handle_size(3)-20-(((handle_size(3)-20)/7)*3) 0 (handle_size(3)-20)/7 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',0);
uicontrol('Tag','display_panel_page6_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','6',...
    'TooltipString','Page 6: Thresholds, Normalisation, ...',...
    'pos',[handle_size(3)-20-(((handle_size(3)-20)/7)*2) 0 (handle_size(3)-20)/7 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',0);
uicontrol('Tag','display_panel_page7_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','7',...
    'TooltipString','Page 7: MFE',...
    'pos',[handle_size(3)-20-(((handle_size(3)-20)/7)) 0 (handle_size(3)-20)/7 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',0);

% Create subpanels (pages)
handle_pp1 = uipanel('Tag','display_panel_page1_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-20 handle_size(4)-60]...
    );
handle_pp2 = uipanel('Tag','display_panel_page2_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-20 handle_size(4)-60],...
    'Visible','Off'...
    );
handle_pp3 = uipanel('Tag','display_panel_page3_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-20 handle_size(4)-60],...
    'Visible','Off'...
    );
handle_pp4 = uipanel('Tag','display_panel_page4_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-20 handle_size(4)-60],...
    'Visible','Off'...
    );
handle_pp5 = uipanel('Tag','display_panel_page5_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-20 handle_size(4)-60],...
    'Visible','Off'...
    );
handle_pp6 = uipanel('Tag','display_panel_page6_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-20 handle_size(4)-60],...
    'Visible','Off'...
    );
handle_pp7 = uipanel('Tag','display_panel_page7_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-20 handle_size(4)-60],...
    'Visible','Off'...
    );

handle_p1_1 = uipanel('Tag','display_panel_axislabels_panel',...
    'Parent',handle_pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-260 handle_size(3)-20 180],...
    'Title','Axis labels'...
    );
uicontrol('Tag','display_panel_axislabels_measure_text',...
    'Style','text',...
    'Parent',handle_p1_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 130 (handle_size(3)-90)/2 25],...
    'String','Measure'...
    );
uicontrol('Tag','display_panel_axislabels_unit_text',...
    'Style','text',...
    'Parent',handle_p1_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 130 (handle_size(3)-90)/2 25],...
    'String','Unit'...
    );
uicontrol('Tag','display_panel_axislabels_x_text',...
    'Style','text',...
    'Parent',handle_p1_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 110 35 20],...
    'String','x'...
    );
uicontrol('Tag','display_panel_axislabels_x_measure_edit',...
    'Style','edit',...
    'Parent',handle_p1_1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 110 (handle_size(3)-90)/3*2 25],...
    'String','index',...
    'Callback',{@axislabels_edit_Callback,'xmeasure'}...
    );
uicontrol('Tag','display_panel_axislabels_x_unit_edit',...
    'Style','edit',...
    'Parent',handle_p1_1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/3*2 110 (handle_size(3)-90)/3 25],...
    'String','points',...
    'Callback',{@axislabels_edit_Callback,'xunit'}...
    );
uicontrol('Tag','display_panel_axislabels_y_text',...
    'Style','text',...
    'Parent',handle_p1_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 80 35 20],...
    'String','y'...
    );
uicontrol('Tag','display_panel_axislabels_y_measure_edit',...
    'Style','edit',...
    'Parent',handle_p1_1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 80 (handle_size(3)-90)/3*2 25],...
    'String','index',...
    'Callback',{@axislabels_edit_Callback,'ymeasure'}...
    );
uicontrol('Tag','display_panel_axislabels_y_unit_edit',...
    'Style','edit',...
    'Parent',handle_p1_1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/3*2 80 (handle_size(3)-90)/3 25],...
    'String','points',...
    'Callback',{@axislabels_edit_Callback,'yunit'}...
    );
uicontrol('Tag','display_panel_axislabels_z_text',...
    'Style','text',...
    'Parent',handle_p1_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 50 35 20],...
    'String','z'...
    );
uicontrol('Tag','display_panel_axislabels_z_measure_edit',...
    'Style','edit',...
    'Parent',handle_p1_1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 50 (handle_size(3)-90)/3*2 25],...
    'String','index',...
    'Callback',{@axislabels_edit_Callback,'zmeasure'}...
    );
uicontrol('Tag','display_panel_axislabels_z_unit_edit',...
    'Style','edit',...
    'Parent',handle_p1_1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/3*2 50 (handle_size(3)-90)/3 25],...
    'String','points',...
    'Callback',{@axislabels_edit_Callback,'zunit'}...
    );
uicontrol('Tag','display_panel_axislabels_getfromactivedataset_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p1_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 handle_size(3)-90 30],...
    'String','Get from active dataset',...
    'TooltipString','Try to determine axis labels from currently active dataset',...
    'Callback',{@axislabels_getfromactivedataset_pushbutton_Callback}...
    );

handle_p1_2 = uipanel('Tag','display_panel_axislimits_panel',...
    'Parent',handle_pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-440 handle_size(3)-20 170],...
    'Title','Axis limits'...
    );
uicontrol('Tag','display_panel_axislimits_min_text',...
    'Style','text',...
    'Parent',handle_p1_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 120 (handle_size(3)-90)/2 25],...
    'String','min'...
    );
uicontrol('Tag','display_panel_axislimits_max_text',...
    'Style','text',...
    'Parent',handle_p1_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 120 (handle_size(3)-90)/2 25],...
    'String','max'...
    );
uicontrol('Tag','display_panel_axislimits_x_text',...
    'Style','text',...
    'Parent',handle_p1_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 100 35 20],...
    'String','x'...
    );
uicontrol('Tag','display_panel_axislimits_x_min_edit',...
    'Style','edit',...
    'Parent',handle_p1_2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 100 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@axislimits_edit_Callback,'xmin'}...
    );
uicontrol('Tag','display_panel_axislimits_x_max_edit',...
    'Style','edit',...
    'Parent',handle_p1_2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 100 (handle_size(3)-90)/2 25],...
    'String','1',...
    'Callback',{@axislimits_edit_Callback,'xmax'}...
    );
uicontrol('Tag','display_panel_axislimits_y_text',...
    'Style','text',...
    'Parent',handle_p1_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 35 20],...
    'String','y'...
    );
uicontrol('Tag','display_panel_axislimits_y_min_edit',...
    'Style','edit',...
    'Parent',handle_p1_2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 70 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@axislimits_edit_Callback,'ymin'}...
    );
uicontrol('Tag','display_panel_axislimits_y_max_edit',...
    'Style','edit',...
    'Parent',handle_p1_2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 70 (handle_size(3)-90)/2 25],...
    'String','1',...
    'Callback',{@axislimits_edit_Callback,'ymax'}...
    );
uicontrol('Tag','display_panel_axislimits_z_text',...
    'Style','text',...
    'Parent',handle_p1_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 35 20],...
    'String','z'...
    );
uicontrol('Tag','display_panel_axislimits_z_min_edit',...
    'Style','edit',...
    'Parent',handle_p1_2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (handle_size(3)-90)/2 25],...
    'String','-1',...
    'Callback',{@axislimits_edit_Callback,'zmin'}...
    );
uicontrol('Tag','display_panel_axislimits_z_max_edit',...
    'Style','edit',...
    'Parent',handle_p1_2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 40 (handle_size(3)-90)/2 25],...
    'String','1',...
    'Callback',{@axislimits_edit_Callback,'zmax'}...
    );
uicontrol('Tag','display_panel_axislimits_auto_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p1_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 handle_size(3)-90 20],...
    'String',' Determine automatically',...
    'TooltipString',sprintf('%s\n%s','Automatically set axis limits to best fit',...
    '(In 1D display mode: Valid for all currently displayed datasets)'),...
    'Value',1,...
    'Callback',{@axislimits_auto_checkbox_Callback}...
    );

handle_p2_1 = uipanel('Tag','display_panel_grid_panel',...
    'Parent',handle_pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-140 handle_size(3)-20 60],...
    'Title','Grid'...
    );
uicontrol('Tag','display_panel_grid_x_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','X',...
    'TooltipString','Show grid in x',...
    'pos',[handle_size(3)-30-(((handle_size(3)-40)/4)*4) 10 (handle_size(3)-40)/4 30],...
    'parent',handle_p2_1,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_x_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_grid_y_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Y',...
    'TooltipString','Show grid in y',...
    'pos',[handle_size(3)-30-(((handle_size(3)-40)/4)*3) 10 (handle_size(3)-40)/4 30],...
    'parent',handle_p2_1,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_y_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_grid_minor_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','minor',...
    'TooltipString',sprintf('%s\n%s','Show minor grid',...
    '(Works only in combination with X or Y grid)'),...
    'pos',[handle_size(3)-30-(((handle_size(3)-40)/4)*2) 10 (handle_size(3)-40)/4 30],...
    'parent',handle_p2_1,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_minor_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_grid_zero_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','zero',...
    'TooltipString','Show dashed line at zero',...
    'pos',[handle_size(3)-30-(((handle_size(3)-40)/4)) 10 (handle_size(3)-40)/4 30],...
    'parent',handle_p2_1,...
    'HandleVisibility','off',...
    'Value',1,...
    'Callback',{@grid_zero_togglebutton_Callback}...
    );

handle_p2_2 = uipanel('Tag','display_panel_zeroline_panel',...
    'Parent',handle_pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-280 handle_size(3)-20 130],...
    'Title','Zero line settings'...
    );
uicontrol('Tag','display_panel_zerolinecolour_text',...
    'Style','text',...
    'Parent',handle_p2_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 78 60 20],...
    'String','Colour'...
    );
uicontrol('Tag','display_panel_zerolinecoloursample_text',...
    'Style','text',...
    'Parent',handle_p2_2,...
    'BackgroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 77 40 25],...
    'String',''...
    );
uicontrol('Tag','display_panel_zerolinecolour_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p2_2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[130 75 100 30],...
    'String','Palette...',...
    'Callback',{@pushbutton_Callback,'zeroLineColourPalette'}...
    );
uicontrol('Tag','display_panel_zerolinestyle_text',...
    'Style','text',...
    'Parent',handle_p2_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 45 60 20],...
    'String','Style'...
    );
uicontrol('Tag','display_panel_zerolinestyle_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p2_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 45 handle_size(3)-110 20],...
    'String','solid|dashed|dotted|dash-dotted|none',...
    'Callback',{@linestyle_popupmenu_Callback,'zeroLine'}...
    );
uicontrol('Tag','display_panel_zerolinewidth_text',...
    'Style','text',...
    'Parent',handle_p2_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Center',...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','Width'...
    );
uicontrol('Tag','display_panel_zerolinewidth_edit',...
    'Style','edit',...
    'Parent',handle_p2_2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 50 25],...
    'String','1',...
    'Callback',{@edit_Callback,'zeroLineWidth'}...
    );
uicontrol('Tag','display_panel_zerolinewidth_text',...
    'Style','text',...
    'Parent',handle_p2_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[130 10 30 20],...
    'String','pt'...
    );
uicontrol('Tag','display_panel_zerolinedefaults_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p2_2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[160 10 70 25],...
    'String','Default',...
    'TooltipString',sprintf('%s\n%s',...
    'Set marker settings (edge, face, size)','to default values.'),...
    'Callback',{@pushbutton_Callback,'zeroLineDefaults'}...
    );

handle_p2_3 = uipanel('Tag','display_panel_legend_panel',...
    'Parent',handle_pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-350 handle_size(3)-20 60],...
    'Title','Legend display and position'...
    );
uicontrol('Tag','display_panel_legend_auto_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','auto',...
    'TooltipString','Display legend automatically (in best position)',...
    'pos',[10 10 (handle_size(3)-40)/5 30],...
    'parent',handle_p2_3,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_legend_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_legend_nw_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','NW',...
    'TooltipString','Display legend in upper left corner',...
    'pos',[handle_size(3)-30-(((handle_size(3)-50)/5)*4) 10 (handle_size(3)-50)/5 30],...
    'parent',handle_p2_3,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_legend_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_legend_ne_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','NE',...
    'TooltipString','Display legend in upper right corner',...
    'pos',[handle_size(3)-30-(((handle_size(3)-50)/5)*3) 10 (handle_size(3)-50)/5 30],...
    'parent',handle_p2_3,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_legend_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_legend_sw_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','SW',...
    'TooltipString','Display legend in lower left corner',...
    'pos',[handle_size(3)-30-(((handle_size(3)-50)/5)*2) 10 (handle_size(3)-50)/5 30],...
    'parent',handle_p2_3,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_legend_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_legend_se_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','SE',...
    'TooltipString','Display legend in lower right corner',...
    'pos',[handle_size(3)-30-(((handle_size(3)-50)/5)) 10 (handle_size(3)-50)/5 30],...
    'parent',handle_p2_3,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_legend_togglebutton_Callback}...
    );

handle_p2_4 = uipanel('Tag','display_panel_legendstyle_panel',...
    'Parent',handle_pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-455 handle_size(3)-20 95],...
    'Title','Legend style'...
    );
uicontrol('Tag','display_panel_legendbox_text',...
    'Style','text',...
    'Parent',handle_p2_4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Center',...
    'Units','Pixels',...
    'Position',[10 45 60 20],...
    'String','Box'...
    );
uicontrol('Tag','display_panel_legendbox_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p2_4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 45 handle_size(3)-110 25],...
    'String',' Draw box',...
    'TooltipString','Toggle between drawing a box around the legend',...
    'Value',1,...
    'Callback',{@checkbox_Callback,'legendbox'}...
    );
uicontrol('Tag','display_panel_legendfont_text',...
    'Style','text',...
    'Parent',handle_p2_4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Center',...
    'Units','Pixels',...
    'Position',[10 13 60 20],...
    'String','Font'...
    );
uicontrol('Tag','display_panel_zerolinedefaults_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p2_4,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 handle_size(3)-110 30],...
    'String','Font settings...',...
    'TooltipString',sprintf('%s\n%s',...
    'Set marker settings (edge, face, size)','to default values.'),...
    'Callback',{@pushbutton_Callback,'legendFont'}...
    );

handle_p3_1 = uipanel('Tag','display_panel_datasets_panel',...
    'Parent',handle_pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-180 handle_size(3)-20 100],...
    'Title','Select dataset'...
    );
uicontrol('Tag','display_panel_datasets_listbox',...
    'Style','listbox',...
    'Parent',handle_p3_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-40 70],...
    'String','',...
    'Enable','Off',...
    'Callback',{@datasets_listbox_Callback}...
    );

handle_p3_2 = uipanel('Tag','display_panel_line_panel',...
    'Parent',handle_pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-480 handle_size(3)-20 290],...
    'Title','Line settings'...
    );
uicontrol('Tag','display_panel_highlight2_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 245 handle_size(3)-110 20],...
    'String',' Highlight active',...
    'TooltipString','Toggle between highlighting currently active dataset',...
    'Value',1,...
    'Callback',{@checkbox_Callback,'highlight'}...
    );
%    'Callback',{@checkbox_Callback,'highlight'}...
uicontrol('Tag','display_panel_linecolour_text',...
    'Style','text',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 208 60 20],...
    'String','Colour'...
    );
uicontrol('Tag','display_panel_linecoloursample_text',...
    'Style','text',...
    'Parent',handle_p3_2,...
    'BackgroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 207 40 25],...
    'String',''...
    );
uicontrol('Tag','display_panel_linecolour_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[130 205 100 30],...
    'String','Palette...',...
    'Callback',{@pushbutton_Callback,'colourPalette'}...
    );
uicontrol('Tag','display_panel_linewidth_text',...
    'Style','text',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 175 60 20],...
    'String','Width'...
    );
uicontrol('Tag','display_panel_linewidth_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 175 handle_size(3)-110 20],...
    'String','1 px|2 px|3 px|4 px|5 px',...
    'Callback',{@linewidth_popupmenu_Callback}...
    );
uicontrol('Tag','display_panel_linestyle_text',...
    'Style','text',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 145 60 20],...
    'String','Style'...
    );
uicontrol('Tag','display_panel_linestyle_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 145 handle_size(3)-110 20],...
    'String','solid|dashed|dotted|dash-dotted|none',...
    'Callback',{@linestyle_popupmenu_Callback,'line'}...
    );
uicontrol('Tag','display_panel_linemarker_text',...
    'Style','text',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'FontAngle','Oblique',...
    'Units','Pixels',...
    'Position',[10 115 60 20],...
    'String','Marker'...
    );
uicontrol('Tag','display_panel_linemarker_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 115 handle_size(3)-110 20],...
    'String',['none|plus|circle|asterisk|point|cross|square|diamond|'...
    'triangle up|triangle down|triangle right|triangle left|'...
    'pentagram|hexagram'],...
    'Callback',{@linemarker_popupmenu_Callback}...
    );
uicontrol('Tag','display_panel_markeredgecolour_text',...
    'Style','text',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 78 60 20],...
    'String','Edge'...
    );
uicontrol('Tag','display_panel_markeredgecolour_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 80 handle_size(3)-180 20],...
    'String','auto|none|colour',...
    'Value',1,...
    'Callback',{@popupmenu_Callback,'markerEdgeColour'}...
    );
uicontrol('Tag','display_panel_markeredgecoloursample_text',...
    'Style','text',...
    'Parent',handle_p3_2,...
    'BackgroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[165 77 35 25],...
    'String',''...
    );
uicontrol('Tag','display_panel_markeredgecolour_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[205 77 25 25],...
    'String','...',...
    'TooltipString',sprintf('%s\n%s',...
    'Open colour palette for specifying','marker edge colour'),...
    'Callback',{@pushbutton_Callback,'markerEdgeColourPalette'}...
    );
uicontrol('Tag','display_panel_markerfacecolour_text',...
    'Style','text',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 43 60 20],...
    'String','Face'...
    );
uicontrol('Tag','display_panel_markerfacecolour_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 45 handle_size(3)-180 20],...
    'String','auto|none|colour',...
    'Value',2,...
    'Callback',{@popupmenu_Callback,'markerFaceColour'}...
    );
uicontrol('Tag','display_panel_markerfacecoloursample_text',...
    'Style','text',...
    'Parent',handle_p3_2,...
    'BackgroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[165 42 35 25],...
    'String',''...
    );
uicontrol('Tag','display_panel_markerfacecolour_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[205 42 25 25],...
    'String','...',...
    'TooltipString',sprintf('%s\n%s',...
    'Open colour palette for specifying','marker face colour'),...
    'Callback',{@pushbutton_Callback,'markerFaceColourPalette'}...
    );
uicontrol('Tag','display_panel_markersize_text',...
    'Style','text',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','Size'...
    );
uicontrol('Tag','display_panel_markersize_edit',...
    'Style','edit',...
    'Parent',handle_p3_2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 50 25],...
    'String','6',...
    'Callback',{@edit_Callback,'markerSize'}...
    );
uicontrol('Tag','display_panel_markersize_text',...
    'Style','text',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[130 10 30 20],...
    'String','pt'...
    );
uicontrol('Tag','display_panel_markerdefaults_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p3_2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[160 10 70 25],...
    'String','Default',...
    'TooltipString',sprintf('%s\n%s',...
    'Set marker settings (edge, face, size)','to default values.'),...
    'Callback',{@pushbutton_Callback,'markerDefaults'}...
    );

handle_p4_1 = uipanel('Tag','display_panel_axesexport_panel',...
    'Parent',handle_pp4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-230 handle_size(3)-20 150],...
    'Title','Export figure'...
    );
uicontrol('Tag','display_panel_axesexport_description',...
    'Style','text',...
    'Parent',handle_p4_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 100 handle_size(3)-40 20],...
    'String',{'Export current axes.'}...
    );
uicontrol('Tag','display_panel_axesexport_format_text',...
    'Style','text',...
    'Parent',handle_p4_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 70 60 20],...
    'String','Format'...
    );
hAxesExportFormat = uicontrol('Tag','display_panel_axesexport_format_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p4_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 75 160 20],...
    'String','default|square|fullwidth|fullwidthhalfheight|halfwidth',...
    'Enable','on',...
    'TooltipString','Select format of exported graphics'...
    );
uicontrol('Tag','display_panel_axesexport_additionalsave_text',...
    'Style','text',...
    'Parent',handle_p4_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 40 60 20],...
    'String','Save'...
    );
uicontrol('Tag','display_panel_axesexport_includetitle_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p4_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 45 70 20],...
    'String',' Title',...
    'TooltipString','Toggle between saving the figure title',...
    'Value',0 ...
    );
uicontrol('Tag','display_panel_axesexport_includecaption_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p4_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-120 45 110 20],...
    'String',' Caption',...
    'TooltipString','Toggle between saving a caption along with the figure',...
    'Value',1 ...
    );
uicontrol('Tag','display_panel_axesexport_filetype_text',...
    'Style','text',...
    'Parent',handle_p4_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','File type'...
    );
uicontrol('Tag','display_panel_axesexport_filetype_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p4_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 15 100 20],...
    'String','fig|eps|pdf|png',...
    'TooltipString','Select type of graphics file'...
    );
uicontrol('Tag','display_panel_axesexport_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p4_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-90 10 60 30],...
    'String','Export',...
    'TooltipString','Export current axis to graphics file with given format',...
    'Callback',{@pushbutton_Callback,'axisExport'}...
    );

handle_p4_2 = uipanel('Tag','display_panel_dataexport_panel',...
    'Parent',handle_pp4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-460 handle_size(3)-20 220],...
    'Title','Export 1D data'...
    );
uicontrol('Tag','display_panel_dataexport_header_text',...
    'Style','text',...
    'Parent',handle_p4_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 170 150 20],...
    'TooltipString','Character(s) the header starts with; default: "%" (Matlab)',...
    'String','Header starts with'...
    );
uicontrol('Tag','display_panel_dataexport_header_edit',...
    'Style','edit',...
    'Parent',handle_p4_2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[170 170 60 25],...
    'String','%',...
    'TooltipString','Character the header should start with'...
    );
uicontrol('Tag','display_panel_dataexport_include_text',...
    'Style','text',...
    'Parent',handle_p4_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 138 60 20],...
    'String','Include'...
    );
uicontrol('Tag','display_panel_dataexport_includeaxis_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p4_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 140 70 20],...
    'String',' Axis',...
    'TooltipString','Toggle between including or excluding axis values',...
    'Value',1 ...
    );
uicontrol('Tag','display_panel_dataexport_includestdev_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p4_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-120 140 110 20],...
    'String',' Std. dev.',...
    'TooltipString','Toggle between including or excluding std. dev. values',...
    'Value',0 ...
    );
uicontrol('Tag','display_panel_dataexport_line_text',...
    'Style','text',...
    'Parent',handle_p4_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 105 60 20],...
    'String','Line'...
    );
uicontrol('Tag','display_panel_dataexport_line_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p4_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 110 160 20],...
    'String','MFoff|MFon|DeltaMF|sum(MFoff,MFon)',...
    'TooltipString','Select line you want to export'...
    );
uicontrol('Tag','display_panel_dataexport_filetype_text',...
    'Style','text',...
    'Parent',handle_p4_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 70 60 20],...
    'String','Multiple'...
    );
uicontrol('Tag','display_panel_dataexport_multiple1file_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p4_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 75 100 20],...
    'String',' One file',...
    'TooltipString','Toggle between exporting multiple datasets in one file',...
    'Value',0,...
    'Enable','off',...
    'Callback',{@checkbox_Callback,'multiple1file'} ...
    );
uicontrol('Tag','display_panel_dataexport_multiplefiles_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p4_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 45 100 20],...
    'String',' Multiple files',...
    'TooltipString','Toggle between exporting multiple datasets in multiple files',...
    'Value',0,...
    'Callback',{@checkbox_Callback,'multiplefiles'} ...
    );
uicontrol('Tag','display_panel_dataexport_filetype_text',...
    'Style','text',...
    'Parent',handle_p4_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','File type'...
    );
uicontrol('Tag','display_panel_dataexport_filetype_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p4_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 15 100 20],...
    'String','ASCII',...
    'TooltipString','Select type of data file'...
    );
uicontrol('Tag','display_panel_dataexport_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p4_2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-90 10 60 30],...
    'String','Export',...
    'TooltipString',sprintf('%s\n%s',...
    'Export currently active dataset in current (x or y) display',...
    'to file with given type'),...
    'Callback',{@pushbutton_Callback,'dataExport'}...
    );

handle_p5_1 = uipanel('Tag','display_panel_3Ddisplay_panel',...
    'Parent',handle_pp5,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-390 handle_size(3)-20 310],...
    'Title','3D display'...
    );
uicontrol('Tag','display_panel_3D_reducing_text',...
    'Style','text',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlign','left',...
    'FontAngle','italic',...
    'Units','Pixels',...
    'Position',[10 260 80 20],...
    'TooltipString','Set parameters to reduce data points in x and y',...
    'String','Reducing'...
    );
uicontrol('Tag','display_panel_3D_x_text',...
    'Style','text',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100 260 (handle_size(3)-130)/2 20],...
    'String','x'...
    );
uicontrol('Tag','display_panel_3D_y_text',...
    'Style','text',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100+(handle_size(3)-130)/2 260 (handle_size(3)-130)/2 20],...
    'String','y'...
    );
uicontrol('Tag','display_panel_3D_original_text',...
    'Style','text',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlign','left',...
    'Units','Pixels',...
    'Position',[10 230 80 20],...
    'TooltipString','Original size of currently active dataset in datapoints in x and y',...
    'String','Original'...
    );
uicontrol('Tag','display_panel_3D_original_x_edit',...
    'Style','edit',...
    'Parent',handle_p5_1,...
    'BackgroundColor',[.9 .9 .9],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100 230 (handle_size(3)-130)/2 25],...
    'String','1',...
    'Enable','inactive',...
    'TooltipString','Original size of currently active dataset in x dimension'...
    );
uicontrol('Tag','display_panel_3D_original_y_edit',...
    'Style','edit',...
    'Parent',handle_p5_1,...
    'BackgroundColor',[.9 .9 .9],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100+(handle_size(3)-130)/2 230 (handle_size(3)-130)/2 25],...
    'String','1',...
    'Enable','inactive',...
    'TooltipString','Original size of currently active dataset in y dimension'...
    );
uicontrol('Tag','display_panel_3D_factor_text',...
    'Style','text',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlign','left',...
    'Units','Pixels',...
    'Position',[10 200 80 20],...
    'TooltipString','Factor by which to reduce the number of datapoints in x and y',...
    'String','Factor'...
    );
uicontrol('Tag','display_panel_3D_factor_x_edit',...
    'Style','edit',...
    'Parent',handle_p5_1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100 200 (handle_size(3)-130)/2 25],...
    'String','1',...
    'TooltipString','Factor by which to reduce the number of datapoints in x',...
    'Callback',{@show3d_edit_Callback,'xfactor'}...
    );
uicontrol('Tag','display_panel_3D_factor_y_edit',...
    'Style','edit',...
    'Parent',handle_p5_1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100+(handle_size(3)-130)/2 200 (handle_size(3)-130)/2 25],...
    'String','1',...
    'TooltipString','Factor by which to reduce the number of datapoints in y',...
    'Callback',{@show3d_edit_Callback,'yfactor'}...
    );
uicontrol('Tag','display_panel_3D_size_text',...
    'Style','text',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlign','left',...
    'Units','Pixels',...
    'Position',[10 170 80 20],...
    'TooltipString','Size of dataset with current reducing factor',...
    'String','Size'...
    );
uicontrol('Tag','display_panel_3D_size_x_edit',...
    'Style','edit',...
    'Parent',handle_p5_1,...
    'BackgroundColor',[.9 .9 .9],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100 170 (handle_size(3)-130)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','display_panel_3D_size_y_edit',...
    'Style','edit',...
    'Parent',handle_p5_1,...
    'BackgroundColor',[.9 .9 .9],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100+(handle_size(3)-130)/2 170 (handle_size(3)-130)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','display_panel_offset_text',...
    'Style','text',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlign','left',...
    'FontAngle','italic',...
    'Units','Pixels',...
    'Position',[10 140 80 20],...
    'TooltipString','Offset by which to shift the (reduced) data from left in x and y',...
    'String','Offset'...
    );
uicontrol('Tag','display_panel_offset_auto_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100 140 handle_size(3)-120 20],...
    'String',' automatic',...
    'TooltipString','Toggle between automatic and manual offset',...
    'Value',1 ...
    );
uicontrol('Tag','display_panel_3D_offset_type_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 110 80 20],...
    'String','left|right',...
    'TooltipString','Select type of offset'...
    );
uicontrol('Tag','display_panel_3D_offset_x_edit',...
    'Style','edit',...
    'Parent',handle_p5_1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100 110 (handle_size(3)-130)/2 25],...
    'String','0',...
    'TooltipString','Offset by which to shift the (reduced) data in x',...
    'Callback',{@show3d_edit_Callback,'xoffset'}...
    );
uicontrol('Tag','display_panel_3D_offset_y_edit',...
    'Style','edit',...
    'Parent',handle_p5_1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100+(handle_size(3)-130)/2 110 (handle_size(3)-130)/2 25],...
    'String','0',...
    'TooltipString','Offset by which to shift the (reduced) data in y',...
    'Callback',{@show3d_edit_Callback,'yoffset'}...
    );
uicontrol('Tag','display_panel_3D_display_type_text',...
    'Style','text',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'FontAngle','italic',...
    'Units','Pixels',...
    'Position',[10 70 60 20],...
    'String','Type'...
    );
uicontrol('Tag','display_panel_3D_display_type_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 75 100 20],...
    'String','surf|surfc|mesh|trisurf|trimesh',...
    'TooltipString','Select type of 3D representation'...
    );
uicontrol('Tag','display_panel_3D_show_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-90 70 60 30],...
    'String','Show',...
    'TooltipString',sprintf('%s\n%s',...
    'Show currently active dataset in given representation',...
    'as 3D display'),...
    'Callback',{@show3d_pushbutton_Callback}...
    );
uicontrol('Tag','display_panel_3D_format_text',...
    'Style','text',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 40 60 20],...
    'String','Format'...
    );
h3DExportFormat = uicontrol('Tag','display_panel_3D_format_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 45 160 20],...
    'String','default|square|fullwidth|fullwidthhalfheight|halfwidth',...
    'Enable','on',...
    'TooltipString','Select format of exported graphics'...
    );
uicontrol('Tag','display_panel_axesexport_filetype_text',...
    'Style','text',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','File type'...
    );
uicontrol('Tag','display_panel_3D_filetype_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 15 100 20],...
    'String','fig|eps|pdf|png',...
    'TooltipString','Select type of graphics file'...
    );
uicontrol('Tag','display_panel_3D_export_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p5_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-90 10 60 30],...
    'String','Export',...
    'TooltipString',sprintf('%s\n%s',...
    'Export 3D representation of currently active dataset',...
    'to graphics file with given format'),...
    'Callback',{@export3d_pushbutton_Callback}...
    );

handle_p6_1 = uipanel('Tag','display_panel_threshold_panel',...
    'Parent',handle_pp6,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-210 handle_size(3)-20 130],...
    'Title','Thresholds in z'...
    );
uicontrol('Tag','display_panel_threshold_min_text',...
    'Style','text',...
    'Parent',handle_p6_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 73 40 20],...
    'String','Min'...
    );
uicontrol('Tag','display_panel_threshold_min_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p6_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[55 75 handle_size(3)-120 20],...
    'String','',...
    'TooltipString',sprintf('%s\n%s',...
    'Whether or not to use a threshold for minimum value',...
    'in z direction (intensity)'),...
    'Value',0,...
    'Callback',{@threshold_checkbox_Callback,'min'} ...
    );
uicontrol('Tag','display_panel_threshold_min_edit',...
    'Style','edit',...
    'Parent',handle_p6_1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 73 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Enable','Off',...
    'TooltipString','Threshold for minimum in z',...
    'Callback',{@threshold_edit_Callback,'min'}...
    );
uicontrol('Tag','display_panel_threshold_min_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p6_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-90 70 60 30],...
    'String','Pick',...
    'TooltipString',sprintf('%s\n%s',...
    'Pick threshold in current display',...
    '(only in 1D representation)'),...
    'Enable','off',...
    'Callback',{@threshold_pushbutton_Callback,'min'}...
    );
uicontrol('Tag','display_panel_threshold_max_text',...
    'Style','text',...
    'Parent',handle_p6_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 43 40 20],...
    'String','Max'...
    );
uicontrol('Tag','display_panel_threshold_max_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p6_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[55 45 handle_size(3)-120 20],...
    'String','',...
    'TooltipString',sprintf('%s\n%s',...
    'Whether or not to use a threshold for maximum value',...
    'in z direction (intensity)'),...
    'Value',0,...
    'Callback',{@threshold_checkbox_Callback,'max'} ...
    );
uicontrol('Tag','display_panel_threshold_max_edit',...
    'Style','edit',...
    'Parent',handle_p6_1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 43 (handle_size(3)-90)/2 25],...
    'String','0',...
    'TooltipString','Threshold for maximum in z',...
    'Enable','Off',...
    'Callback',{@threshold_edit_Callback,'max'}...
    );
uicontrol('Tag','display_panel_threshold_max_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p6_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-90 40 60 30],...
    'String','Pick',...
    'TooltipString',sprintf('%s\n%s',...
    'Pick threshold in current display',...
    '(only in 1D representation)'),...
    'Enable','off',...
    'Callback',{@threshold_pushbutton_Callback,'max'}...
    );
uicontrol('Tag','display_panel_threshold_all_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p6_1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[55 10 handle_size(3)-90 20],...
    'String',' Apply to all visible',...
    'TooltipString',sprintf('%s\n%s',...
    'Whether or not to apply the threshold to all datasets',...
    'currently visible in the main axis'),...
    'Value',0 ...
    );

handle_p6_2 = uipanel('Tag','display_panel_normalise_panel',...
    'Parent',handle_pp6,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-280 handle_size(3)-20 60],...
    'Title','Normalise'...
    );
uicontrol('Tag','display_panel_normalise_pkpk_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Pk-Pk = 1',...
    'TooltipString','Normalise peak-peak to 1',...
    'pos',[handle_size(3)-30-(((handle_size(3)-40)/2)*2) 10 (handle_size(3)-40)/2 30],...
    'parent',handle_p6_2,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@normalise_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_normalise_amplitude_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','amplitude = 1',...
    'TooltipString','Normalise amplitude to 1',...
    'pos',[handle_size(3)-30-(((handle_size(3)-40)/2)) 10 (handle_size(3)-40)/2 30],...
    'parent',handle_p6_2,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@normalise_togglebutton_Callback}...
    );

handle_p6_3 = uipanel('Tag','display_panel_highlight_panel',...
    'Parent',handle_pp6,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-410 handle_size(3)-20 120],...
    'Title','Highlight of current dataset'...
    );
uicontrol('Tag','display_panel_highlight_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p6_3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 75 handle_size(3)-110 20],...
    'String',' Highlight active',...
    'TooltipString','Toggle between highlighting currently active dataset',...
    'Value',1,...
    'Callback',{@checkbox_Callback,'highlight'}...
    );
uicontrol('Tag','display_panel_highlight_method_text',...
    'Style','text',...
    'Parent',handle_p6_3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 60 20],...
    'String','Method'...
    );
uicontrol('Tag','display_panel_highlight_value_text',...
    'Style','text',...
    'Parent',handle_p6_3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','Value'...
    );
uicontrol('Tag','display_panel_highlight_method_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p6_3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 40 handle_size(3)-110 20],...
    'String','color|linewidth|linestyle|marker',...
    'TooltipString','Choose a highlighting method for currently active dataset',...
    'Callback',{@highlight_method_popupmenu_Callback}...
    );
uicontrol('Tag','display_panel_highlight_value_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p6_3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 handle_size(3)-110 20],...
    'String','blue|green|red|cyan|magenta|yellow|black',...
    'TooltipString','Choose a highlighting value for currently active dataset',...
    'Callback',{@highlight_value_popupmenu_Callback}...
    );

handle_p6_4 = uipanel('Tag','display_panel_avg_panel',...
    'Parent',handle_pp6,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-475 handle_size(3)-20 55],...
    'Title','AVG settings'...
    );
uicontrol('Tag','display_panel_stdev_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p6_4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 (handle_size(3)-40)/2 20],...
    'String',' Std deviation',...
    'TooltipString','Toggle between displaying standard deviation as error bars',...
    'Value',0,...
    'Callback',{@checkbox_Callback,'stdev'}...
    );


handle_p7_p1 = uipanel('Tag','mfe_displaymode_panel',...
    'Parent',handle_pp7,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-130 handle_size(3)-20 50],...
    'Title','MFE display type'...
    );
uicontrol('Tag','mfe_displaymode_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p7_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-40 20],...
    'String','MFoff|MFoff+MFon|MFoff+MFon+DeltaMF|MFon|DeltaMF|sum(MFoff,MFon)|relative MFE',...
    'Value',1, ...
    'Callback',@mfe_displaymode_Callback ...
    );

handle_p7_p2 = uipanel('Tag','mfe_line_panel',...
    'Parent',handle_pp7,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-460 handle_size(3)-20 320],...
    'Title','Line settings'...
    );
uicontrol('Tag','mfe_highlight_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 270 handle_size(3)-105 20],...
    'String',' Highlight active',...
    'TooltipString','Toggle between highlighting currently active dataset',...
    'Value',1,...
    'Callback',{@checkbox_Callback,'highlight'}...
    );
uicontrol('Tag','mfe_line_text',...
    'Style','text',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 238 60 20],...
    'String','Line'...
    );
uicontrol('Tag','mfe_line_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 240 handle_size(3)-110 20],...
    'String','MFoff|MFon|DeltaMF',...
    'Callback',{@popupmenu_Callback,'MFEline'}...
    );
uicontrol('Tag','mfe_colour_text',...
    'Style','text',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 203 60 20],...
    'String','Colour'...
    );
uicontrol('Tag','mfe_coloursample_text',...
    'Style','text',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 202 40 25],...
    'String',''...
    );
uicontrol('Tag','mfe_colour_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[130 200 100 30],...
    'String','Palette...',...
    'Callback',{@pushbutton_Callback,'MFEcolourPalette'}...
    );
uicontrol('Tag','mfe_linewidth_text',...
    'Style','text',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 168 60 20],...
    'String','Width'...
    );
uicontrol('Tag','mfe_linewidth_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 170 handle_size(3)-110 20],...
    'String','1 px|2 px|3 px|4 px|5 px',...
    'Callback',{@popupmenu_Callback,'MFElinewidth'}...
    );
uicontrol('Tag','mfe_linestyle_text',...
    'Style','text',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 138 60 20],...
    'String','Style'...
    );
uicontrol('Tag','mfe_linestyle_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 140 handle_size(3)-110 20],...
    'String','solid|dashed|dotted|dash-dotted|none',...
    'Callback',{@popupmenu_Callback,'MFElinestyle'}...
    );
uicontrol('Tag','mfe_linemarker_text',...
    'Style','text',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'FontAngle','Oblique',...
    'Units','Pixels',...
    'Position',[10 108 60 20],...
    'String','Marker'...
    );
uicontrol('Tag','mfe_linemarker_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 110 handle_size(3)-110 20],...
    'String',['none|plus|circle|asterisk|point|cross|square|diamond|'...
    'triangle up|triangle down|triangle right|triangle left|'...
    'pentagram|hexagram'],...
    'Callback',{@popupmenu_Callback,'MFElinemarker'}...
    );
uicontrol('Tag','display_panel_markeredgecolour_text',...
    'Style','text',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 78 60 20],...
    'String','Edge'...
    );
uicontrol('Tag','mfe_markeredgecolour_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 80 handle_size(3)-180 20],...
    'String','auto|none|colour',...
    'Value',1,...
    'Callback',{@popupmenu_Callback,'MFEmarkerEdgeColour'}...
    );
uicontrol('Tag','mfe_markeredgecoloursample_text',...
    'Style','text',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[165 77 35 25],...
    'String',''...
    );
uicontrol('Tag','mfe_markeredgecolour_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[205 77 25 25],...
    'String','...',...
    'TooltipString',sprintf('%s\n%s',...
    'Open colour palette for specifying','marker edge colour'),...
    'Callback',{@pushbutton_Callback,'MFEmarkerEdgeColourPalette'}...
    );
uicontrol('Tag','mfe_markerfacecolour_text',...
    'Style','text',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 43 60 20],...
    'String','Face'...
    );
uicontrol('Tag','mfe_markerfacecolour_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 45 handle_size(3)-180 20],...
    'String','auto|none|colour',...
    'Value',2,...
    'Callback',{@popupmenu_Callback,'MFEmarkerFaceColour'}...
    );
uicontrol('Tag','mfe_markerfacecoloursample_text',...
    'Style','text',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[165 42 35 25],...
    'String',''...
    );
uicontrol('Tag','mfe_markerfacecolour_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[205 42 25 25],...
    'String','...',...
    'TooltipString',sprintf('%s\n%s',...
    'Open colour palette for specifying','marker face colour'),...
    'Callback',{@pushbutton_Callback,'MFEmarkerFaceColourPalette'}...
    );
uicontrol('Tag','mfe_markersize_text',...
    'Style','text',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','Size'...
    );
uicontrol('Tag','mfe_markersize_edit',...
    'Style','edit',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 50 25],...
    'String','6',...
    'Callback',{@edit_Callback,'MFEmarkerSize'}...
    );
uicontrol('Tag','mfe_markersize_text',...
    'Style','text',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[130 10 30 20],...
    'String','pt'...
    );
uicontrol('Tag','mfe_markerdefaults_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p7_p2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[160 10 70 25],...
    'String','Default',...
    'TooltipString',sprintf('%s\n%s',...
    'Set marker settings (edge, face, size)','to default values.'),...
    'Callback',{@pushbutton_Callback,'MFEmarkerDefaults'}...
    );


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Initialization tasks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Read configuration for export formats (geometries) from ini file
exportFormatsConfigFile = fullfile(TAinfo('dir'),'figure','fig2file.ini');
exportFormats = TAiniFileRead(exportFormatsConfigFile);
% Set export formats (geometries)
set(hAxesExportFormat,'String',fieldnames(exportFormats));
set(h3DExportFormat,'String',fieldnames(exportFormats));


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function pages_buttongroup_Callback(source,~)
    try
        page_panels = [handle_pp1 handle_pp2 handle_pp3 handle_pp4...
            handle_pp5 handle_pp6 handle_pp7];
        val = get(get(source,'SelectedObject'),'String');
        switch val
            case '1'
                set(page_panels,'Visible','off');
                set(handle_pp1,'Visible','on');
            case '2'
                set(page_panels,'Visible','off');
                set(handle_pp2,'Visible','on');
            case '3'
                set(page_panels,'Visible','off');
                set(handle_pp3,'Visible','on');
            case '4'
                set(page_panels,'Visible','off');
                set(handle_pp4,'Visible','on');
            case '5'
                set(page_panels,'Visible','off');
                set(handle_pp5,'Visible','on');
            case '6'
                set(page_panels,'Visible','off');
                set(handle_pp6,'Visible','on');
            case '7'
                set(page_panels,'Visible','off');
                set(handle_pp7,'Visible','on');
        end
    catch exception
        try
            msgStr = sprintf('An exception occurred in %s, line %i.',...
                exception.stack(1).name,exception.stack(1).line);
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function pushbutton_Callback(~,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle();
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);

        % Make life easier
        active = ad.control.spectra.active;
        
        % Return immediately if there is no active dataset
        if active == 0 && ~strcmpi(action,'zerolinecolourpalette') 
            return;
        end
        
        colors = {...
            'b',[0 0 1]; ...
            'g',[0 1 0]; ...
            'r',[1 0 0]; ...
            'c',[0 1 1]; ...
            'm',[1 0 1]; ...
            'y',[1 1 0]; ...
            'k',[0 0 0]; ...
            'w',[1 1 1]; ...
            };

        % Get line type currently selected (MFoff/MFon/DeltaMF)
        MFElines = cellstr(get(gh.mfe_line_popupmenu,'String'));
        MFEline = MFElines{get(gh.mfe_line_popupmenu,'Value')};
        
        switch action
            case 'zeroLineColourPalette'
                if ischar(ad.control.axis.grid.zero.color)
                    ad.control.axis.grid.zero.color = colors{...
                        strcmpi(ad.control.axis.grid.zero.color,...
                        colors(:,1)),2};
                end
                ad.control.axis.grid.zero.color = uisetcolor(...
                    ad.control.axis.grid.zero.color,...
                    'Set zero line colour');
        
                % Update appdata of main window
                setappdata(mainWindow,'control',ad.control);
                
                % Update display panel
                update_displayPanel();
                
                % Update main axis
                update_mainAxis();
                return;
            case 'zeroLineDefaults'
                ad.control.axis.grid.zero = ...
                    ad.configuration.display.grid.zero;
                % Update appdata of main window
                setappdata(mainWindow,'control',ad.control);
                
                % Update display panel
                update_displayPanel();
                
                % Update main axis
                update_mainAxis();
                return;
            case 'legendFont'
                if ~isempty(ad.control.axis.legend.handle) && ...
                        ishandle(ad.control.axis.legend.handle)
                    legendFontSettings = uisetfont(...
                        ad.control.axis.legend.handle,...
                        'Set legend font');
                else
                    legendFontSettings = uisetfont('Set legend font');
                end
                if isstruct(legendFontSettings)
                    ad.control.axis.legend.FontName = ...
                        legendFontSettings.FontName;
                    ad.control.axis.legend.FontSize = ...
                        legendFontSettings.FontSize;
                    ad.control.axis.legend.FontWeight = ...
                        legendFontSettings.FontWeight;
                    ad.control.axis.legend.FontAngle = ...
                        legendFontSettings.FontAngle;
                end
        
                % Update appdata of main window
                setappdata(mainWindow,'control',ad.control);
                
                % Update display panel
                update_displayPanel();
                
                % Update main axis
                update_mainAxis();
                return;
            case 'colourPalette'
                if ischar(ad.data{active}.line.color)
                    ad.data{active}.line.color = colors{...
                        strcmpi(ad.data{active}.line.color,...
                        colors(:,1)),2};
                end
                ad.data{active}.line.color = uisetcolor(...
                    ad.data{active}.line.color,...
                    'Set MFoff line colour');
        
                % Update appdata of main window
                setappdata(mainWindow,'data',ad.data);
                
                % Update display panel
                update_displayPanel();
                
                % Update main axis
                update_mainAxis();
                return;
            case 'markerEdgeColourPalette'
                if ischar(ad.data{active}.line.marker.edgeColor)
                    ad.data{active}.line.marker.edgeColor = colors{...
                        strcmpi(ad.data{active}.line.marker.edgeColor,...
                        colors(:,1)),2};
                end
                ad.data{active}.line.marker.edgeColor = uisetcolor(...
                    ad.data{active}.line.marker.edgeColor,...
                    'Set MFoff line marker edge colour');
        
                % Update appdata of main window
                setappdata(mainWindow,'data',ad.data);
                
                % Update display panel
                update_displayPanel();
                
                % Update main axis
                update_mainAxis();
                return;
            case 'markerFaceColourPalette'
                if ischar(ad.data{active}.line.marker.faceColor)
                    ad.data{active}.line.marker.faceColor = colors{...
                        strcmpi(ad.data{active}.line.marker.faceColor,...
                        colors(:,1)),2};
                end
                ad.data{active}.line.marker.faceColor = uisetcolor(...
                    ad.data{active}.line.marker.faceColor,...
                    'Set MFoff line marker face colour');
        
                % Update appdata of main window
                setappdata(mainWindow,'data',ad.data);
                
                % Update display panel
                update_displayPanel();
                
                % Update main axis
                update_mainAxis();
                return;
            case 'markerDefaults'
                ad.data{active}.line.marker.type = 'none';
                ad.data{active}.line.marker.edgeColor = 'auto';
                ad.data{active}.line.marker.faceColor = 'none';
                ad.data{active}.line.marker.size = 6;
                % Update appdata of main window
                setappdata(mainWindow,'data',ad.data);
                
                % Update display panel
                update_displayPanel();
                
                % Update main axis
                update_mainAxis();
                return;   
            case 'MFEcolourPalette'
                switch MFEline
                    case 'MFoff'
                        % Convert string in RGB triple if necessary
                        if ischar(ad.data{active}.line.color)
                            ad.data{active}.line.color = colors{...
                                strcmpi(ad.data{active}.line.color,...
                                colors(:,1)),2};
                        end
                        ad.data{active}.line.color = uisetcolor(...
                            ad.data{active}.line.color,...
                            'Set MFoff line colour');
                    case 'MFon'
                        % Convert string in RGB triple if necessary
                        if ischar(ad.data{active}.display.MFon.line.color)
                            ad.data{active}.display.MFon.line.color = colors{...
                                strcmpi(ad.data{active}.display.MFon.line.color,...
                                colors(:,1)),2};
                        end
                        ad.data{active}.display.MFon.line.color = ...
                            uisetcolor(...
                            ad.data{active}.display.MFon.line.color,...
                            'Set MFon line colour');
                    case 'DeltaMF'
                        % Convert string in RGB triple if necessary
                        if ischar(ad.data{active}.display.DeltaMF.line.color)
                            ad.data{active}.display.DeltaMF.line.color = colors{...
                                strcmpi(ad.data{active}.display.DeltaMF.line.color,...
                                colors(:,1)),2};
                        end
                        ad.data{active}.display.DeltaMF.line.color = ...
                            uisetcolor(...
                            ad.data{active}.display.DeltaMF.line.color,...
                            'Set DeltaMF line colour');
                    otherwise
                        disp(['TAgui : guiMFEPanel() : '...
                            'pushbutton_Callback(): Unknown MFElineType '...
                            '"' MFEline '"']);
                end
        
                % Update appdata of main window
                setappdata(mainWindow,'data',ad.data);
                
                % Update MFE panel
                update_displayPanel();
                
                % Update main axis
                update_mainAxis();
                return;
            case 'MFEmarkerEdgeColourPalette'
                switch MFEline
                    case 'MFoff'
                        % Convert string in RGB triple if necessary
                        if ischar(ad.data{active}.line.marker.edgeColor)
                            ad.data{active}.line.marker.edgeColor = colors{...
                                strcmpi(ad.data{active}.line.marker.edgeColor,...
                                colors(:,1)),2};
                        end
                        ad.data{active}.line.marker.edgeColor = uisetcolor(...
                            ad.data{active}.line.marker.edgeColor,...
                            'Set MFoff line marker edge colour');
                    case 'MFon'
                        % Convert string in RGB triple if necessary
                        if ischar(ad.data{active}.display.MFon.line.marker.edgeColor)
                            ad.data{active}.display.MFon.line.marker.edgeColor = colors{...
                                strcmpi(ad.data{active}.display.MFon.line.marker.edgeColor,...
                                colors(:,1)),2};
                        end
                        ad.data{active}.display.MFon.line.marker.edgeColor = ...
                            uisetcolor(...
                            ad.data{active}.display.MFon.line.marker.edgeColor,...
                            'Set MFon line marker edge colour');
                    case 'DeltaMF'
                        % Convert string in RGB triple if necessary
                        if ischar(ad.data{active}.display.DeltaMF.line.marker.edgeColor)
                            ad.data{active}.display.DeltaMF.line.marker.edgeColor = colors{...
                                strcmpi(ad.data{active}.display.DeltaMF.line.marker.edgeColor,...
                                colors(:,1)),2};
                        end
                        ad.data{active}.display.DeltaMF.line.marker.edgeColor = ...
                            uisetcolor(...
                            ad.data{active}.display.DeltaMF.line.marker.edgeColor,...
                            'Set DeltaMF line marker edge colour');
                    otherwise
                        disp(['TAgui : guiMFEPanel() : '...
                            'pushbutton_Callback(): Unknown MFElineType '...
                            '"' MFEline '"']);
                end
        
                % Update appdata of main window
                setappdata(mainWindow,'data',ad.data);
                
                % Update MFE panel
                update_displayPanel();
                
                % Update main axis
                update_mainAxis();
                return;
            case 'MFEmarkerFaceColourPalette'
                switch MFEline
                    case 'MFoff'
                        % Convert string in RGB triple if necessary
                        if ischar(ad.data{active}.line.marker.faceColor)
                            ad.data{active}.line.marker.faceColor = colors{...
                                strcmpi(ad.data{active}.line.marker.faceColor,...
                                colors(:,1)),2};
                        end
                        ad.data{active}.line.marker.faceColor = uisetcolor(...
                            ad.data{active}.line.marker.faceColor,...
                            'Set MFoff line marker face colour');
                    case 'MFon'
                        % Convert string in RGB triple if necessary
                        if ischar(ad.data{active}.display.MFon.line.marker.faceColor)
                            ad.data{active}.display.MFon.line.marker.faceColor = colors{...
                                strcmpi(ad.data{active}.display.MFon.line.marker.faceColor,...
                                colors(:,1)),2};
                        end
                        ad.data{active}.display.MFon.line.marker.faceColor = ...
                            uisetcolor(...
                            ad.data{active}.display.MFon.line.marker.faceColor,...
                            'Set MFon line marker face colour');
                    case 'DeltaMF'
                        % Convert string in RGB triple if necessary
                        if ischar(ad.data{active}.display.DeltaMF.line.marker.faceColor)
                            ad.data{active}.display.DeltaMF.line.marker.faceColor = colors{...
                                strcmpi(ad.data{active}.display.DeltaMF.line.marker.faceColor,...
                                colors(:,1)),2};
                        end
                        ad.data{active}.display.DeltaMF.line.marker.faceColor = ...
                            uisetcolor(...
                            ad.data{active}.display.DeltaMF.line.marker.faceColor,...
                            'Set DeltaMF line marker face colour');
                    otherwise
                        disp(['TAgui : guiMFEPanel() : '...
                            'pushbutton_Callback(): Unknown MFElineType '...
                            '"' MFEline '"']);
                end
        
                % Update appdata of main window
                setappdata(mainWindow,'data',ad.data);
                
                % Update MFE panel
                update_displayPanel();
                
                % Update main axis
                update_mainAxis();
                return;
            case 'MFEmarkerDefaults'
                switch MFEline
                    case 'MFoff'
                        ad.data{active}.line.marker.type = 'none';
                        ad.data{active}.line.marker.edgeColor = 'auto';
                        ad.data{active}.line.marker.faceColor = 'none';
                        ad.data{active}.line.marker.size = 6;
                    case 'MFon'
                        ad.data{active}.display.MFon.line.marker.type = 'none';
                        ad.data{active}.display.MFon.line.marker.edgeColor = 'auto';
                        ad.data{active}.display.MFon.line.marker.faceColor = 'none';
                        ad.data{active}.display.MFon.line.marker.size = 6;
                    case 'DeltaMF'
                        ad.data{active}.display.DeltaMF.line.marker.type = 'none';
                        ad.data{active}.display.DeltaMF.line.marker.edgeColor = 'auto';
                        ad.data{active}.display.DeltaMF.line.marker.faceColor = 'none';
                        ad.data{active}.display.DeltaMF.line.marker.size = 6;
                    otherwise
                        disp(['TAgui : guiMFEPanel() : '...
                            'pushbutton_Callback(): Unknown MFElineType '...
                            '"' MFEline '"']);
                end
                % Update appdata of main window
                setappdata(mainWindow,'data',ad.data);
                
                % Update display panel
                update_displayPanel();
                
                % Update main axis
                update_mainAxis();
                return;
            case 'dataExport'
                [status,warnings] = cmdExport(mainWindow,{'1D'});
                if status
                    TAmsg(warnings,'warning');
                end
            case 'axisExport'
                [status,warnings] = cmdExport(mainWindow,{'axis'});
                if status
                    TAmsg(warnings,'warning');
                end
            otherwise
                disp(['TAgui : guiDisplayPanel() : pushbutton_Callback(): '...
                    'Unknown action "' action '"']);
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function checkbox_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata and handles of main GUI
        mainWindow = TAguiGetWindowHandle();
        ad = getappdata(mainWindow);
        gh = guihandles(mainWindow);
        
        switch action
            case 'stdev'
                ad.control.axis.stdev = get(source,'Value');
            case 'legendbox'
                ad.control.axis.legend.box = get(source,'Value');
            case 'highlight'
                
                if (get(source,'Value'))
                    set(gh.display_panel_highlight_method_popupmenu,...
                        'Enable','On');
                    set(gh.display_panel_highlight_value_popupmenu,...
                        'Enable','On');
                    highlightTypes = cellstr(get(...
                        gh.display_panel_highlight_method_popupmenu,'String'));
                    highlightType = highlightTypes{get(...
                        gh.display_panel_highlight_method_popupmenu,'Value')};
                    ad.control.axis.highlight.method = highlightType;
                else
                    set(gh.display_panel_highlight_method_popupmenu,...
                        'Enable','Off');
                    set(gh.display_panel_highlight_value_popupmenu,...
                        'Enable','Off');
                    ad.control.axis.highlight.method = '';
                end
            case 'multiple1file'
                % Turn off "multiplefiles" checkbox
                set(gh.display_panel_dataexport_multiplefiles_checkbox,...
                    'Value',0);
            case 'multiplefiles'
                % Turn off "multiple1file" checkbox
                set(gh.display_panel_dataexport_multiple1file_checkbox,...
                    'Value',0);
            otherwise
                disp([mfilename '() : checkbox_Callback() : '...
                    'Unknown action "' action '"']);
                return;
        end
        setappdata(mainWindow,'control',ad.control);
        
        % Update display panel
        update_displayPanel();
        
        % Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function popupmenu_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main GUI
        mainWindow = TAguiGetWindowHandle();
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);

        values = cellstr(get(source,'String'));
        value = values{get(source,'Value')};

        % Get string of the currently selected popupmenu item
        sourceStrings = cellstr(get(source,'String'));
        sourceString = sourceStrings{get(source,'Value')};
        
        % Get line type currently selected (MFoff/MFon/DeltaMF)
        MFElines = cellstr(get(gh.mfe_line_popupmenu,'String'));
        MFEline = MFElines{get(gh.mfe_line_popupmenu,'Value')};
        
        active = ad.control.spectra.active;

        % Define available line styles
        lineStyles = {...
            'solid','-'; ...
            'dashed','--'; ...
            'dotted',':'; ...
            'dash-dotted','-.'; ...
            'none','none' ...
            };

        % Define available line marker
        lineMarker = {...
            'none','none'; ...
            'plus','+'; ...
            'circle','o'; ...
            'asterisk','*'; ...
            'point','.'; ...
            'cross','x'; ...
            'square','s'; ...
            'diamond','d'; ...
            'triangle up','^'; ...
            'triangle down','v'; ...
            'triangle right','<'; ...
            'triangle left','>'; ...
            'pentagram','p'; ...
            'hexagram','h' ...
            };
                
        switch lower(action)
            case 'line'
                % Update display panel
                update_displayPanel();
            case 'markeredgecolour'
                if strcmpi(value,'colour')
                    ad.data{active}.line.marker.edgeColor = ...
                        ad.data{active}.line.color;
                else
                    ad.data{active}.line.marker.edgeColor = value;
                end
            case 'markerfacecolour'
                if strcmpi(value,'colour')
                    ad.data{active}.line.marker.faceColor = ...
                        ad.data{active}.line.color;
                else
                    ad.data{active}.line.marker.faceColor = value;
                end
            case 'mfeline'
                % Update MFE panel
                update_displayPanel();
            case 'mfelinewidth'
                % convert source string into number
                sourceString = str2double(sourceString(1:end-3));
                switch MFEline
                    case 'MFoff'
                        ad.data{active}.line.width = sourceString;
                    case 'MFon'
                        ad.data{active}.display.MFon.line.width = ...
                            sourceString;
                    case 'DeltaMF'
                        ad.data{active}.display.DeltaMF.line.width = ...
                            sourceString;
                    otherwise
                        disp(['TAgui : guiMFEPanel() : '...
                            'popupmenu_Callback(): Unknown MFElineType '...
                            '"' MFEline '"']);
                end
            case 'mfelinestyle'
                sourceString = lineStyles{...
                    strcmpi(sourceString,lineStyles(:,1)),2};
                switch MFEline
                    case 'MFoff'
                        ad.data{active}.line.style = sourceString;
                    case 'MFon'
                        ad.data{active}.display.MFon.line.style = ...
                            sourceString;
                    case 'DeltaMF'
                        ad.data{active}.display.DeltaMF.line.style = ...
                            sourceString;
                    otherwise
                        disp(['TAgui : guiMFEPanel() : '...
                            'popupmenu_Callback(): Unknown MFElineType '...
                            '"' MFEline '"']);
                end
            case 'mfelinemarker'
                sourceString = lineMarker{...
                    strcmpi(sourceString,lineMarker(:,1)),2};
                switch MFEline
                    case 'MFoff'
                        ad.data{active}.line.marker.type = sourceString;
                    case 'MFon'
                        ad.data{active}.display.MFon.line.marker.type = ...
                            sourceString;
                    case 'DeltaMF'
                        ad.data{active}.display.DeltaMF.line.marker.type = ...
                            sourceString;
                    otherwise
                        disp(['TAgui : guiMFEPanel() : '...
                            'popupmenu_Callback(): Unknown MFElineType '...
                            '"' MFEline '"']);
                end
            case 'mfemarkeredgecolour'
                switch MFEline
                    case 'MFoff'
                        if strcmpi(sourceString,'colour')
                            ad.data{active}.line.marker.edgeColor = ...
                                ad.data{active}.line.color;
                        else
                            ad.data{active}.line.marker.edgeColor = ...
                                sourceString;
                        end
                    case 'MFon'
                        if strcmpi(sourceString,'colour')
                            ad.data{active}.display.MFon.line.marker.edgeColor = ...
                                ad.data{active}.display.MFon.line.color;
                        else
                            ad.data{active}.display.MFon.line.marker.edgeColor = ...
                                sourceString;
                        end
                    case 'DeltaMF'
                        if strcmpi(sourceString,'colour')
                            ad.data{active}.display.DeltaMF.line.marker.edgeColor = ...
                                ad.data{active}.display.DeltaMF.line.color;
                        else
                            ad.data{active}.display.DeltaMF.line.marker.edgeColor = ...
                                sourceString;
                        end
                    otherwise
                        disp(['TAgui : guiMFEPanel() : '...
                            'popupmenu_Callback(): Unknown MFElineType '...
                            '"' MFEline '"']);
                end
            case 'mfemarkerfacecolour'
                switch MFEline
                    case 'MFoff'
                        if strcmpi(sourceString,'colour')
                            ad.data{active}.line.marker.faceColor = ...
                                ad.data{active}.line.color;
                        else
                            ad.data{active}.line.marker.faceColor = ...
                                sourceString;
                        end
                    case 'MFon'
                        if strcmpi(sourceString,'colour')
                            ad.data{active}.display.MFon.line.marker.faceColor = ...
                                ad.data{active}.display.MFon.line.color;
                        else
                            ad.data{active}.display.MFon.line.marker.faceColor = ...
                                sourceString;
                        end
                    case 'DeltaMF'
                        if strcmpi(sourceString,'colour')
                            ad.data{active}.display.DeltaMF.line.marker.faceColor = ...
                                ad.data{active}.display.DeltaMF.line.color;
                        else
                            ad.data{active}.display.DeltaMF.line.marker.faceColor = ...
                                sourceString;
                        end
                    otherwise
                        disp(['TAgui : guiMFEPanel() : '...
                            'popupmenu_Callback(): Unknown MFElineType '...
                            '"' MFEline '"']);
                end
            otherwise
                disp([mfilename '() : popupmenu_Callback() : '...
                    'Unknown action "' action '"']);
                return;
        end
        setappdata(mainWindow,'data',ad.data);
        % Update display panel
        update_displayPanel();
        % Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function edit_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main GUI
        mainWindow = TAguiGetWindowHandle();
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        active = ad.control.spectra.active;
        if isempty(active) && ~active
            return;
        end
        
        % Get line type currently selected (MFoff/MFon/DeltaMF)
        MFElines = cellstr(get(gh.mfe_line_popupmenu,'String'));
        MFEline = MFElines{get(gh.mfe_line_popupmenu,'Value')};
        
        switch action
            case 'zeroLineWidth'
                ad.control.axis.grid.zero.width = ...
                    str2double(strrep(get(source,'String'),',','.'));
            case 'markerSize'
                ad.data{active}.line.marker.size = ...
                    str2double(strrep(get(source,'String'),',','.'));
            case 'MFEmarkerSize'
                switch MFEline
                    case 'MFoff'
                        ad.data{active}.line.marker.size = ...
                            str2double(strrep(get(source,'String'),',','.'));
                    case 'MFon'
                        ad.data{active}.display.MFon.line.marker.size = ...
                            str2double(strrep(get(source,'String'),',','.'));
                    case 'DeltaMF'
                        ad.data{active}.display.DeltaMF.line.marker.size = ...
                            str2double(strrep(get(source,'String'),',','.'));
                    otherwise
                        disp(['TAgui : guiMFEPanel() : '...
                            'edit_Callback(): Unknown MFElineType '...
                            '"' MFEline '"']);
                end
            otherwise
                disp(['TAgui_MFEwindow() : edit_Callback() : '...
                    'Unknown action "' action '"']);
                return;
        end
        setappdata(mainWindow,'control',ad.control);
        setappdata(mainWindow,'data',ad.data);
        % Update display panel
        update_displayPanel();
        % Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function axislabels_edit_Callback(source,~,label)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        switch label
            case 'xmeasure'
                ad.control.axis.labels.x.measure = get(source,'String');
            case 'xunit'
                ad.control.axis.labels.x.unit = get(source,'String');
            case 'ymeasure'
                ad.control.axis.labels.y.measure = get(source,'String');
            case 'yunit'
                ad.control.axis.labels.y.unit = get(source,'String');
            case 'zmeasure'
                ad.control.axis.labels.z.measure = get(source,'String');
            case 'zunit'
                ad.control.axis.labels.z.unit = get(source,'String');
            otherwise
                msgstr = { 'Unknown axis label in callback function call.' ...
                    sprintf('Function "%s" in file "%s"',...
                    'axislabels_edit_Callback',...
                    mfilename ...
                    )...
                    };
                TAmsg(msgstr,'warning');
                return;
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function axislabels_getfromactivedataset_pushbutton_Callback(~,~)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        if (isempty(ad.control.spectra.active))
            return;
        end
        
        if (isfield(ad.data{ad.control.spectra.active},'axes'))
            if (isfield(ad.data{ad.control.spectra.active}.axes,'x') && ...
                    isfield(ad.data{ad.control.spectra.active}.axes.x,'measure'))
                ad.control.axis.labels.x.measure = ...
                    ad.data{ad.control.spectra.active}.axes.x.measure;
            end
            if (isfield(ad.data{ad.control.spectra.active}.axes,'x') && ...
                    isfield(ad.data{ad.control.spectra.active}.axes.x,'unit'))
                ad.control.axis.labels.x.unit = ...
                    ad.data{ad.control.spectra.active}.axes.x.unit;
            end
            if (isfield(ad.data{ad.control.spectra.active}.axes,'y') && ...
                    isfield(ad.data{ad.control.spectra.active}.axes.y,'measure'))
                ad.control.axis.labels.y.measure = ...
                    ad.data{ad.control.spectra.active}.axes.y.measure;
            end
            if (isfield(ad.data{ad.control.spectra.active}.axes,'y') && ...
                    isfield(ad.data{ad.control.spectra.active}.axes.y,'unit'))
                ad.control.axis.labels.y.unit = ...
                    ad.data{ad.control.spectra.active}.axes.y.unit;
            end
            if (isfield(ad.data{ad.control.spectra.active}.axes,'z') && ...
                    isfield(ad.data{ad.control.spectra.active}.axes.z,'measure'))
                ad.control.axis.labels.z.measure = ...
                    ad.data{ad.control.spectra.active}.axes.z.measure;
            end
            if (isfield(ad.data{ad.control.spectra.active}.axes,'z') && ...
                    isfield(ad.data{ad.control.spectra.active}.axes.z,'unit'))
                ad.control.axis.labels.z.unit = ...
                    ad.data{ad.control.spectra.active}.axes.z.unit;
            end
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % Update display panel
        update_displayPanel();
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function axislimits_edit_Callback(source,~,limit)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get value of edit field and replace comma with dot
        value = strrep(get(source,'String'),',','.');
        
        % If value is empty or NaN after conversion to numeric, restore
        % previous entry and return
        if (isempty(value) || isnan(str2double(value)))
            % Update slider panel
            update_displayPanel();
            return;
        end
        
        switch limit
            case 'xmin'
                ad.control.axis.limits.x.min = str2double(value);
            case 'xmax'
                % Test whether value is larger than min for same axis
                if (str2double(value) > ad.control.axis.limits.x.min)
                    ad.control.axis.limits.x.max = str2double(value);
                else
                    set(source,'String',num2str(ad.control.axis.limits.x.max));
                    msgstr = 'Upper limit of an axis must be always bigger than lower limit.';
                    TAmsg(msgstr,'warning');
                    return;
                end
            case 'ymin'
                ad.control.axis.limits.y.min = str2double(value);
            case 'ymax'
                % Test whether value is larger than min for same axis
                if (str2double(value) > ad.control.axis.limits.y.min)
                    ad.control.axis.limits.y.max = str2double(value);
                else
                    set(source,'String',num2str(ad.control.axis.limits.y.max));
                    msgstr = 'Upper limit of an axis must be always bigger than lower limit.';
                    TAmsg(msgstr,'warning');
                    return;
                end
            case 'zmin'
                ad.control.axis.limits.z.min = str2double(value);
            case 'zmax'
                % Test whether value is larger than min for same axis
                if (str2double(value) > ad.control.axis.limits.z.min)
                    ad.control.axis.limits.z.max = str2double(value);
                else
                    set(source,'String',num2str(ad.control.axis.limits.z.max));
                    msgstr = 'Upper limit of an axis must be always bigger than lower limit.';
                    TAmsg(msgstr,'warning');
                    return;
                end
            otherwise
                msgstr = { 'Unknown axis limit in callback function call.' ...
                    sprintf('Function "%s" in file "%s"',...
                    'axislimits_edit_Callback',...
                    mfilename ...
                    )...
                    };
                TAmsg(msgstr,'warning');
                return;
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % Update slider panel
        update_displayPanel();
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function axislimits_auto_checkbox_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        ad.control.axis.limits.auto = get(source,'Value');
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % Update display panel
        update_displayPanel();
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function highlight_method_popupmenu_Callback(source,eventdata)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        highlightTypes = cellstr(get(source,'String'));
        highlightType = highlightTypes{get(source,'Value')};
        ad.control.axis.highlight.method = highlightType;
        
        switch highlightType
            case 'color'
                set(gh.display_panel_highlight_value_popupmenu,...
                    'String','blue|green|red|cyan|magenta|yellow|black');
                set(gh.display_panel_highlight_value_popupmenu,...
                    'Value',1);
            case 'linewidth'
                set(gh.display_panel_highlight_value_popupmenu,...
                    'String','1 px|2 px|3 px|4 px|5 px');
                set(gh.display_panel_highlight_value_popupmenu,...
                    'Value',1);
            case 'linestyle'
                set(gh.display_panel_highlight_value_popupmenu,...
                    'String','solid|dashed|dotted|dash-dotted');
                set(gh.display_panel_highlight_value_popupmenu,...
                    'Value',1);
            case 'marker'
                set(gh.display_panel_highlight_value_popupmenu,...
                    'String','plus|circle|asterisk|point|cross|square|diamond|triangle up|triangle down|triangle right|triangle left|pentagram|hexagram');
                set(gh.display_panel_highlight_value_popupmenu,...
                    'Value',1);
            otherwise
                msg = sprintf('Highlight type %s currently unsupported',highlightType);
                TAmsg(msg,'warning');
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % Update highlight_value_popupmenu
        highlight_value_popupmenu_Callback(source,eventdata);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function highlight_value_popupmenu_Callback(~,~)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        highlightValues = cellstr(...
            get(gh.display_panel_highlight_value_popupmenu,'String'));
        highlightValue = highlightValues{...
            get(gh.display_panel_highlight_value_popupmenu,'Value')};
        
        highlight = struct();
        highlight.color = struct(...
            'blue','b',...
            'green','g',...
            'red','r',...
            'cyan','c',...
            'magenta','m',...
            'yellow','y',...
            'black','k');
        highlight.linewidth = struct(...
            'n1px',1,...
            'n2px',2,...
            'n3px',3,...
            'n4px',4,...
            'n5px',5);
        highlight.linestyle = struct(...
            'solid','-',...
            'dashed','--',...
            'dotted',':',...
            'dashdotted','-.');
        highlight.marker = struct(...
            'plus','+',...
            'circle','o',...
            'asterisk','*',...
            'point','.',...
            'cross','x',...
            'square','s',...
            'diamond','d',...
            'triangleup','^',...
            'triangledown','v',...
            'triangleright','>',...
            'triangleleft','<',...
            'pentagram','p',...
            'hexagram','h');
        
        ad.control.axis.highlight.value = ...
            highlight.(ad.control.axis.highlight.method).(regexprep(...
            strrep(strrep(highlightValue,' ',''),'-',''),'^([0-9])','n$1'));
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function grid_x_togglebutton_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        if (get(source,'Value'))
            ad.control.axis.grid.x = 'on';
        else
            ad.control.axis.grid.x = 'off';
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function grid_y_togglebutton_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        if (get(source,'Value'))
            ad.control.axis.grid.y = 'on';
        else
            ad.control.axis.grid.y = 'off';
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function grid_minor_togglebutton_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        if (get(source,'Value'))
            ad.control.axis.grid.minor = 'on';
        else
            ad.control.axis.grid.minor = 'off';
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function grid_zero_togglebutton_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        ad.control.axis.grid.zero.visible = get(source,'Value');
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function grid_legend_togglebutton_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        % For some currently unknown reason, findobj seems not to work. The
        % parent handle behaves weird...
        legendButtons = [...
            gh.display_panel_legend_auto_togglebutton ...
            gh.display_panel_legend_nw_togglebutton ...
            gh.display_panel_legend_ne_togglebutton ...
            gh.display_panel_legend_sw_togglebutton ...
            gh.display_panel_legend_se_togglebutton ...
            ];
        
        switch source
            case gh.display_panel_legend_auto_togglebutton
                if (get(source,'Value'))
                    ad.control.axis.legend.location = 'Best';
                    set(legendButtons,'Value',0);
                    set(source,'Value',1);
                else
                    ad.control.axis.legend.location = 'none';
                    set(legendButtons,'Value',0);
                end
            case gh.display_panel_legend_nw_togglebutton
                if (get(source,'Value'))
                    ad.control.axis.legend.location = 'NorthWest';
                    set(legendButtons,'Value',0);
                    set(source,'Value',1);
                else
                    ad.control.axis.legend.location = 'none';
                    set(legendButtons,'Value',0);
                end
            case gh.display_panel_legend_ne_togglebutton
                if (get(source,'Value'))
                    ad.control.axis.legend.location = 'NorthEast';
                    set(legendButtons,'Value',0);
                    set(source,'Value',1);
                else
                    ad.control.axis.legend.location = 'none';
                    set(legendButtons,'Value',0);
                end
            case gh.display_panel_legend_sw_togglebutton
                if (get(source,'Value'))
                    ad.control.axis.legend.location = 'SouthWest';
                    set(legendButtons,'Value',0);
                    set(source,'Value',1);
                else
                    ad.control.axis.legend.location = 'none';
                    set(legendButtons,'Value',0);
                end
            case gh.display_panel_legend_se_togglebutton
                if (get(source,'Value'))
                    ad.control.axis.legend.location = 'SouthEast';
                    set(legendButtons,'Value',0);
                    set(source,'Value',1);
                else
                    ad.control.axis.legend.location = 'none';
                    set(legendButtons,'Value',0);
                end
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function normalise_togglebutton_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        % For some currently unknown reason, findobj seems not to work. The
        % parent handle behaves weird...
        normaliseButtons = [...
            gh.display_panel_normalise_pkpk_togglebutton ...
            gh.display_panel_normalise_amplitude_togglebutton ...
            ];
        
        switch source
            case gh.display_panel_normalise_pkpk_togglebutton
                if (get(source,'Value'))
                    ad.control.axis.normalisation = 'pkpk';
                    set(normaliseButtons,'Value',0);
                    set(source,'Value',1);
                else
                    ad.control.axis.normalisation = 'none';
                    set(normaliseButtons,'Value',0);
                end
            case gh.display_panel_normalise_amplitude_togglebutton
                if (get(source,'Value'))
                    ad.control.axis.normalisation = 'amplitude';
                    set(normaliseButtons,'Value',0);
                    set(source,'Value',1);
                else
                    ad.control.axis.normalisation = 'none';
                    set(normaliseButtons,'Value',0);
                end
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
        
        %Update slider panel
        update_sliderPanel();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function datasets_listbox_Callback(~,~)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        ad.control.spectra.active = ad.control.spectra.visible(...
            get(gh.display_panel_datasets_listbox,'Value')...
            );
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % If user double clicked on list entry
        if strcmp(get(gcf,'SelectionType'),'open')
            datasetChangeLabel(ad.control.spectra.active);
        end
        
        % Update display panel
        update_displayPanel();
        
        % Update processing panel
        update_processingPanel();
        
        % Update slider panel
        update_sliderPanel();
        
        % Update visible spectra listboxes (in diverse panels!)
        update_visibleSpectra();
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function linewidth_popupmenu_Callback(~,~)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);

        % Get handles of main window
        gh = guihandles(mainWindow);

        lineWidths = ...
            cellstr(get(gh.display_panel_linewidth_popupmenu,'String'));
        lineWidth = ...
            lineWidths{get(gh.display_panel_linewidth_popupmenu,'Value')};
                
        if ad.control.spectra.active
            ad.data{ad.control.spectra.active}.line.width = ...
                str2double(lineWidth(1));
            % Update appdata of main window
            setappdata(mainWindow,'data',ad.data);
            % Update main axes
            update_mainAxis();
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function linestyle_popupmenu_Callback(source,~,action)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);

        lineStyles = ...
            cellstr(get(source,'String'));
        lineStyle = ...
            lineStyles{get(source,'Value')};

        switch lower(action)
            case 'line'
                if ad.control.spectra.active
                    active = ad.control.spectra.active;
                    switch lineStyle
                        case 'solid'
                            ad.data{active}.line.style = '-';
                        case 'dashed'
                            ad.data{active}.line.style = '--';
                        case 'dotted'
                            ad.data{active}.line.style = ':';
                        case 'dash-dotted'
                            ad.data{active}.line.style = '-.';
                        case 'none'
                            ad.data{active}.line.style = 'none';
                        otherwise
                            % That shall never happen
                            TAmsg('TAgui : guiDisplayPanel: Unknown line style','warning');
                    end
                end
            case 'zeroline'
                switch lineStyle
                    case 'solid'
                        ad.control.axis.grid.zero.style = '-';
                    case 'dashed'
                        ad.control.axis.grid.zero.style = '--';
                    case 'dotted'
                        ad.control.axis.grid.zero.style = ':';
                    case 'dash-dotted'
                        ad.control.axis.grid.zero.style = '-.';
                    case 'none'
                        ad.control.axis.grid.zero.style = 'none';
                    otherwise
                        % That shall never happen
                        TAmsg('TAgui : guiDisplayPanel: Unknown line style','warning');
                end
            otherwise
                msgStr = sprintf([...
                    'TAgui>guiDisplayPanel>linestyle_popupmenu_Callback: ',...
                    'Unknown action "%s"'],action);
                disp(msgStr);
                TAmsg(msgStr,'warning');
        end
        % Update appdata of main window
        setappdata(mainWindow,'data',ad.data);
        setappdata(mainWindow,'control',ad.control);
        % Update main axes
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function linemarker_popupmenu_Callback(~,~)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);

        % Get handles of main window
        gh = guihandles(mainWindow);

        lineMarkers = ...
            cellstr(get(gh.display_panel_linemarker_popupmenu,'String'));
        lineMarker = ...
            lineMarkers{get(gh.display_panel_linemarker_popupmenu,'Value')};
        
        active = ad.control.spectra.active;
        
        if ad.control.spectra.active
            switch lineMarker
                case 'none'
                    ad.data{active}.line.marker.type = 'none';
                case 'plus'
                    ad.data{active}.line.marker.type = '+';
                case 'circle'
                    ad.data{active}.line.marker.type = 'o';
                case 'asterisk'
                    ad.data{active}.line.marker.type = '*';
                case 'point'
                    ad.data{active}.line.marker.type = '.';
                case 'cross'
                    ad.data{active}.line.marker.type = 'x';
                case 'square'
                    ad.data{active}.line.marker.type = 's';
                case 'diamond'
                    ad.data{active}.line.marker.type = 'd';
                case 'triangle up'
                    ad.data{active}.line.marker.type = '^';
                case 'triangle down'
                    ad.data{active}.line.marker.type = 'v';
                case 'triangle right'
                    ad.data{active}.line.marker.type = '<';
                case 'triangle left'
                    ad.data{active}.line.marker.type = '>';
                case 'pentagram'
                    ad.data{active}.line.marker.type = 'p';
                case 'hexagram'
                    ad.data{active}.line.marker.type = 'h';
                otherwise
                    % That shall never happen
                    TAmsg('TAgui : guiDisplayPanel: Unknown line marker','warning');
            end
            % Update appdata of main window
            setappdata(mainWindow,'data',ad.data);
            % Update main axes
            update_mainAxis();
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function show3d_edit_Callback(source,~,label)
    try
        % Get appdata and handles of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        gh = guihandles(mainWindow);
        
        switch label
            case 'xfactor'
                if isnan(str2double(get(source,'String')))
                    set(source,'String','1');
                end
                if (round(str2double(get(source,'String'))) < 1)
                    set(source,'String','1');
                end
                set(gh.display_panel_3D_size_x_edit,'String',...
                    num2str(floor(str2double(...
                    get(gh.display_panel_3D_original_x_edit,'String'))/...
                    round(str2double(get(source,'String')))))...
                    );
                set(source,'String',...
                    round(str2double(get(source,'String'))));
            case 'yfactor'
                if isnan(str2double(get(source,'String')))
                    set(source,'String','1');
                end
                if (round(str2double(get(source,'String'))) < 1)
                    set(source,'String','1');
                end
                set(gh.display_panel_3D_size_y_edit,'String',...
                    num2str(floor(str2double(...
                    get(gh.display_panel_3D_original_y_edit,'String'))/...
                    round(str2double(get(source,'String')))))...
                    );
                set(source,'String',...
                    round(str2double(get(source,'String'))));
            case 'xoffset'
                [~,dimx] = size(ad.data{ad.control.spectra.active}.data);
                if isnan(str2double(get(source,'String')))
                    set(source,'String','0');
                end
                if (round(str2double(get(source,'String'))) < 0)
                    set(source,'String','0');
                end
                if (round(str2double(get(source,'String'))) > dimx-str2double(...
                        get(gh.display_panel_3D_size_x_edit,'String')))
                    set(source,'String',num2str(...
                        dimx-str2double(...
                        get(gh.display_panel_3D_size_x_edit,'String'))));
                end
                set(source,'String',...
                    round(str2double(get(source,'String'))));
            case 'yoffset'
                [dimy,~] = size(ad.data{ad.control.spectra.active}.data);
                if isnan(str2double(get(source,'String')))
                    set(source,'String','0');
                end
                if (round(str2double(get(source,'String'))) < 0)
                    set(source,'String','0');
                end
                if (round(str2double(get(source,'String'))) > dimy-str2double(...
                        get(gh.display_panel_3D_size_y_edit,'String')))
                    set(source,'String',num2str(...
                        dimy-str2double(...
                        get(gh.display_panel_3D_size_y_edit,'String'))));
                end
                set(source,'String',...
                    round(str2double(get(source,'String'))));
            otherwise
                msgstr = { 'Unknown label in callback function call.' ...
                    sprintf('Function "%s" in file "%s"',...
                    'threeDdisplay_edit_Callback',...
                    mfilename ...
                    )...
                    };
                TAmsg(msgstr,'warning');
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function show3d_pushbutton_Callback(~,~)
    try
        % Make 3D representation window effectively a singleton
        singleton = findobj('Tag','trepr_gui_3Drepresentation');
        if (singleton)
            figure(singleton);
            return;
        end

        % Get appdata and handles of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        gh = guihandles(mainWindow);
        
        % Return if there is no currently active spectrum
        if isempty(ad.control.spectra.active) || ~ad.control.spectra.active 
            return;
        end
                
        % Get 3D representation type
        representationTypes = cellstr(...
            get(gh.display_panel_3D_display_type_popupmenu,'String'));
        representationType = representationTypes{...
            get(gh.display_panel_3D_display_type_popupmenu,'Value')};        
        
        % Create parameters struct for TA3Drepresentation
        TA3DrepresentationParameters = struct(...
            'type', representationType...
            );
        TA3DrepresentationParameters.size.x = ...
            str2double(get(gh.display_panel_3D_size_x_edit,'String'));
        TA3DrepresentationParameters.size.y = ...
            str2double(get(gh.display_panel_3D_size_y_edit,'String'));
        
        if get(gh.display_panel_offset_auto_checkbox,'Value')
            TA3DrepresentationParameters.offset.type = 'automatic';
        else
            offsetTypes = cellstr(...
                get(gh.display_panel_3D_offset_type_popupmenu,'String'));
            offsetType = offsetTypes{...
                get(gh.display_panel_3D_offset_type_popupmenu,'Value')};
            TA3DrepresentationParameters.offset.type = offsetType;
            TA3DrepresentationParameters.offset.x = ...
                str2double(get(gh.display_panel_3D_offset_x_edit,'String'));
            TA3DrepresentationParameters.offset.y = ...
                str2double(get(gh.display_panel_3D_offset_y_edit,'String'));
        end
        
        figHandle = TA3Drepresentation(...
            ad.data{ad.control.spectra.active},...
            TA3DrepresentationParameters);
        
        % Set tag for figure window containing 3D representation
        set(figHandle,'Tag','trepr_gui_3Drepresentation');

    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function export3d_pushbutton_Callback(~,~)
    try
        % Look for 3D representation window
        figHandle = findobj('Tag','trepr_gui_3Drepresentation');
        if isempty(figHandle)
            return;
        end
        
        % Get appdata and handles of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        gh = guihandles(mainWindow);
        
        % Set focus on figure window with 3D representation
        figure(figHandle);

        % Get export format
        figExportFormats = cellstr(...
            get(gh.display_panel_3D_format_popupmenu,'String'));
        exportFormat = figExportFormats{...
            get(gh.display_panel_3D_format_popupmenu,'Value')};

        % Get file type to save to
        fileTypes = cellstr(...
            get(gh.display_panel_3D_filetype_popupmenu,'String'));
        fileType = fileTypes{...
            get(gh.display_panel_3D_filetype_popupmenu,'Value')};
        
        % Generate default file name if possible, be very defensive
        if ad.control.spectra.visible
            [~, f, ~] = ...
                fileparts(ad.data{ad.control.spectra.active}.file.name);
            fileNameSuggested = [f '-3D'];
            clear f;
        else
            fileNameSuggested = '';
        end
        
        % Ask user for file name
        [fileName,pathName] = uiputfile(...
            sprintf('*.%s',fileType),...
            'Get filename to export 3D representation to',...
            fileNameSuggested);
        % If user aborts process, return
        if fileName == 0
            return;
        end
        % Create filename with full path
        fileName = fullfile(pathName,fileName);
        
        % Save figure, depending on settings for file type and format
        status = fig2file(figHandle,fileName,...
            'fileType',fileType,'exportFormat',exportFormat);
        if status
            TAmsg(msg,'warning');
        end
        
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function threshold_checkbox_Callback(source,~,label)
    try
        % Get appdata and handles of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        gh = guihandles(mainWindow);
        
        if ~ad.control.spectra.active
            return;
        end

        value = get(source,'Value');
        
        active = ad.control.spectra.active;

        switch label
            case 'min'
                if value
                    set(gh.display_panel_threshold_min_edit,'Enable','On');
                else
                    set(gh.display_panel_threshold_min_edit,'Enable','Off');
                end
                if get(gh.display_panel_threshold_all_checkbox,'Value')
                    for k=1:length(ad.control.spectra.visible)
                        ad.data{ad.control.spectra.visible(k)...
                            }.display.threshold.min.enable = value;
                        ad.data{ad.control.spectra.visible(k)...
                            }.display.threshold.min.value = ...
                            str2double(...
                            get(gh.display_panel_threshold_min_edit,'String'));
                    end
                else
                    ad.data{active}.display.threshold.min.enable = value;
                    ad.data{active}.display.threshold.min.value = ...
                        str2double(...
                        get(gh.display_panel_threshold_min_edit,'String'));
                end
            case 'max'
                if value
                    set(gh.display_panel_threshold_max_edit,'Enable','On');
                else
                    set(gh.display_panel_threshold_max_edit,'Enable','Off');
                end
                if get(gh.display_panel_threshold_all_checkbox,'Value')
                    for k=1:length(ad.control.spectra.visible)
                        ad.data{ad.control.spectra.visible(k)...
                            }.display.threshold.max.enable = value;
                        ad.data{ad.control.spectra.visible(k)...
                            }.display.threshold.max.value = ...
                            str2double(...
                            get(gh.display_panel_threshold_max_edit,'String'));
                    end
                else
                    ad.data{active}.display.threshold.max.enable = value;
                    ad.data{active}.display.threshold.max.value = ...
                        str2double(...
                        get(gh.display_panel_threshold_max_edit,'String'));
                end
            otherwise
                % That shall never happen
                disp('guiDisplayPanel() : threshold_checkbox_Callback : Unknown label');
        end
        setappdata(mainWindow,'data',ad.data);

        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function threshold_edit_Callback(source,~,label)
    try
        % Get appdata and handles of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        gh = guihandles(mainWindow);
        
        if ~ad.control.spectra.active
            return;
        end
        
        % Get value of edit field and replace comma with dot
        value = strrep(get(source,'String'),',','.');
        
        % If value is empty or NaN after conversion to numeric, restore
        % previous entry and return
        if (isempty(value) || isnan(str2double(value)))
            % Update slider panel
            update_displayPanel();
            return;
        end
        
        active = ad.control.spectra.active;
        
        switch label
            case 'min'
                if isempty(value)
                    value = min(min(ad.data{active}.data));
                elseif isnan(str2double(value))
                    value = 0;
                else
                    value = str2double(value);
                end
                if get(gh.display_panel_threshold_all_checkbox,'Value')
                    for k=1:length(ad.control.spectra.visible)
                        ad.data{ad.control.spectra.visible(k)...
                            }.display.threshold.min.value = ...
                            value;
                        ad.data{ad.control.spectra.visible(k)...
                            }.display.threshold.min.enable = 1;
                    end
                else
                    ad.data{active}.display.threshold.min.value = ...
                        value;
                end
            case 'max'
                if isempty(value)
                    value = max(max(ad.data{active}.data));
                elseif isnan(str2double(value))
                    value = 0;
                else
                    value = str2double(value);
                end
                if get(gh.display_panel_threshold_all_checkbox,'Value')
                    for k=1:length(ad.control.spectra.visible)
                        ad.data{ad.control.spectra.visible(k)...
                            }.display.threshold.max.value = ...
                            value;
                        ad.data{ad.control.spectra.visible(k)...
                            }.display.threshold.max.enable = 1;
                    end
                else
                    ad.data{active}.display.threshold.max.value = ...
                        value;
                end
            otherwise
                % That shall never happen
                disp('guiDisplayPanel() : threshold_edit_Callback : Unknown label');
        end
        setappdata(mainWindow,'data',ad.data);

        %Update main axis
        update_mainAxis();
        
        % Update display panel
        update_displayPanel();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end
        
function mfe_displaymode_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get value from load_panel_filetype_popupmenu
        MFEdisplayModes = cellstr(get(source,'String'));
        MFEdisplayMode = MFEdisplayModes{get(source,'Value')};
        
        ad.control.axis.MFEdisplay = MFEdisplayMode;
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function datasetChangeLabel(index)
    try
        % Get appdata of main window
        mainWindow = TAguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        ad.data{index}.label = TAgui_setLabelWindow(ad.data{index}.label);
        % Update appdata of main window
        setappdata(mainWindow,'data',ad.data);
        
        % Add status message (mainly for debug reasons)
        % IMPORTANT: Has to go AFTER setappdata
        msgStr = cell(0,1);
        msgStr{end+1} = sprintf(...
            'Changed label of dataset %i to "%s"',...
            ad.control.spectra.active,...
            ad.data{index}.label);
        invStr = sprintf('%i ',ad.control.spectra.invisible);
        visStr = sprintf('%i ',ad.control.spectra.visible);
        msgStr{end+1} = sprintf(...
            'Currently invisible: [ %s]; currently visible: [ %s]; total: %i',...
            invStr,visStr,length(ad.data));
        TAmsg(msgStr,'info');
        clear msgStr;
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            TAmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            TAgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

end
