function varargout = TAdataStructure(varargin)
% TADATASTRUCTURE Return data structure for TA toolbox data, or test
% compliance of given structure with the data structure of the toolbox.
%
% Usage
%   structure = TAdataStructure;
%   structure = TAdataStructure(<command>)
%   [missingFields,wrongType] = TAdataStructure(<command>,structure)
%
%   <command> - string 
%               one of 'structure', 'model' or 'check'
%               'structure' - return (empty) TA toolbox data structure
%               'model' -     return TA toolbox data structure with
%                             field types as values
%               'check' -     check given structure for compliance with the
%                             toolbox data structure
%
%   structure - struct
%               either empty TA toolbox data structure or 
%               TA toolbox data structure with field types as values
%
%   missingFields - cell array
%                   List of fields missing in the structure with respect to
%                   the toolbox data structure
%
%   wrongType -     cell array
%                   List of fields in structure having the wrong type with
%                   respect to the toolbox data structure
%
% See also TALOAD.

% Copyright (c) 2011-12, Till Biskup
% 2012-10-22

% If called without parameter, do something useful: display help
if nargin==0 && nargout==0
    help TAdataStructure
    return;
end

% TODO: Needs better handling - most probably via optional input argument
% Determine debug level
debugLevel = 0;

% Create empty TA toolbox data structure
dataStructure = struct();
dataStructure.data = [];
dataStructure.axes = struct(...
    'x',struct(...
        'values',[], ...
        'measure','', ...
        'unit','' ...
        ), ...
    'y',struct(...
        'values',[], ...
        'measure','', ...
        'unit','' ...
        ), ...
    'z',struct(...
        'measure','', ...
        'unit','' ...
        ) ...
    );
dataStructure.parameters = struct(...
    'runs',[],...
    'operator','',...
    'date',struct(...
        'start','',...
        'end',''...
        ),...
    'experiment','',...
    'shotRepetitionRate',struct(...
        'value',[],...
        'unit',''...
        ),...
    'spectrometer',struct(...
        'name','',...
        'software',''...
        ),...
    'transient',struct(...
        'points',[],...
        'triggerPosition',[],...
        'length',[],...
        'unit',''...
        ),...
    'spectrograph',struct(...
        'type','',...
        'model','',...
        'aperture',struct(...
            'front',struct(...
                'value',[],...
                'unit',''...
                ),...
            'back',struct(...   
                'value',[],...
                'unit',''...
                )...
            )...
        ),...
    'detection',struct(...
        'type','',...
        'model','',...
        'powersupply','',...
        'impedance',struct(...
            'value',[],...
            'unit',''...
            ),...
        'timeConstant',struct(...
            'value',[],...
            'unit',''...
            )...
        ),...
    'recorder',struct(...
        'sensitivity',struct(...
            'value',[],...
            'unit',''...
            ),...
        'averages',[],...
        'timeBase',struct(...
            'value',[],...
            'unit',''...
            ),...
        'bandwidth',struct(...
            'value',[],...
            'unit',''...
            ),...
        'coupling','',...
        'model',''...
        ),...
    'pump',struct(...
        'type','',...
        'model','',...
        'wavelength',struct(...
            'value',[],...
            'unit',''...
            ),...
        'repetitionRate',struct(...
            'value',[],...
            'unit',''...
            ),...
        'power',struct(...
            'value',[],...
            'unit',''...
            ),...
        'tunable',struct(...
            'type','',...
            'model','',...
            'dye',''...
            )...
        ),...
    'probe',struct(...
        'type','',...
        'model','',...
        'wavelength',struct(...
            'start',[],...
            'stop',[],...
            'step',[],...
            'sequence','',...
            'unit',''...
            ),...
        'power',struct(...
            'value',[],...
            'unit',''...
            ),...
        'filter','',...
        'background',''...
        ),...
    'temperature',struct(...
        'value',[],...
        'unit','',...
        'controller','',...
        'cryostat','',...
        'cryogen',''...
        ),...
    'MFE',struct(...
        'field',struct(...
            'value',[],...
            'unit',''...
            ),...
        'coils',struct(...
            'type','',...
            'model',''...
            ),...
        'powerSupply','',...
        'gaussmeter',''...
        ),...
    'timeProfiles',struct(...
        'filename','',...
        'wavelength',struct(...
            'value',[],...
            'unit',''...
            ),...
        'averages',[],...
        'runs',[],...
        'filter',''...
        )...
    );
dataStructure.parameters.purpose = cell(0);
dataStructure.sample = struct(...
    'name','',...
    'cuvette',''...
    );
dataStructure.sample.description = cell(0);
dataStructure.sample.buffer = cell(0);
dataStructure.sample.preparation = cell(0);
dataStructure.header = cell(0);
dataStructure.comment = cell(0);
dataStructure.info = struct();
dataStructure.file = struct(...
    'name','', ...
    'format','' ...
    );
dataStructure.label = '';
dataStructure.format = struct(...
    'name','TA toolbox', ...
    'version','0.5' ...
    );


% Create TA toolbox data model (structure with field types as values)
dataModel = struct();
dataModel.data = 'ismatrix';
dataModel.axes = struct(...
    'x',struct(...
        'values','isvector', ...
        'measure','ischar', ...
        'unit','ischar' ...
        ), ...
    'y',struct(...
        'values','isvector', ...
        'measure','ischar', ...
        'unit','ischar' ...
        ), ...
    'z',struct(...
        'measure','ischar', ...
        'unit','ischar' ...
        ) ...
    );
dataModel.parameters = struct(...
    'runs','isscalar',...
    'operator','ischar',...
    'date',struct(...
        'start','ischar',...
        'end','ischar'...
        ),...
    'experiment','ischar',...
    'purpose','iscell',...
    'shotRepetitionRate',struct(...
        'value','isscalar',...
        'unit','ischar'...
        ),...
    'spectrometer',struct(...
        'name','ischar',...
        'software','ischar'...
        ),...
    'transient',struct(...
        'points','isscalar',...
        'triggerPosition','isscalar',...
        'length','isscalar',...
        'unit','ischar'...
        ),...
    'spectrograph',struct(...
        'type','ischar',...
        'model','ischar',...
        'aperture',struct(...
            'front',struct(...
                'value','isscalar',...
                'unit','ischar'...
                ),...
            'back',struct(...   
                'value','isscalar',...
                'unit','ischar'...
                )...
            )...
        ),...
    'detection',struct(...
        'type','ischar',...
        'model','ischar',...
        'powersupply','ischar',...
        'impedance',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'timeConstant',struct(...
            'value','isscalar',...
            'unit','ischar'...
            )...
        ),...
    'recorder',struct(...
        'sensitivity',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'averages','isscalar',...
        'timeBase',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'bandwidth',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'coupling','ischar',...
        'model','ischar'...
        ),...
    'pump',struct(...
        'type','ischar',...
        'model','ischar',...
        'wavelength',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'repetitionRate',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'power',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'tunable',struct(...
            'type','ischar',...
            'model','ischar',...
            'dye','ischar'...
            )...
        ),...
    'probe',struct(...
        'type','ischar',...
        'model','ischar',...
        'wavelength',struct(...
            'start','isscalar',...
            'stop','isscalar',...
            'step','isscalar',...
            'sequence','ischar',...
            'unit','ischar'...
            ),...
        'power',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'filter','ischar',...
        'background','ischar'...
        ),...
    'temperature',struct(...
        'value','isscalar',...
        'unit','ischar',...
        'controller','ischar',...
        'cryostat','ischar',...
        'cryogen','ischar'...
        ),...
    'MFE',struct(...
        'field',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'coils',struct(...
            'type','ischar',...
            'model','ischar'...
            ),...
        'powerSupply','ischar',...
        'gaussmeter','ischar'...
        ),...
    'timeProfiles',struct(...
        'filename','ischar',...
        'wavelength',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'averages','isscalar',...
        'runs','isscalar',...
        'filter','ischar'...
        )...
    );
dataModel.sample = struct(...
    'name','ischar', ...
    'cuvette','ischar', ...
    'description','iscell', ...
    'buffer','iscell', ...
    'preparation','iscell' ...
    );
dataModel.header = 'iscell';
dataModel.comment = 'iscell';
dataModel.info = 'isstruct';
dataModel.file = struct(...
    'name','ischar', ...
    'format','ischar' ...
    );
dataModel.label = 'ischar';
dataModel.format = struct(...
    'name','ischar', ...
    'version','ischar' ...
    );

if nargin && ischar(varargin{1})
    switch lower(varargin{1})
        case 'structure'
            if nargout
                varargout{1} = dataStructure;
            end
        case 'model'
            if nargout
                varargout{1} = dataModel;
            end
        case 'check'
            if nargin < 2
                fprintf('No structure to check...\n');
                if nargout
                    for k=1:nargout
                        varargout{k} = struct();
                    end
                end
                return;
            end
            if ~isstruct(varargin{2})
                fprintf('%s has wrong type',inputname(2));
                if nargout
                    for k=1:nargout
                        varargout{k} = struct();
                    end
                end
                return;
            end
            
            [missingFields,wrongType] = ...
                checkStructure(dataModel,varargin{2},inputname(2));
            if nargout
                varargout{1} = missingFields;
                if nargout == 2
                    varargout{2} = wrongType;
                end
            end

            if ~isempty(missingFields)
                fprintf('There are missing fields:\n');
                for k=1:length(missingFields)
                    fprintf('  %s\n',char(missingFields{k}));
                end
            end
            if ~isempty(wrongType)
                fprintf('There are fields with wrong type:\n');
                for k=1:length(wrongType)
                    fprintf('  %s\n',char(wrongType{k}));
                end
                return;
            end
            if isempty(missingFields) && isempty(wrongType)
                if debugLevel > 0
                    fprintf('Basic test passed! Structure seems fine...\n');
                end
                return;
            end
        otherwise
            fprintf('Command ''%s'' unknown\n',varargin{1});
            return;
    end
else
    if nargout
        varargout{1} = dataStructure;
    end
end

end

function fieldNameList = getFieldNameList(structure)
fieldNameList = cell(0);
    function traverse(structure,parent)
        fieldNames = fieldnames(structure);
        for k=1:length(fieldNames)
            if isstruct(structure.(fieldNames{k})) && ...
                    ~isempty(fieldnames(structure.(fieldNames{k})))
                % It is important to check whether the struct is empty, as
                % it would not get added to the list of field names.
                traverse(structure.(fieldNames{k}),[parent '.' fieldNames{k}]);
            else
                fieldNameList{end+1} = sprintf('%s.%s',parent,fieldNames{k});
            end
        end
    end
traverse(structure,'structure');
end

function [missingFields,wrongType] = checkStructure(model,structure,name)
missingFields = cell(0);
wrongType = cell(0);
    function traverse(model,structure,parent)
        modelFieldNames = fieldnames(model);
        for k=1:length(modelFieldNames)
            if ~isfield(structure,modelFieldNames{k})
                missingFields{end+1} = ...
                    sprintf('%s.%s',parent,modelFieldNames{k});
            else
                if isstruct(model.(modelFieldNames{k}))
                    if ~isstruct(structure.(modelFieldNames{k}))
                        wrongType{end+1} = ...
                            sprintf('%s.%s',parent,modelFieldNames{k});
                    end
                    traverse(...
                        model.(modelFieldNames{k}),...
                        structure.(modelFieldNames{k}),...
                        [parent '.' modelFieldNames{k}]...
                        );
                else
                    functionHandle = str2func(model.(modelFieldNames{k}));
                    if ~functionHandle(structure.(modelFieldNames{k}))
                        if strcmp(model.(modelFieldNames{k}),'isscalar') || ...
                                strcmp(model.(modelFieldNames{k}),'isvector')
                            if isnumeric(structure.(modelFieldNames{k})) && ...
                                    isempty(structure.(modelFieldNames{k}))
                                return;
                            end
                        end
                        wrongType{end+1} = ...
                            sprintf('%s.%s',parent,modelFieldNames{k});
                    end
                end
            end
        end
    end
traverse(model,structure,name);
end
